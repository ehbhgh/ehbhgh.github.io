<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JS中的闭包与模块</title>
      <link href="/2020/10/23/JS%20%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85%E4%B8%8E%E6%A8%A1%E5%9D%97/"/>
      <url>/2020/10/23/JS%20%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85%E4%B8%8E%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="JS-中的闭包与模块"><a href="#JS-中的闭包与模块" class="headerlink" title="JS 中的闭包与模块"></a>JS 中的闭包与模块</h2><p>全局变量使用容易引发bug，咱们经常教导尽量不要使用全局变量，尽管全局变量在某些情况下是有用的。例如，在浏览器中使用JS时，咱们可以访问全局<code>window</code>对象，<code>window</code>中有很多有用的方法，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">window.alert(&#39;Hello world&#39;); &#x2F;&#x2F; Shows an alert</span><br><span class="line">window.setTimeout(callback, 3000); &#x2F;&#x2F; Delay execution</span><br><span class="line">window.fetch(someUrl); &#x2F;&#x2F; make XHR requests</span><br><span class="line">window.open(); &#x2F;&#x2F; Opens a new tab</span><br></pre></td></tr></table></figure><p>这些方法也像这样使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alert(&#39;Hello world&#39;); &#x2F;&#x2F; Shows an alert</span><br><span class="line">setTimeout(callback, 3000); &#x2F;&#x2F; Delay execution</span><br><span class="line">fetch(someUrl); &#x2F;&#x2F; make XHR requests</span><br><span class="line">open(); &#x2F;&#x2F; Opens a new tab</span><br></pre></td></tr></table></figure><p>这是方便的。<code>Redux</code>是另一个“好”全局变量的例子:整个应用程序的状态存储在一个JS对象中，这个对象可以从整个应用程序(通过Redux)访问。但是当在一个团队如果同时有50个编写代码时，以如何处理这样的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; [];</span><br><span class="line"></span><br><span class="line">function addToArr(element) &#123;</span><br><span class="line">  arr.push(element);</span><br><span class="line">  return element + &quot; added!&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>咱们同事在另一个文件中创建一个名为<code>arr</code>的新全局数组的几率有多大?我觉得非常高。JS中的全局变量非常糟糕的另一个原因是引擎足够友好，可以为咱们创建全局变量。如果忘了在变量名前加上<code>var</code>，就像这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name &#x3D; &quot;Valentino&quot;;</span><br></pre></td></tr></table></figure><p>JS引擎为会创建一个全局变量，更糟糕的是，可以在函数中创建了“非预期”变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function doStuff() &#123;</span><br><span class="line">  name &#x3D; &quot;Valentino&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doStuff();</span><br><span class="line"></span><br><span class="line">console.log(name); &#x2F;&#x2F; &quot;Valentino&quot;</span><br></pre></td></tr></table></figure><p>无辜的功能最终污染了全球环境。幸运的是，可以用“严格模式”来消除这种行为， 在每个JS文件使用<code>“use strict”</code>足以避免愚蠢的错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">function doStuff() &#123;</span><br><span class="line">  name &#x3D; &quot;Valentino&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doStuff();</span><br><span class="line"></span><br><span class="line">console.log(name); &#x2F;&#x2F; ReferenceError: name is not defined</span><br></pre></td></tr></table></figure><p>但一直使用严格模式也是一个问题，并不确实每个开发人员都会使用严格模式，因此，咱们必须找到一种解决“全局变量污染”问题的方法，幸运的是，JS 一直有一个内置的机制来解决这个问题。</p><h2 id="揭秘闭包"><a href="#揭秘闭包" class="headerlink" title="揭秘闭包"></a>揭秘闭包</h2><p>那么，咱们如何保护全局变量不被污染?让咱们从一个简单的解开始，把<code>arr</code>移动到一个函数中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function addToArr(element) &#123;</span><br><span class="line">  var arr &#x3D; [];</span><br><span class="line">  arr.push(element);</span><br><span class="line">  return element + &quot; added to &quot; + arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>似乎合理，但结果不是咱们所期望的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var firstPass &#x3D; addToArr(&quot;a&quot;);</span><br><span class="line">var secondPass &#x3D; addToArr(&quot;b&quot;);</span><br><span class="line">console.log(firstPass); &#x2F;&#x2F; a added to a</span><br><span class="line">console.log(secondPass); &#x2F;&#x2F; b added to b</span><br></pre></td></tr></table></figure><p><code>arr</code>在每次函数调用时都会被重置，现在它成了一个局部变量，而在第一个例子中咱们声明的<code>arr</code>是全局变量。全局变量是“实时的”，不会被重围。局部变量在函数执行完后就会被销毁了似乎没有办法防止局部变量被破坏？闭包会有帮助吗？但是什么是 闭包呢？</p><p>JS函数可以包含其他函数，这到现在是很常见的，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function addToArr(element) &#123;</span><br><span class="line">  var arr &#x3D; [];</span><br><span class="line"></span><br><span class="line">  function push() &#123;</span><br><span class="line">    arr.push(element);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return element + &quot; added to &quot; + arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但如果咱们直接把 <code>push</code> 函数返回，又会怎么样呢？如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function addToArr(element) &#123;</span><br><span class="line">  var arr &#x3D; [];</span><br><span class="line"></span><br><span class="line">  return function push() &#123;</span><br><span class="line">    arr.push(element);</span><br><span class="line">    console.log(arr);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;return element + &quot; added to &quot; + arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外部函数变成一个容器，返回另一个函数。第二个<code>return</code>语句被注释，因为该代码永远不会被执行。此时，咱们知道函数调用的结果可以保存在变量中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var result &#x3D; addToArr();</span><br></pre></td></tr></table></figure><p>现在<code>result</code>变成了一个可执行的JS函数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var result &#x3D; addToArr();</span><br><span class="line">result(&quot;a&quot;);</span><br><span class="line">result(&quot;b&quot;);</span><br></pre></td></tr></table></figure><p>只需修复一下，将参数“<code>element</code>”从外部函数移动到内部函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function addToArr() &#123;</span><br><span class="line">  var arr &#x3D; [];</span><br><span class="line"></span><br><span class="line">  return function push(element) &#123;</span><br><span class="line">    arr.push(element);</span><br><span class="line">    console.log(arr);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;return element + &quot; added to &quot; + arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>神奇的现象出现了，完整代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function addToArr() &#123;</span><br><span class="line">  var arr &#x3D; [];</span><br><span class="line"></span><br><span class="line">  return function push(element) &#123;</span><br><span class="line">    arr.push(element);</span><br><span class="line">    console.log(arr);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;return element + &quot; added to &quot; + arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var result &#x3D; addToArr();</span><br><span class="line">result(&quot;a&quot;); &#x2F;&#x2F; [ &#39;a&#39; ]</span><br><span class="line">result(&quot;b&quot;); &#x2F;&#x2F; [ &#39;a&#39;, &#39;b&#39; ]</span><br></pre></td></tr></table></figure><p>这种被称为JS闭包:一个能够记住其环境变量的函数。为此，内部函数必须是一个封闭(外部)函数的返回值。这种也称为<strong>工厂函数</strong>。代码可以稍作调整，变更可以取更好的命名，内部函数可以是匿名的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function addToArr() &#123;</span><br><span class="line">  var arr &#x3D; [];</span><br><span class="line"></span><br><span class="line">  return function(element) &#123;</span><br><span class="line">    arr.push(element);</span><br><span class="line">    return element + &quot; added to &quot; + arr;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var closure &#x3D; addToArr();</span><br><span class="line">console.log(closure(&quot;a&quot;)); &#x2F;&#x2F; a added to a</span><br><span class="line">console.log(closure(&quot;b&quot;)); &#x2F;&#x2F; b added to a,b</span><br></pre></td></tr></table></figure><p>现在应该清楚了，“<code>闭包</code>”是内部函数。但有一个问题需要解决:咱们为什么要这样做?JS闭包的真正目的是什么?</p><h2 id="闭包的需要"><a href="#闭包的需要" class="headerlink" title="闭包的需要"></a>闭包的需要</h2><p>除了纯粹的“学术”知识之外，JS闭包还有很多用处：</p><ul><li>提供私有的全局变量</li><li>在函数调用之间保存变量(状态)</li></ul><p>JS中闭包最有趣的应用程序之一是<code>模块模式</code>。在ES6之前，除了将变量和方法封装在函数中之外，没有其他方法可以模块化JS代码并提供私有变量与方法”。闭包与立即调用的函数表达式相结合 是至今通用解决方案。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var Person &#x3D; (function()&#123;</span><br><span class="line">  &#x2F;&#x2F; do something</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>在模块中可以有“私有”变量和方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var Person &#x3D; (function() &#123;</span><br><span class="line">  var person &#x3D; &#123;</span><br><span class="line">    name: &quot;&quot;,</span><br><span class="line">    age: 0</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  function setName(personName) &#123;</span><br><span class="line">    person.name &#x3D; personName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function setAge(personAge) &#123;</span><br><span class="line">    person.age &#x3D; personAge;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>从外部咱们无法访问<code>person.name</code>或<code>person.age</code>。咱们也不能调用<code>setName</code>或<code>setAge</code>。模块内的所有内容都是“私有的”。如果想公开咱们的方法，我们可以返回一个包含对私有方法引用的对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var Person &#x3D; (function() &#123;</span><br><span class="line">  var person &#x3D; &#123;</span><br><span class="line">    name: &quot;&quot;,</span><br><span class="line">    age: 0</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  function setName(personName) &#123;</span><br><span class="line">    person.name &#x3D; personName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function setAge(personAge) &#123;</span><br><span class="line">    person.age &#x3D; personAge;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return &#123;</span><br><span class="line">    setName: setName,</span><br><span class="line">    setAge: setAge</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>如果想获取<code>person</code>对象，添加一个获取 <code>person</code> 对象的方法并返回即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">var Person &#x3D; (function() &#123;</span><br><span class="line">  var person &#x3D; &#123;</span><br><span class="line">    name: &quot;&quot;,</span><br><span class="line">    age: 0</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  function setName(personName) &#123;</span><br><span class="line">    person.name &#x3D; personName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function setAge(personAge) &#123;</span><br><span class="line">    person.age &#x3D; personAge;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function getPerson() &#123;</span><br><span class="line">    return person.name + &quot; &quot; + person.age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return &#123;</span><br><span class="line">    setName: setName,</span><br><span class="line">    setAge: setAge,</span><br><span class="line">    getPerson: getPerson</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">Person.setName(&quot;Tom&quot;);</span><br><span class="line">Person.setAge(44);</span><br><span class="line">var person &#x3D; Person.getPerson();</span><br><span class="line">console.log(person); &#x2F;&#x2F; Tom 44</span><br></pre></td></tr></table></figure><p>这种方式，外部获取不到 <code>person</code> 对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Person.person); &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure><p>模块模式不是构造JS代码的唯一方式。使用对象，咱们可以实现相同的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var Person &#x3D; &#123;</span><br><span class="line">  name: &quot;&quot;,</span><br><span class="line">  age: 0,</span><br><span class="line">  setName: function(personName) &#123;</span><br><span class="line">    this.name &#x3D; personName;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; other methods here</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但是这样，内部属性就不在是私有的了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var Person &#x3D; &#123;</span><br><span class="line">  name: &quot;&quot;,</span><br><span class="line">  age: 0,</span><br><span class="line">  setName: function(personName) &#123;</span><br><span class="line">    this.name &#x3D; personName;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; other methods here</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Person.setName(&quot;Tom&quot;);</span><br><span class="line"></span><br><span class="line">console.log(Person.name); &#x2F;&#x2F; Tom</span><br></pre></td></tr></table></figure><p>这是模块的主要卖点之一。另一个好处是，模块有助于组织代码，使其具有重用性和可读性。如，开发人员看到以下的代码就大概知道是做什么的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">var Person &#x3D; (function() &#123;</span><br><span class="line">  var person &#x3D; &#123;</span><br><span class="line">    name: &quot;&quot;,</span><br><span class="line">    age: 0</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  function setName(personName) &#123;</span><br><span class="line">    person.name &#x3D; personName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function setAge(personAge) &#123;</span><br><span class="line">    person.age &#x3D; personAge;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function getPerson() &#123;</span><br><span class="line">    return person.name + &quot; &quot; + person.age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return &#123;</span><br><span class="line">    setName: setName,</span><br><span class="line">    setAge: setAge,</span><br><span class="line">    getPerson: getPerson</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>全局变量很容易引发bug，咱们应该尽可能地避免它们。有时全局变量是有用的，需要格外小心使用，因为JS引擎可以自由地创建全局变量。</p><p>这些年来出现了许多模式来管理全局变量，模块模式就是其中之一。模块模式建立在闭包上，这是JS的固有特性。JS 中的闭包是一种能够“记住”其变量环境的函数，即使在后续函数调用之间也是如此。当咱们从另一个函数返回一个函数时，会创建一个闭包，这个模式也称为<strong>“工厂函数</strong>”。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ul><li>什么是闭包？</li><li>使用全局变量有哪些不好的方面？</li><li>什么是 JS 模块，为什么要使用它？</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Flutter实现国际化</title>
      <link href="/2020/10/21/Flutter%E5%AE%9E%E7%8E%B0%E5%9B%BD%E9%99%85%E5%8C%96/"/>
      <url>/2020/10/21/Flutter%E5%AE%9E%E7%8E%B0%E5%9B%BD%E9%99%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="Flutter实现国际化"><a href="#Flutter实现国际化" class="headerlink" title="Flutter实现国际化"></a>Flutter实现国际化</h2><h2 id="一-国际化的认识"><a href="#一-国际化的认识" class="headerlink" title="一. 国际化的认识"></a>一. 国际化的认识</h2><p>开发一个App，如果我们的App需要面向不同的语种（比如中文、英文、繁体等），那么我们需要对齐进行国际化开发。</p><p>国际化的英文称呼：<strong>internationalization</strong>（简称为<strong>i18n</strong>，取前后两个字母，18表示中间省略字母的个数）</p><p>App国际化开发主要包括：文本国际化（包括文本的顺序），Widget显示的国际化：</p><ul><li>比如我们下面开发的这个App</li><li>某些文本在英文环境下应该显示为英文；</li><li>某些Widget在中文环境下，应该显示中文（比如弹出的时间选择器）；</li></ul><h2 id="二-国际化的适配"><a href="#二-国际化的适配" class="headerlink" title="二. 国际化的适配"></a>二. 国际化的适配</h2><h3 id="2-1-Widget的国际化"><a href="#2-1-Widget的国际化" class="headerlink" title="2.1. Widget的国际化"></a>2.1. Widget的国际化</h3><p>Flutter给我们提供的Widget默认情况下就是支持国际化，但是在没有进行特别的设置之前，它们无论在什么环境都是以<strong>英文</strong>的方式显示的。</p><p>如果想要添加其他语言，你的应用必须指定额外的 MaterialApp 属性并且添加一个单独的 package，叫做 <code>flutter_localizations</code>。</p><ul><li>截至到 2020 年 2 月份，这个 package 已经支持大约 77 种语言。</li></ul><h4 id="2-1-1-pubspec添加依赖"><a href="#2-1-1-pubspec添加依赖" class="headerlink" title="2.1.1. pubspec添加依赖"></a>2.1.1. pubspec添加依赖</h4><p>想要使用 flutter_localizations 的话，我们需要在 <code>pubspec.yaml</code> 文件中添加它作为依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  flutter:</span><br><span class="line">    sdk: flutter</span><br><span class="line">  flutter_localizations:</span><br><span class="line">    sdk: flutter</span><br></pre></td></tr></table></figure><h4 id="2-1-2-设置MaterialApp"><a href="#2-1-2-设置MaterialApp" class="headerlink" title="2.1.2. 设置MaterialApp"></a>2.1.2. 设置MaterialApp</h4><ul><li><p>在localizationsDelegates中指定哪些Widget需要进行国际化</p></li><li><ul><li>用于生产<strong>本地化值</strong>集合的工厂</li><li>我们这里指定了Material、Widgets、Cupertino都使用国际化</li></ul></li><li><p>supportedLocales指定要支持哪些国际化</p></li><li><ul><li>我们这里指定中文和英文（也可以指定国家编码）</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp(</span><br><span class="line">  localizationsDelegates: [</span><br><span class="line">    GlobalMaterialLocalizations.delegate, &#x2F;&#x2F; 指定本地化的字符串和一些其他的值</span><br><span class="line">    GlobalCupertinoLocalizations.delegate, &#x2F;&#x2F; 对应的Cupertino风格</span><br><span class="line">    GlobalWidgetsLocalizations.delegate &#x2F;&#x2F; 指定默认的文本排列方向, 由左到右或由右到左</span><br><span class="line">  ],</span><br><span class="line">  supportedLocales: [</span><br><span class="line">    Locale(&quot;en&quot;),</span><br><span class="line">    Locale(&quot;zh&quot;)</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>注意：如果要指定语言代码、文字代码和国家代码，可以进行如下指定方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Full Chinese support for CN, TW, and HK</span><br><span class="line">supportedLocales: [</span><br><span class="line">  const Locale.fromSubtags(languageCode: &#39;zh&#39;), &#x2F;&#x2F; generic Chinese &#39;zh&#39;</span><br><span class="line">  const Locale.fromSubtags(languageCode: &#39;zh&#39;, scriptCode: &#39;Hans&#39;), &#x2F;&#x2F; generic simplified Chinese &#39;zh_Hans&#39;</span><br><span class="line">  const Locale.fromSubtags(languageCode: &#39;zh&#39;, scriptCode: &#39;Hant&#39;), &#x2F;&#x2F; generic traditional Chinese &#39;zh_Hant&#39;</span><br><span class="line">  const Locale.fromSubtags(languageCode: &#39;zh&#39;, scriptCode: &#39;Hans&#39;, countryCode: &#39;CN&#39;), &#x2F;&#x2F; &#39;zh_Hans_CN&#39;</span><br><span class="line">  const Locale.fromSubtags(languageCode: &#39;zh&#39;, scriptCode: &#39;Hant&#39;, countryCode: &#39;TW&#39;), &#x2F;&#x2F; &#39;zh_Hant_TW&#39;</span><br><span class="line">  const Locale.fromSubtags(languageCode: &#39;zh&#39;, scriptCode: &#39;Hant&#39;, countryCode: &#39;HK&#39;), &#x2F;&#x2F; &#39;zh_Hant_HK&#39;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h4 id="2-1-3-查看Widget结果"><a href="#2-1-3-查看Widget结果" class="headerlink" title="2.1.3. 查看Widget结果"></a>2.1.3. 查看Widget结果</h4><p>设置完成后，我们在Android上将语言切换为中文，查看结果：</p><p>但是对于iOS，将语言切换为中文，依然显示是英文的Widget</p><ul><li>这是因为iOS定义了一些应用的元数据，其中包括支持的语言环境；</li><li>我们必须将其对应的元数据中支持的语言添加进去；</li><li>元数据的设置在iOS项目中对应的info.plist文件中；</li></ul><p>修改iOS的info.plist文件配置：</p><ul><li>选择 <strong>Information Property List</strong> 项；</li><li>从 <em>Editor</em> 菜单中选择 <em>Add Item</em>，然后从弹出菜单中选择<strong>Localizations</strong>；</li><li>为array添加一项选择 <em>Add Item</em>，选择Chinese；</li></ul><h3 id="2-2-其它文本国际化"><a href="#2-2-其它文本国际化" class="headerlink" title="2.2. 其它文本国际化"></a>2.2. 其它文本国际化</h3><p>App中除了有默认的Widget，我们也希望对自己的文本进行国际化，如何做到呢？</p><h4 id="2-2-1-创建本地化类"><a href="#2-2-1-创建本地化类" class="headerlink" title="2.2.1. 创建本地化类"></a>2.2.1. 创建本地化类</h4><p>该类用于定义我们需要进行本地化的字符串等信息：</p><ul><li>1.我们需要一个构造器，并且传入一个Locale对象（后续会使用到）</li><li>2.定义一个Map，其中存放我们不同语言对应的显示文本</li><li>3.定义它们对应的getter方法，根据语言环境返回不同的结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class="line"></span><br><span class="line">class HYLocalizations &#123;</span><br><span class="line">  final Locale locale;</span><br><span class="line"></span><br><span class="line">  HYLocalizations(this.locale);</span><br><span class="line"></span><br><span class="line">  static Map&lt;String, Map&lt;String, String&gt;&gt; _localizedValues &#x3D; &#123;</span><br><span class="line">    &quot;en&quot;: &#123;</span><br><span class="line">      &quot;title&quot;: &quot;home&quot;,</span><br><span class="line">      &quot;greet&quot;: &quot;hello~&quot;,</span><br><span class="line">      &quot;picktime&quot;: &quot;Pick a Time&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;zh&quot;: &#123;</span><br><span class="line">      &quot;title&quot;: &quot;首页&quot;,</span><br><span class="line">      &quot;greet&quot;: &quot;你好~&quot;,</span><br><span class="line">      &quot;picktime&quot;: &quot;选择一个时间&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  String get title &#123;</span><br><span class="line">    return _localizedValues[locale.languageCode][&quot;title&quot;];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  String get greet &#123;</span><br><span class="line">    return _localizedValues[locale.languageCode][&quot;greet&quot;];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  String get pickTime &#123;</span><br><span class="line">    return _localizedValues[locale.languageCode][&quot;picktime&quot;];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-自定义Delegate"><a href="#2-2-2-自定义Delegate" class="headerlink" title="2.2.2. 自定义Delegate"></a>2.2.2. 自定义Delegate</h4><p>上面的类定义好后，我们在什么位置或者说如何对它进行初始化呢？</p><ul><li>答案是我们可以像Flutter Widget中的国际化方式一样对它们进行初始化；</li><li>也就是我们也定义一个对象的Delegate类，并且将其传入localizationsDelegates中；</li><li>Delegate的作用就是当<code>Locale发生改变</code>时，调用对应的<code>load方法</code>，重新加载新的<code>Locale资源</code>；</li></ul><p>HYLocalizationsDelegate需要继承自LocalizationsDelegate，并且有三个方法必须重写：</p><ul><li><p>isSupported：用于当前环境的Locale，是否在我们支持的语言范围</p></li><li><p>shouldReload：当Localizations Widget重新build时，是否调用load方法重新加载Locale资源</p></li><li><ul><li>一般情况下，Locale资源只应该在Locale切换时加载一次，不需要每次Localizations重新build时都加载一遍；</li><li>所以一般情况下返回false即可；</li></ul></li><li><p>load方法：当Locale发生改变时（语言环境），加载对应的HYLocalizations资源</p></li><li><ul><li>这个方法返回的是一个Future，因为有可能是异步加载的；</li><li>但是我们这里是直接定义的一个Map，因此可以直接返回一个同步的Future（SynchronousFuture）</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import &#39;package:flutter&#x2F;cupertino.dart&#39;;</span><br><span class="line">import &#39;package:flutter&#x2F;foundation.dart&#39;;</span><br><span class="line">import &#39;package:i18n_demo&#x2F;i18n&#x2F;localizations.dart&#39;;</span><br><span class="line"></span><br><span class="line">class HYLocalizationsDelegate extends LocalizationsDelegate&lt;HYLocalizations&gt; &#123;</span><br><span class="line">  @override</span><br><span class="line">  bool isSupported(Locale locale) &#123;</span><br><span class="line">    return [&quot;en&quot;, &quot;zh&quot;].contains(locale.languageCode);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  bool shouldReload(LocalizationsDelegate&lt;HYLocalizations&gt; old) &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Future&lt;HYLocalizations&gt; load(Locale locale) &#123;</span><br><span class="line">    return SynchronousFuture(HYLocalizations(locale));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  static HYLocalizationsDelegate delegate &#x3D; HYLocalizationsDelegate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-3-使用本地化类"><a href="#2-2-3-使用本地化类" class="headerlink" title="2.2.3. 使用本地化类"></a>2.2.3. 使用本地化类</h4><p>接着我们可以在代码中使用HYLocalization类。</p><ul><li>我们可以通过Localizations.of(context, HYLocalizations)获取到HYLocalizations对象</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  return Scaffold(</span><br><span class="line">    appBar: AppBar(</span><br><span class="line">      title: Text(Localizations.of(context, HYLocalizations).title),</span><br><span class="line">    ),</span><br><span class="line">    body: Center(</span><br><span class="line">      child: Column(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Text(Localizations.of(context, HYLocalizations).greet),</span><br><span class="line">          RaisedButton(</span><br><span class="line">            child: Text(Localizations.of(context, HYLocalizations).pickTime),</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">              showDatePicker(</span><br><span class="line">                  context: context,</span><br><span class="line">                  initialDate: DateTime.now(),</span><br><span class="line">                  firstDate: DateTime(2019),</span><br><span class="line">                  lastDate: DateTime(2022)</span><br><span class="line">              ).then((pickTime) &#123;</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，我们可以对Localizations.of(context, HYLocalizations)进行一个优化</p><ul><li>给HYLocalizations定义一个of的静态方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class HYLocalizations &#123;</span><br><span class="line">  static HYLocalizations of(BuildContext context) &#123;</span><br><span class="line">    return Localizations.of(context, HYLocalizations);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们就可以通过下面的方式来使用了（其它地方也是一样）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">appBar: AppBar(</span><br><span class="line">  title: Text(HYLocalizations.of(context).title),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="2-2-4-异步加载数据"><a href="#2-2-4-异步加载数据" class="headerlink" title="2.2.4. 异步加载数据"></a>2.2.4. 异步加载数据</h4><p>假如我们的数据是异步加载的，比如来自Json文件或者服务器，应该如何处理呢？</p><p>这里我们可以修改HYLocalizations的数据加载：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">static Map&lt;String, Map&lt;String, String&gt;&gt; _localizedValues &#x3D; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">Future&lt;bool&gt; loadJson() async &#123;</span><br><span class="line">  &#x2F;&#x2F; 1.加载json文件</span><br><span class="line">  String jsonString &#x3D; await rootBundle.loadString(&quot;assets&#x2F;json&#x2F;i18n.json&quot;);</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F; 2.转成map类型</span><br><span class="line">  final Map&lt;String, dynamic&gt; map &#x3D; json.decode(jsonString);</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F; 3.注意：这里是将Map&lt;String, dynamic&gt;转成Map&lt;String, Map&lt;String, String&gt;&gt;类型</span><br><span class="line">  _localizedValues &#x3D; map.map((key, value) &#123;</span><br><span class="line">    return MapEntry(key, value.cast&lt;String, String&gt;());</span><br><span class="line">  &#125;);</span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在HYLocalizationsDelegate中使用异步进行加载：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@override</span><br><span class="line">Future&lt;HYLocalizations&gt; load(Locale locale) async &#123;</span><br><span class="line">  final localization &#x3D; HYLocalizations(locale);</span><br><span class="line">  await localization.loadJson();</span><br><span class="line">  return localization;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-国际化的工具"><a href="#三-国际化的工具" class="headerlink" title="三. 国际化的工具"></a>三. 国际化的工具</h2><h3 id="3-1-认识arb文件"><a href="#3-1-认识arb文件" class="headerlink" title="3.1. 认识arb文件"></a>3.1. 认识arb文件</h3><p>目前我们已经可以通过加载对应的json文件来进行本地化了。</p><p>但是还有另外一个问题，我们在进行国际化的过程中，下面的代码依然需要根据json文件<code>手动编写</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String get title &#123;</span><br><span class="line">  return _localizedValues[locale.languageCode][&quot;title&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String get greet &#123;</span><br><span class="line">  return _localizedValues[locale.languageCode][&quot;greet&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String get pickTime &#123;</span><br><span class="line">  return _localizedValues[locale.languageCode][&quot;picktime&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有没有一种更好的方式，让我们可以快速在本地化文件-dart代码文件直接来转换呢？答案就是arb文件</p><ul><li>arb文件全称<strong>Application Resource Bundle</strong>，表示应用资源包，目前已经得到Google的支持；</li><li>其本质就是一个json文件，但是可以根据该文件转成对应的语言环境；</li><li>arb的说明文档：<a href="https://github.com/google/app-resource-bundle/wiki/ApplicationResourceBundleSpecification" target="_blank" rel="noopener">https://github.com/google/app-resource-bundle/wiki/ApplicationResourceBundleSpecification</a></li></ul><h3 id="3-2-intl-package"><a href="#3-2-intl-package" class="headerlink" title="3.2. intl package"></a>3.2. intl package</h3><p>官方文档推荐可以使用intl package来进行arb和dart文件之间的转换（通过终端指令）</p><ul><li><a href="https://flutter.dev/docs/development/accessibility-and-localization/internationalization#appendix-using-the-dart-intl-tools" target="_blank" rel="noopener">https://flutter.dev/docs/development/accessibility-and-localization/internationalization#appendix-using-the-dart-intl-tools</a></li></ul><p>需要在在pubspec.yaml中添加其相关的依赖，具体步骤这里不再详细给出，可以参考官方文档</p><h3 id="3-3-使用IDE插件"><a href="#3-3-使用IDE插件" class="headerlink" title="3.3. 使用IDE插件"></a>3.3. 使用IDE插件</h3><p>在之前有一个比较好用的Android Studio的插件：Flutter i18n</p><ul><li>但是这个插件已经很久不再维护了，所以不再推荐给大家使用</li></ul><p>目前我们可以使用另外一个插件：Flutter Intl</p><ul><li>该插件更新维护频率很高，并且广受好评；</li><li>另外，在Android Studio和VSCode中都是支持的</li></ul><p>我们这里以Android Studio为例，讲解其使用过程：</p><h4 id="3-3-1-安装插件"><a href="#3-3-1-安装插件" class="headerlink" title="3.3.1. 安装插件"></a>3.3.1. 安装插件</h4><p>在Android Studio的Plugins中安装插件：</p><h4 id="3-3-2-初始化intl"><a href="#3-3-2-初始化intl" class="headerlink" title="3.3.2. 初始化intl"></a>3.3.2. 初始化intl</h4><p>选择工具栏Tools - Flutter Intl - <strong>Initialize for the Project</strong></p><p>1.初始化intl</p><p>2.完成上面的操作之后会自动生成如下文件目录：</p><ul><li>generated是自动生成的dart代码</li><li>I10n是对应的arb文件目录</li></ul><h4 id="3-3-3-使用intl"><a href="#3-3-3-使用intl" class="headerlink" title="3.3.3. 使用intl"></a>3.3.3. 使用intl</h4><p>在localizationsDelegates中配置生成的class，名字是S</p><ul><li>1.添加对应的delegate</li><li>2.supportedLocales使用S.delegate.supportedLocales</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">localizationsDelegates: [</span><br><span class="line">  GlobalMaterialLocalizations.delegate,</span><br><span class="line">  GlobalWidgetsLocalizations.delegate,</span><br><span class="line">  GlobalCupertinoLocalizations.delegate,</span><br><span class="line">  HYLocalizationsDelegate.delegate,</span><br><span class="line">  S.delegate</span><br><span class="line">],</span><br><span class="line">supportedLocales: S.delegate.supportedLocales,</span><br></pre></td></tr></table></figure><p>因为我们目前还没有对应的本地化字符串，所以需要在intl_en.arb文件中编写：</p><ul><li>编写后ctrl（command） + s保存即可</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: &quot;home&quot;,</span><br><span class="line">  &quot;greet&quot;: &quot;hello~&quot;,</span><br><span class="line">  &quot;picktime&quot;: &quot;Pick a time&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在代码中使用即可</p><ul><li>按照如下格式：S.of(context).title</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@override</span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  return Scaffold(</span><br><span class="line">    appBar: AppBar(</span><br><span class="line">      title: Text(S.of(context).title),</span><br><span class="line">    ),</span><br><span class="line">    body: Center(</span><br><span class="line">      child: Column(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Text(S.of(context).greet),</span><br><span class="line">          RaisedButton(</span><br><span class="line">            child: Text(S.of(context).picktime),</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">              showDatePicker(</span><br><span class="line">                  context: context,</span><br><span class="line">                  initialDate: DateTime.now(),</span><br><span class="line">                  firstDate: DateTime(2019),</span><br><span class="line">                  lastDate: DateTime(2022)</span><br><span class="line">              ).then((pickTime) &#123;</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写intl_zh.arb文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: &quot;首页&quot;,</span><br><span class="line">  &quot;greet&quot;: &quot;您好~&quot;,</span><br><span class="line">  &quot;picktime&quot;: &quot;选择一个时间&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-arb其它语法"><a href="#3-4-arb其它语法" class="headerlink" title="3.4. arb其它语法"></a>3.4. arb其它语法</h4><p>如果我们希望在使用本地化的过程中传递一些参数：</p><ul><li>比如hello kobe或hello james</li><li>比如你好啊，李银河 或 你好啊，王小波</li></ul><p>修改对应的arb文件：</p><ul><li>{name}：表示传递的参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: &quot;home&quot;,</span><br><span class="line">  &quot;greet&quot;: &quot;hello~&quot;,</span><br><span class="line">  &quot;picktime&quot;: &quot;Pick a time&quot;,</span><br><span class="line">  &quot;sayHello&quot;: &quot;hello &#123;name&#125;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用时，传入对应的参数即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Text(S.of(context).sayHello(&quot;李银河&quot;)),</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>npm的初步见解</title>
      <link href="/2020/09/03/npm%E7%9A%84%E5%88%9D%E6%AD%A5%E8%A7%81%E8%A7%A3/"/>
      <url>/2020/09/03/npm%E7%9A%84%E5%88%9D%E6%AD%A5%E8%A7%81%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="npm的初步见解"><a href="#npm的初步见解" class="headerlink" title="npm的初步见解"></a>npm的初步见解</h2><h2 id="一-包管理工具"><a href="#一-包管理工具" class="headerlink" title="一. 包管理工具"></a>一. 包管理工具</h2><h3 id="1-1-认识npm"><a href="#1-1-认识npm" class="headerlink" title="1.1. 认识npm"></a>1.1. 认识npm</h3><p>我们已经学习了在JavaScript中可以通过模块化的方式将代码划分成一个个小的结构：</p><ul><li>在以后的开发中我们就可以通过模块化的方式来封装自己的代码，并且封装成一个工具；</li><li>这个工具我们可以让同事通过导入的方式来使用，甚至你可以分享给世界各地的程序员来使用；</li></ul><p><strong>如果我们分享给世界上所有的程序员使用，有哪些方式呢？</strong></p><p>方式一：上传到GitHub上、其他程序员通过GitHub下载我们的代码手动的引用；</p><ul><li>缺点是大家必须知道你的代码GitHub的地址，并且从GitHub上手动下载；</li><li>需要在自己的项目中手动的引用，并且管理相关的依赖；</li><li>不需要使用的时候，需要手动来删除相关的依赖；</li><li>当遇到版本升级或者切换时，需要重复上面的操作；</li></ul><p>显然，上面的方式是有效的，但是这种传统的方式非常麻烦，并且容易出错；</p><p>方式二：使用一个专业的工具来管理我们的代码</p><ul><li>我们通过工具将代码发布到特定的位置；</li><li>其他程序员直接通过工具来安装、升级、删除我们的工具代码；</li></ul><p>显然，通过第二种方式我们可以更好的管理自己的工具包，其他人也可以更好的使用我们的工具包。</p><p>包管理工具npm：</p><ul><li>Node Package Manager，也就是Node包管理器；</li><li>但是目前已经不仅仅是Node包管理器了，在前端项目中我们也在使用它来管理依赖的包；</li><li>比如express、koa、react、react-dom、axios、babel、webpack等等；</li></ul><p>npm管理的包可以在哪里查看、搜索呢？</p><ul><li><a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></li><li>这是我们安装相关的npm包的官网；</li></ul><p>npm管理的包存放在哪里呢？</p><ul><li>我们发布自己的包其实是发布到registry上面的；</li><li>当我们安装一个包时其实是从registry上面下载的包；</li></ul><h3 id="1-2-项目配置文件"><a href="#1-2-项目配置文件" class="headerlink" title="1.2. 项目配置文件"></a>1.2. 项目配置文件</h3><p>事实上，我们每一个项目都会有一个对应的配置文件，无论是前端项目还是后端项目：</p><ul><li>这个配置文件会记录着你项目的名称、版本号、项目描述等；</li><li>也会记录着你项目所依赖的其他库的信息和依赖库的版本号；</li></ul><p>这个配置文件在Node环境下面（无论是前端还是后端）就是package.json。</p><p>我们以vue cli4脚手架创建的项目为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;my-vue&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.1.0&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;serve&quot;: &quot;vue-cli-service serve&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;vue-cli-service build&quot;,</span><br><span class="line">    &quot;lint&quot;: &quot;vue-cli-service lint&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;core-js&quot;: &quot;^3.6.5&quot;,</span><br><span class="line">    &quot;vue&quot;: &quot;^2.6.11&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;@vue&#x2F;cli-plugin-babel&quot;: &quot;~4.5.0&quot;,</span><br><span class="line">    &quot;@vue&#x2F;cli-plugin-eslint&quot;: &quot;~4.5.0&quot;,</span><br><span class="line">    &quot;@vue&#x2F;cli-service&quot;: &quot;~4.5.0&quot;,</span><br><span class="line">    &quot;babel-eslint&quot;: &quot;^10.1.0&quot;,</span><br><span class="line">    &quot;eslint&quot;: &quot;^6.7.2&quot;,</span><br><span class="line">    &quot;eslint-plugin-vue&quot;: &quot;^6.2.2&quot;,</span><br><span class="line">    &quot;vue-template-compiler&quot;: &quot;^2.6.11&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;browserslist&quot;: [</span><br><span class="line">    &quot;&gt; 1%&quot;,</span><br><span class="line">    &quot;last 2 versions&quot;,</span><br><span class="line">    &quot;not dead&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事实上Vue ClI4脚手架创建的项目相对进行了简化，我们来看一下CLI2创建的项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;vuerouterbasic&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;A Vue.js project&quot;,</span><br><span class="line">  &quot;author&quot;: &quot;&#39;coderwhy&#39; &lt;&#39;coderwhy@gmail.com&#39;&gt;&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dev&quot;: &quot;webpack-dev-server --inline --progress --config build&#x2F;webpack.dev.conf.js&quot;,</span><br><span class="line">    &quot;start&quot;: &quot;npm run dev&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;node build&#x2F;build.js&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;vue&quot;: &quot;^2.5.2&quot;,</span><br><span class="line">    &quot;vue-router&quot;: &quot;^3.0.1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;autoprefixer&quot;: &quot;^7.1.2&quot;,</span><br><span class="line">    &quot;babel-core&quot;: &quot;^6.22.1&quot;,</span><br><span class="line">    &quot;babel-helper-vue-jsx-merge-props&quot;: &quot;^2.0.3&quot;,</span><br><span class="line">    &quot;babel-loader&quot;: &quot;^7.1.1&quot;,</span><br><span class="line">    &quot;babel-plugin-syntax-jsx&quot;: &quot;^6.18.0&quot;,</span><br><span class="line">    &quot;babel-plugin-transform-runtime&quot;: &quot;^6.22.0&quot;,</span><br><span class="line">    &quot;babel-plugin-transform-vue-jsx&quot;: &quot;^3.5.0&quot;,</span><br><span class="line">    &quot;babel-preset-env&quot;: &quot;^1.3.2&quot;,</span><br><span class="line">    &quot;babel-preset-stage-2&quot;: &quot;^6.22.0&quot;,</span><br><span class="line">    &quot;chalk&quot;: &quot;^2.0.1&quot;,</span><br><span class="line">    &quot;copy-webpack-plugin&quot;: &quot;^4.0.1&quot;,</span><br><span class="line">    &quot;css-loader&quot;: &quot;^0.28.0&quot;,</span><br><span class="line">    &quot;extract-text-webpack-plugin&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;file-loader&quot;: &quot;^1.1.4&quot;,</span><br><span class="line">    &quot;friendly-errors-webpack-plugin&quot;: &quot;^1.6.1&quot;,</span><br><span class="line">    &quot;html-webpack-plugin&quot;: &quot;^2.30.1&quot;,</span><br><span class="line">    &quot;node-notifier&quot;: &quot;^5.1.2&quot;,</span><br><span class="line">    &quot;optimize-css-assets-webpack-plugin&quot;: &quot;^3.2.0&quot;,</span><br><span class="line">    &quot;ora&quot;: &quot;^1.2.0&quot;,</span><br><span class="line">    &quot;portfinder&quot;: &quot;^1.0.13&quot;,</span><br><span class="line">    &quot;postcss-import&quot;: &quot;^11.0.0&quot;,</span><br><span class="line">    &quot;postcss-loader&quot;: &quot;^2.0.8&quot;,</span><br><span class="line">    &quot;postcss-url&quot;: &quot;^7.2.1&quot;,</span><br><span class="line">    &quot;rimraf&quot;: &quot;^2.6.0&quot;,</span><br><span class="line">    &quot;semver&quot;: &quot;^5.3.0&quot;,</span><br><span class="line">    &quot;shelljs&quot;: &quot;^0.7.6&quot;,</span><br><span class="line">    &quot;uglifyjs-webpack-plugin&quot;: &quot;^1.1.1&quot;,</span><br><span class="line">    &quot;url-loader&quot;: &quot;^0.5.8&quot;,</span><br><span class="line">    &quot;vue-loader&quot;: &quot;^13.3.0&quot;,</span><br><span class="line">    &quot;vue-style-loader&quot;: &quot;^3.0.1&quot;,</span><br><span class="line">    &quot;vue-template-compiler&quot;: &quot;^2.5.2&quot;,</span><br><span class="line">    &quot;webpack&quot;: &quot;^3.6.0&quot;,</span><br><span class="line">    &quot;webpack-bundle-analyzer&quot;: &quot;^2.9.0&quot;,</span><br><span class="line">    &quot;webpack-dev-server&quot;: &quot;^2.9.1&quot;,</span><br><span class="line">    &quot;webpack-merge&quot;: &quot;^4.1.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;engines&quot;: &#123;</span><br><span class="line">    &quot;node&quot;: &quot;&gt;&#x3D; 6.0.0&quot;,</span><br><span class="line">    &quot;npm&quot;: &quot;&gt;&#x3D; 3.0.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;browserslist&quot;: [</span><br><span class="line">    &quot;&gt; 1%&quot;,</span><br><span class="line">    &quot;last 2 versions&quot;,</span><br><span class="line">    &quot;not ie &lt;&#x3D; 8&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们也可以手动创建一个package.json文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init #创建时填写信息</span><br><span class="line">npm init -y # 所有信息使用默认的</span><br></pre></td></tr></table></figure><p><code>npm init -y</code>生成文件的效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;learn-npm&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;main.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们会发现属性非常的多，我们这里对一些常见属性进行一些解析。</p><p><strong>必须填写的属性：name、version</strong></p><ul><li>name是项目的名称；</li><li>version是当前项目的版本号；</li><li>description是描述信息，很多时候是作为项目的基本描述；</li><li>author是作者相关信息（发布时用到）；</li><li>license是开源协议（发布时用到）；</li></ul><p><strong>private属性：</strong></p><ul><li>private属性记录当前的项目是否是私有的；</li><li>当值为true时，npm是不能发布它的，这是防止私有项目或模块发布出去的方式；</li></ul><p><strong>main属性：</strong></p><ul><li><p>设置程序的入口。</p></li><li><p>很多人会有疑惑，webpack不是会自动找到程序的入口吗？</p></li><li><ul><li>这个入口和webpack打包的入口并不冲突；</li><li>它是在你发布一个模块的时候会用到的；</li><li>比如我们使用axios模块 <code>const axios = require(&#39;axios&#39;);</code></li><li>实际上是找到对应的main属性查找文件的；</li></ul></li></ul><p><img src= "/img/loading.gif" data-src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutp13xTTeLSEf3gnNgqpmiblicnvVDK7acaTgJS9KKJccQ1WjnBamLVg2eKmbNu5z41oaoBbThehoicg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img">axios的入口</p><p><strong>scripts属性</strong></p><ul><li><p>scripts属性用于配置一些脚本命令，以键值对的形式存在；</p></li><li><p>配置后我们可以通过 <code>npm run 命令的key</code>来执行这个命令；</p></li><li><p><code>npm start</code>和<code>npm run start</code>的区别是什么？</p></li><li><ul><li>它们是等价的；</li><li>对于常用的 start、 test、stop、restart可以省略掉run直接通过 <code>npm start</code>等方式运行；</li></ul></li></ul><p><strong>dependencies属性</strong></p><ul><li>dependencies属性是指定无论开发环境还是生成环境都需要依赖的包；</li><li>通常是我们项目实际开发用到的一些库模块；</li><li>与之对应的是devDependencies；</li></ul><p><strong>devDependencies属性</strong></p><ul><li>一些包在生成环境是不需要的，比如webpack、babel等；</li><li>这个时候我们会通过 <code>npm install webpack --save-dev</code>，将它安装到devDependencies属性中；</li></ul><p>疑问：那么在生成环境如何保证不安装这些包呢？</p><ul><li>生成环境不需要安装时，我们需要通过 <code>npm install --production</code> 来安装文件的依赖；</li></ul><p><strong>版本管理的问题</strong></p><p>我们会发现安装的依赖版本出现：<code>^2.0.3</code>或<code>~2.0.3</code>，这是什么意思呢？</p><p>npm的包通常需要遵从semver版本规范：</p><ul><li>semver：<a href="https://semver.org/lang/zh-CN/" target="_blank" rel="noopener">https://semver.org/lang/zh-CN/</a></li><li>npm semver：<a href="https://docs.npmjs.com/misc/semver" target="_blank" rel="noopener">https://docs.npmjs.com/misc/semver</a></li></ul><p>semver版本规范是X.Y.Z：</p><ul><li>X主版本号（major）：当你做了不兼容的 API 修改（可能不兼容之前的版本）；</li><li>Y次版本号（minor）：当你做了向下兼容的功能性新增（新功能增加，但是兼容之前的版本）；</li><li>Z修订号（patch）：当你做了向下兼容的问题修正（没有新功能，修复了之前版本的bug）；</li></ul><p>我们这里解释一下 ^和~的区别：</p><ul><li><code>^x.y.z</code>：表示x是保持不变的，y和z永远安装最新的版本；</li><li><code>~x.y.z</code>：表示x和y保持不变的，z永远安装最新的版本；</li></ul><p><strong>engines属性</strong></p><ul><li>engines属性用于指定Node和NPM的版本号；</li><li>在安装的过程中，会先检查对应的引擎版本，如果不符合就会报错；</li><li>事实上也可以指定所在的操作系统 <code>&quot;os&quot; : [ &quot;darwin&quot;, &quot;linux&quot; ]</code>，只是很少用到；</li></ul><p><strong>browserslist属性</strong></p><ul><li>用于配置打包后的JavaScript浏览器的兼容情况，参考；</li><li>否则我们需要手动的添加polyfills来让支持某些语法；</li><li>也就是说它是为webpack等打包工具服务的一个属性（这里不是详细讲解webpack等工具的工作原理，所以不再给出详情）；</li></ul><h2 id="二-npm工具解析"><a href="#二-npm工具解析" class="headerlink" title="二. npm工具解析"></a>二. npm工具解析</h2><h3 id="2-1-npm-install命令"><a href="#2-1-npm-install命令" class="headerlink" title="2.1. npm install命令"></a>2.1. npm install命令</h3><p>安装npm包分两种情况：</p><ul><li>全局安装（global install）：<code>npm install yarn -g</code>;</li><li>项目（局部）安装（local install）：<code>npm install</code></li></ul><p><strong>全局安装</strong></p><p>全局安装是直接将某个包安装到全局：</p><p>比如yarn的全局安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install yarn -g</span><br></pre></td></tr></table></figure><p>但是很多人对全局安装有一些误会：</p><ul><li>通常使用npm全局安装的包都是一些工具包：yarn、webpack等；</li><li>并不是类似于 axios、express、koa等库文件；</li><li>所以全局安装了之后并不能让我们在所有的项目中使用 axios等库；</li></ul><p><strong>项目安装</strong></p><p>项目安装会在当前目录下生产一个 <code>node_modules</code> 文件夹，我们之前讲解require查找顺序时有讲解过这个包在什么情况下被查找；</p><p>局部安装分为开发时依赖和生产时依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 安装开发和生产依赖</span><br><span class="line">npm install axios --save</span><br><span class="line">npm install axios -S</span><br><span class="line">npm install axios</span><br><span class="line">npm i axios</span><br><span class="line"></span><br><span class="line"># 开发者</span><br><span class="line">npm install axios --save-dev</span><br><span class="line">npm install axios -D</span><br><span class="line">npm i axios -D</span><br></pre></td></tr></table></figure><h3 id="2-2-npm-install原理"><a href="#2-2-npm-install原理" class="headerlink" title="2.2. npm install原理"></a>2.2. npm install原理</h3><p>很多同学之情应该已经会了 <code>npm install &lt;package&gt;</code>，但是你是否思考过它的内部原理呢？</p><ul><li>执行 <code>npm install</code>它背后帮助我们完成了什么操作？</li><li>我们会发现还有一个成为package-lock.json的文件，它的作用是什么？</li><li>从npm5开始，npm支持缓存策略（来自yarn的压力），缓存有什么作用呢？</li></ul><p>这是一幅我画出的根据 <code>npm install</code> 的原理图：</p><ul><li><p>npm install会检测是有package-lock.json文件：</p></li><li><ul><li>检测lock中包的版本是否和package.json中一致（会按照semver版本规范检测）；</li><li>一致的情况下，会去优先查找缓存</li><li>查找到，会获取缓存中的压缩文件，并且将压缩文件解压到node_modules文件夹中；</li><li>不一致，那么会重新构建依赖关系，直接会走顶层的流程；</li><li>没有找到，会从registry仓库下载，直接走顶层流程；</li><li>分析依赖关系，这是因为我们可能包会依赖其他的包，并且多个包之间会产生相同依赖的情况；</li><li>从registry仓库中下载压缩包（如果我们设置了镜像，那么会从镜像服务器下载压缩包）；</li><li>获取到压缩包后会对压缩包进行缓存（从npm5开始有的）；</li><li>将压缩包解压到项目的node_modules文件夹中（前面我们讲过，require的查找顺序会在该包下面查找）</li><li>没有lock文件</li><li>有lock文件</li></ul></li></ul><p><img src= "/img/loading.gif" data-src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutp13xTTeLSEf3gnNgqpmiblKOmfSCkaUr8XicHJE3ic92lhsURmXhXuhFuSyXn3l9ApYVQHD8azxJEg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img">npm install原理图</p><p>package-lock.json文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;learn-npm&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;lockfileVersion&quot;: 1,</span><br><span class="line">  &quot;requires&quot;: true,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;axios&quot;: &#123;</span><br><span class="line">      &quot;version&quot;: &quot;0.20.0&quot;,</span><br><span class="line">      &quot;resolved&quot;: &quot;https:&#x2F;&#x2F;registry.npmjs.org&#x2F;axios&#x2F;-&#x2F;axios-0.20.0.tgz&quot;,</span><br><span class="line">      &quot;integrity&quot;: &quot;sha512-ANA4rr2BDcmmAQLOKft2fufrtuvlqR+cXNNinUmvfeSNCOF98PZL+7M&#x2F;v1zIdGo7OLjEA9J2gXJL+j4zGsl0bA&#x3D;&#x3D;&quot;,</span><br><span class="line">      &quot;requires&quot;: &#123;</span><br><span class="line">        &quot;follow-redirects&quot;: &quot;^1.10.0&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;follow-redirects&quot;: &#123;</span><br><span class="line">      &quot;version&quot;: &quot;1.13.0&quot;,</span><br><span class="line">      &quot;resolved&quot;: &quot;https:&#x2F;&#x2F;registry.npmjs.org&#x2F;follow-redirects&#x2F;-&#x2F;follow-redirects-1.13.0.tgz&quot;,</span><br><span class="line">      &quot;integrity&quot;: &quot;sha512-aq6gF1BEKje4a9i9+5jimNFIpq4Q1WiwBToeRK5NvZBd&#x2F;TRsmW8BsJfOEGkr76TbOyPVD3OVDN910EcUNtRYEA&#x3D;&#x3D;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>package-lock.json文件解析：</p><ul><li><p>name：项目的名称；</p></li><li><p>version：项目的版本；</p></li><li><p>lockfileVersion：lock文件的版本；</p></li><li><p>requires：使用requires来跟着模块的依赖关系；</p></li><li><p>dependencies：项目的依赖</p></li><li><ul><li>version表示实际安装的axios的版本；</li><li>resolved用来记录下载的地址，registry仓库中的位置；</li><li>requires记录当前模块的依赖；</li><li>integrity用来从缓存中获取索引，再通过索引去获取压缩包文件；</li><li>当前项目依赖axios，但是axios依赖follow-redireacts；</li><li>axios中的属性如下：</li></ul></li></ul><h3 id="2-3-其他npm命令"><a href="#2-3-其他npm命令" class="headerlink" title="2.3. 其他npm命令"></a>2.3. 其他npm命令</h3><p>我们这里再介绍几个比较常用的：</p><p>卸载某个依赖包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall package</span><br><span class="line">npm uninstall package --save-dev</span><br><span class="line">npm uninstall package -D</span><br></pre></td></tr></table></figure><p>强制重新build</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm rebuild</span><br></pre></td></tr></table></figure><p>清除缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm cache clean</span><br></pre></td></tr></table></figure><p>npm的命令其实是非常多的：</p><ul><li><a href="https://docs.npmjs.com/cli-documentation/cli" target="_blank" rel="noopener">https://docs.npmjs.com/cli-documentation/cli</a></li><li>更多的命令，可以根据需要查阅官方文档</li></ul><h3 id="2-4-yarn和cnpm"><a href="#2-4-yarn和cnpm" class="headerlink" title="2.4. yarn和cnpm"></a>2.4. yarn和cnpm</h3><p>另一个node包管理工具yarn：</p><ul><li>yarn是由Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具；</li><li>yarn 是为了弥补 npm 的一些缺陷而出现的；</li><li>早期的npm存在很多的缺陷，比如安装依赖速度很慢、版本依赖混乱等等一系列的问题；</li><li>虽然从npm5版本开始，进行了很多的升级和改进，但是依然很多人喜欢使用yarn；</li></ul><p>这里给出一张常用命令的对比</p><p><img src= "/img/loading.gif" data-src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutp13xTTeLSEf3gnNgqpmiblsGicPtAm7hxaTCDW7DibOelzF5eLyUibibyxfAwLmczgvtPfRoZ2F2iblFA/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img">npm和yarn常用命令对比</p><p><strong>补充：cnpm</strong></p><p>由于一些特殊的原因，某些情况下我们没办法很好的从 <code>https://registry.npmjs.org</code>下载下来一些需要的包。</p><p>查看npm镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry # npm config get registry</span><br></pre></td></tr></table></figure><p>我们可以直接设置npm的镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>但是对于大多数人来说（比如我），并不希望将npm镜像修改了：</p><ul><li>第一，不太希望随意修改npm原本从官方下来包的渠道；</li><li>第二，担心某天淘宝的镜像挂了或者不维护了，又要改来改去；</li></ul><p>这个时候，我们可以使用cnpm，并且将cnpm设置为淘宝的镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">cnpm config get registry # https:&#x2F;&#x2F;r.npm.taobao.org&#x2F;</span><br></pre></td></tr></table></figure><p><strong>补充：npx</strong></p><p>npx是npm5.2之后自带的一个命令。</p><p>npx的作用非常多，但是比较常见的是使用它来调用项目中的某个模块的指令。</p><p>我们以webpack为例：</p><ul><li>全局安装的是webpack5.1.3</li><li>项目安装的是webpack3.6.0</li></ul><p>如果我在终端执行 <code>webpack --version</code>使用的是哪一个命令呢？</p><ul><li>显示结果会是 <code>webpack 5.1.3</code>，事实上使用的是全局的，为什么呢？</li><li>原因非常简单，在当前目录下找不到webpack时，就会去全局找，并且执行命令；</li></ul><p>那么如何使用项目（局部）的webpack，常见的是两种方式：</p><ul><li>方式一：明确查找到node_module下面的webpack</li><li>方式二：在 <code>scripts</code>定义脚本，来执行webpack；</li></ul><p>方式一：在终端中使用如下命令（在项目根目录下）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;node_modules&#x2F;.bin&#x2F;webpack --version</span><br></pre></td></tr></table></figure><p>方式二：修改package.json中的scripts</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">  &quot;webpack&quot;: &quot;webpack --version&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>终端中执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run webpack</span><br></pre></td></tr></table></figure><p>但是这两种方式都有一点点麻烦，更好的办法是直接使用npx：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack --version</span><br></pre></td></tr></table></figure><p>npx的原理非常简单，它会到当前目录的node_modules/.bin目录下查找对应的命令；</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>深拷贝</title>
      <link href="/2020/07/25/%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
      <url>/2020/07/25/%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>//创建一个对象<br>            var obj1 = {<br>                age:10,<br>                sex:”女”,<br>                car:[“法拉利”,”布加迪威龙”,”玛莎拉蒂”],//数组<br>                dog:{//对象属性<br>                    name:”贝贝”,<br>                    age:8,<br>                    color:”棕色”<br>                }<br>            };<br>            //创建另外一个对象<br>            var obj2 = {};//空对象<br>            /<em>console.log(obj2);</em>/</p><pre><code>//封装一个拷贝逻辑的函数,把对象a中的数据复制到对象b中function extend(a,b){    for(var key in a){//从a对象中复制        //1.获取到a对象中所有的属性的值        var item = a[key];//item是一个数组,封装了普通属性,数组,对象        //2.判断这个属性的值是不是数组-是数组就要遍历        if(item instanceof Array){//过滤是否是数组            //在对象b中开辟一个空间 - 数组            b[key] = [];//空数组            //调用这个函数,把a对象中的数组的属性一个个复制到b对象的数组中            extend(item,b[key]);//item封装的是数组        }else if(item instanceof Object){//如果是对象            //在b对象中创建一个对象 - 空的            b[key] = {};//空对象            //调用这个函数,把a对象中的对象的属性一个个复制到b对象的对象中            extend(item,b[key]);//item封装的是对象        }else{//普通属性            b[key] = item;//这一行是传复制对象与数组里面的值，也是递归的结束        }    }}//调用方法,实现深拷贝extend(obj1,obj2);console.dir(obj2);//原来是空对象console.dir(obj1);</code></pre><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><pre><code>//演示浅拷贝        //对象        var obj1 = {            age:10,            sex:&quot;男&quot;,            car:[&quot;三轮车&quot;,&quot;黄包车&quot;,&quot;摩托车&quot;]        };        //设置一个空对象 - 对象是存在的,但是没有内容        var obj2 = {};        //console.log(obj2);        //封装一个函数,作用是把一个对象中的属性复制给另一个对象 - 浅拷贝        function extend(a,b){//把a对象中所有的属性复制给b对象            //利用for循环处理 - 没有下标 - for-in            for(var key in a){                b[key] = a[key];            }        }        //调用这个函数,实现浅拷贝        extend(obj1,obj2);        console.log(obj2);        console.log(obj1);</code></pre><h2 id="遍历dom树"><a href="#遍历dom树" class="headerlink" title="遍历dom树"></a>遍历dom树</h2><p><strong>html部分</strong></p><pre><code>&lt;h1&gt;遍历DOM树&lt;/h1&gt;    &lt;p style=&quot;color:green;&quot;&gt;Tip:可以在遍历的回调函数中任意的定制需求&lt;/p&gt;    &lt;div&gt;        &lt;ul&gt;            &lt;li&gt;123&lt;/li&gt;            &lt;li&gt;456&lt;/li&gt;            &lt;li&gt;789&lt;/li&gt;        &lt;/ul&gt;        &lt;div&gt;            &lt;div&gt;                &lt;span&gt;哈啊哈哈哈哈哈&lt;/span&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div id=&quot;demo_node&quot;&gt;        &lt;ul&gt;            &lt;li&gt;123&lt;/li&gt;        &lt;/ul&gt;        &lt;p&gt;hello&lt;/p&gt;        &lt;h2&gt;world&lt;/h2&gt;        &lt;div&gt;            &lt;p&gt;asdfg&lt;/p&gt;            &lt;h3&gt;                &lt;span&gt;jfkldsaufoiasdj&lt;/span&gt;            &lt;/h3&gt;        &lt;/div&gt;    &lt;/div&gt;//1.获取页面中的根节点        var root = document.documentElement;//html        //函数遍历DOM        //根据根节点,调用fn函数,显示根节点的名字        function forDOM(root1){//传入一个形参            //获取根节点中给所有的子节点            var children = root1.children;            //遍历所有的子节点            forChildren(children);        }        //封装一个函数:给我所有的子节点,把这个子节点中的所有的子节点显示出来        function forChildren(children){            //遍历所有的子节点            for(var i=0;i&lt;children.length;i++){                //获取到每一个子节点                var child = children[i];                //显示每一个子节点的名字                f1(child);                //判断child下还有没有子节点,如果有,则继续遍历                child.children&amp;&amp;forDOM(child);            }        }        //调用函数,传入根节点        forDOM(root);        //显示节点的名字        function f1(node){            console.log(&quot;节点的名字: &quot; + node.nodeName);        }</code></pre><p>​<br>​            </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>去重算法</title>
      <link href="/2020/07/23/js%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2020/07/23/js%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="1-遍历数组法"><a href="#1-遍历数组法" class="headerlink" title="1.遍历数组法"></a><strong>1.遍历数组法</strong></h3><p>它是最简单的数组去重方法（indexOf方法）</p><p>实现思路：新建一个数组，遍历去要重的数组，当值不在新数组的时候（indexOf为-1）就加入该新数组中；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var arr&#x3D;[2,8,5,0,5,2,6,7,2];</span><br><span class="line">function unique1(arr)&#123;</span><br><span class="line">  var hash&#x3D;[];</span><br><span class="line">  for (var i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">     if(hash.indexOf(arr[i])&#x3D;&#x3D;-1)&#123;</span><br><span class="line">      hash.push(arr[i]);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-数组下标判断法"><a href="#2-数组下标判断法" class="headerlink" title="2.数组下标判断法"></a><strong>2.数组下标判断法</strong></h3><p>调用indexOf方法，性能和方法1差不多</p><p>实现思路：如果当前数组的第 i 项在当前数组中第一次出现的位置不是 i，那么表示第 i 项是重复的，忽略掉。否则存入结果数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function unique2(arr)&#123;</span><br><span class="line">  var hash&#x3D;[];</span><br><span class="line">  for (var i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">     if(arr.indexOf(arr[i])&#x3D;&#x3D;i)&#123;</span><br><span class="line">      hash.push(arr[i]);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-排序后相邻去除法"><a href="#3-排序后相邻去除法" class="headerlink" title="3.排序后相邻去除法"></a><strong>3.排序后相邻去除法</strong></h3><p>实现思路：给传入的数组排序，排序后相同的值会相邻，然后遍历排序后数组时，新数组只加入不与前一值重复的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function unique3(arr)&#123;</span><br><span class="line">  arr.sort();</span><br><span class="line">  var hash&#x3D;[arr[0]];</span><br><span class="line">  for (var i &#x3D; 1; i &lt; arr.length; i++) &#123;</span><br><span class="line">     if(arr[i]!&#x3D;hash[hash.length-1])&#123;</span><br><span class="line">      hash.push(arr[i]);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-优化遍历数组法"><a href="#4-优化遍历数组法" class="headerlink" title="4.优化遍历数组法"></a><strong>4.优化遍历数组法</strong></h3><p>实现思路：双层循环，外循环表示从0到arr.length，内循环表示从i+1到arr.length</p><p>将没重复的右边值放入新数组。（检测到有重复值时终止当前循环同时进入外层循环的下一轮判断）</p><p>quan_lst 里面是一个一个的js字面量对象，根据json里面的属性进行判定去重</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function unique(quan_lst)&#123;    </span><br><span class="line">&#x2F;&#x2F;去掉重复选取的数据</span><br><span class="line">    for (var i &#x3D; 0; i &lt; quan_lst.length; i++) &#123;</span><br><span class="line">        for (var j &#x3D;i+1; j &lt;quan_lst.length; ) &#123;</span><br><span class="line">            if (quan_lst[i].photoid &#x3D;&#x3D; quan_lst[j].photoid ) &#123;&#x2F;&#x2F;通过photoid属性进行匹配；</span><br><span class="line">                quan_lst.splice(j, 1);&#x2F;&#x2F;去除重复的对象；</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-ES6实现"><a href="#5-ES6实现" class="headerlink" title="5.ES6实现"></a><strong>5.ES6实现</strong></h3><p>基本思路：ES6提供了新的数据结构Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><p>Set函数可以接受一个数组（或类似数组的对象）作为参数，用来初始化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function unique5(arr)&#123;</span><br><span class="line">  var x &#x3D; new Set(arr);</span><br><span class="line"> return [...x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 扩展：如果重复，则去掉该元素</p><p>数组下标去重</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function unique22(arr)&#123;</span><br><span class="line">  var hash&#x3D;[];</span><br><span class="line">  for (var i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">     if(arr.indexOf(arr[i])&#x3D;&#x3D;arr.lastIndexOf(arr[i]))&#123;</span><br><span class="line">      hash.push(arr[i]);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充：原先自己一直以为indexOf是针对字符串，原来indexOf也可以查询出数组元素所在的数组中的位置(以0开始计算),</p><h3 id="6-ES6实现（第二种方式）"><a href="#6-ES6实现（第二种方式）" class="headerlink" title="6.ES6实现（第二种方式）"></a><strong>6.ES6实现</strong>（第二种方式）</h3><pre><code>var arr = [1,1,8,8,12,12,15,15,16,16];</code></pre><p>function unique (arr) {<br>  return Array.from(new Set(arr))<br>}</p><p>console.log(unique(arr))<br> //[1,8,12,15,16]</p><h3 id="7-利用includes"><a href="#7-利用includes" class="headerlink" title="7.利用includes"></a><strong>7.利用includes</strong></h3><p>var arr = [1, 1, 8, 8, 12, 12, 15, 15, 16, 16];<br>function unique(arr) {<br>    if (!Array.isArray(arr)) {<br>        console.log(‘type error!’)<br>        return<br>    }<br>    var array =[];<br>    for(var i = 0; i &lt; arr.length; i++) {<br>            if( !array.includes( arr[i]) ) {//includes 检测数组是否有某个值<br>                    array.push(arr[i]);<br>              }<br>    }<br>    return array<br>}<br>console.log(unique(arr))</p><h3 id="8-利用filter"><a href="#8-利用filter" class="headerlink" title="8.利用filter"></a>8.利用filter</h3><p>var arr = [1, 1, 8, 8, 12, 12, 15, 15, 16, 16];<br>function unlink(arr) {<br>    return arr.filter(function (item, index, arr) {<br>        //当前元素，在原始数组中的第一个索引==当前索引值，否则返回当前元素<br>        return arr.indexOf(item, 0) === index;<br>    });<br>}<br>console.log(unlink(arr));</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js三大家族</title>
      <link href="/2020/07/23/js%E7%B3%BB%E5%88%97%E4%B8%89%E5%A4%A7%E5%AE%B6%E6%97%8F/"/>
      <url>/2020/07/23/js%E7%B3%BB%E5%88%97%E4%B8%89%E5%A4%A7%E5%AE%B6%E6%97%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-1-三大家族和一个事件对象"><a href="#1-1-三大家族和一个事件对象" class="headerlink" title="1.1 三大家族和一个事件对象"></a>1.1 三大家族和一个事件对象</h1><p>三大家族（offset/scroll/client）</p><p>事件对象/event  （事件被触动时，鼠标和键盘的状态）（通过属性控制）</p><h1 id="1-2-Offset家族简介"><a href="#1-2-Offset家族简介" class="headerlink" title="1.2 Offset家族简介"></a>1.2 Offset家族简介</h1><p>offset这个单词本身是–偏移，补偿，位移的意思。</p><p>js中有一套方便的获取元素尺寸的办法就是offset家族；</p><p>offsetWidth和offsetHight以及offsetLeft和offsetTop以及offsetParent</p><p>共同组成了offset家族。</p><h3 id="1-2-1-offsetWidth和offsetHight-（检测盒子自身宽高-padding-border）"><a href="#1-2-1-offsetWidth和offsetHight-（检测盒子自身宽高-padding-border）" class="headerlink" title="1.2.1 offsetWidth和offsetHight （检测盒子自身宽高+padding+border）"></a>1.2.1 offsetWidth和offsetHight （检测盒子自身宽高+padding+border）</h3><p>这两个属性，他们绑定在了所有的节点元素上。获取之后，只要调用这两个属性，我们就能够获取元素节点的宽和高。</p><p>offset宽/高 = 盒子自身的宽/高 + padding+border；</p><p>offsetWidth =width+padding+border；</p><p>offsetHeight =Height+padding+border；</p><h3 id="1-2-2-offsetLeft和offsetTop-（检测距离父盒子有定位的左-上面的距离）"><a href="#1-2-2-offsetLeft和offsetTop-（检测距离父盒子有定位的左-上面的距离）" class="headerlink" title="1.2.2 offsetLeft和offsetTop （检测距离父盒子有定位的左/上面的距离）"></a>1.2.2 offsetLeft和offsetTop （检测距离父盒子有定位的左/上面的距离）</h3><p>返回距离上级盒子（带有定位）左边s的位置</p><p>如果父级都没有定位则以body为准</p><p>offsetLeft 从父亲的padding 开始算,父亲的border 不算。</p><p>在父盒子有定位的情况下，offsetLeft == style.left(去掉px)</p><h3 id="1-2-3-offsetParent-（检测父系盒子中带有定位的父盒子节点）"><a href="#1-2-3-offsetParent-（检测父系盒子中带有定位的父盒子节点）" class="headerlink" title="1.2.3 offsetParent  （检测父系盒子中带有定位的父盒子节点）"></a>1.2.3 offsetParent  （检测父系盒子中带有定位的父盒子节点）</h3><p>1、返回改对象的父级 （带有定位）</p><p>​     如果当前元素的父级元素没有进行CSS定位 （position为absolute或       relative，fixed），  offsetParent为body。</p><p>2、如果当前元素的父级元素中有CSS定位    （position为absolute或          relative，fixed），  offsetParent取最近的那个父级元素。</p><h1 id="1-3-offsetLeft和style-left区别"><a href="#1-3-offsetLeft和style-left区别" class="headerlink" title="1.3 offsetLeft和style.left区别"></a>1.3 offsetLeft和style.left区别</h1><p>一、最大区别在于offsetLeft可以返回没有定位盒子的距离左侧的位置。</p><p>而 style.left不可以</p><p>二、offsetTop 返回的是数字，而 style.top 返回的是字符串，除了数字外还带有单位：px。</p><p>三、offsetTop 只读，而 style.top 可读写。（只读是获取值，可写是赋值）</p><p>四、如果没有给 HTML 元素指定过 top 样式，则style.top 返回的是空字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">style.left在&#x3D;的左边和右边还不一样。（左边的时候是属性，右边的时候是值）</span><br></pre></td></tr></table></figure><h1 id="Scroll家族组成"><a href="#Scroll家族组成" class="headerlink" title="Scroll家族组成"></a>Scroll家族组成</h1><p>ScrollWidth和scrollHeight（不包括border）</p><p>检测盒子的宽高。（调用者：节点元素。属性。）</p><p>盒子内容的宽高。（如果有内容超出了，显示内容的高度）</p><p>IE567可以比盒子小。 IE8+火狐谷歌不能比盒子小</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="scrollLeft和scrollTop"><a href="#scrollLeft和scrollTop" class="headerlink" title="scrollLeft和scrollTop"></a>scrollLeft和scrollTop</h2><p>网页，被浏览器遮挡的头部和左边部分。</p><p>被卷去的头部和左边部分。</p><p>兼容性问题</p><p>一、未声明 DTD（谷歌只认识他）</p><p>document.body.scrollTop</p><p>二、已经声明DTD（IE678只认识他）</p><p>  document.documentElement.scrollTop</p><p>三、火狐/谷歌/ie9+以上支持的</p><p>  window.pageYOffset</p><h2 id="兼容写法"><a href="#兼容写法" class="headerlink" title="兼容写法"></a>兼容写法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var aaa &#x3D; window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var aaa &#x3D; document.documentElement.scrollTop + document.body.scrollTop;</span><br></pre></td></tr></table></figure><p>事件event</p><h2 id="1-1-事件对象的获取（event的获取）"><a href="#1-1-事件对象的获取（event的获取）" class="headerlink" title="1.1  事件对象的获取（event的获取）"></a>1.1  事件对象的获取（event的获取）</h2><p>IE678中，window.event</p><p>在火狐谷歌中，event或者，在事件绑定的函数中，加参，这个参数就是event.</p><p> Box.onclick = function (aaa){  aaa就是event   }</p><h2 id="1-2-兼容获取方式有两种："><a href="#1-2-兼容获取方式有两种：" class="headerlink" title="1.2  兼容获取方式有两种："></a>1.2  兼容获取方式有两种：</h2><p>不写参数直接使用event;</p><p>写参数，但是为event….var  event = event || window.event;(主要用这种)</p><h2 id="1-3-event内容重要内容"><a href="#1-3-event内容重要内容" class="headerlink" title="1.3  event内容重要内容"></a>1.3  event内容重要内容</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdn.net/20170330141538969?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1ppb3M=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>PageY/pageX: 鼠标位于整个网页页面的顶部和左侧部分的距离。（页面）</p><p>ScreenY/screenX: 鼠标位于屏幕的上方和左侧的距离。（屏幕）</p><p>ClientX/clientY: 鼠标位于浏览器的左侧和顶部的距离。（浏览器大小和位置）</p><h2 id="1-1-PageY和pageX的兼容写法（很重要）"><a href="#1-1-PageY和pageX的兼容写法（很重要）" class="headerlink" title="1.1  PageY和pageX的兼容写法（很重要）"></a>1.1  PageY和pageX的兼容写法（很重要）</h2><p>在页面位置就等于 = 看得见的+看不见的</p><p>pageY/pageX=event.clientY/clientX+scroll().top/scroll().left</p><h1 id="client家族"><a href="#client家族" class="headerlink" title="client家族"></a>client家族</h1><h2 id="1-1-主要成员"><a href="#1-1-主要成员" class="headerlink" title="1.1 主要成员"></a>1.1 主要成员</h2><p>1、clientWidth  获取网页可视区域宽度（两种用法）</p><p>  clientHeight 获取网页可视区域高度（两种用法）</p><p>   调用者不同，意义不同：</p><p>​           盒子调用：       指盒子本身。</p><p>​           body/html调用：    可视区域大小。 </p><p>2、clientX    鼠标距离可视区域左侧距离（event调用）</p><p>  clientY   鼠标距离可视区域上侧距离（event调用）</p><p>3、clientTop/clientLeft      盒子的border宽高</p><h2 id="1-2-三大家族区别（三大家族总结）"><a href="#1-2-三大家族区别（三大家族总结）" class="headerlink" title="1.2 三大家族区别（三大家族总结）"></a>1.2 三大家族区别（三大家族总结）</h2><h3 id="1-2-1-Width和height"><a href="#1-2-1-Width和height" class="headerlink" title="1.2.1 Width和height"></a>1.2.1 Width和height</h3><p>clientWidth = width + padding</p><p>clientHeight = height + padding</p><p>offsetWidth = width + padding + border</p><p>offsetHeight = height + padding + border</p><p>scrollWidth  = 内容宽度（不包含border）width + padding</p><p>scrollHeight = 内容高度（不包含border）</p><h3 id="1-2-2-top和left"><a href="#1-2-2-top和left" class="headerlink" title="1.2.2 top和left"></a>1.2.2 top和left</h3><p>offsetTop/offsetLeft：</p><p>​     调用者：任意元素。(盒子为主)</p><p>​     作用：距离父系盒子中带有定位的距离。</p><p>scrollTop/scrollLeft:(盒子也可以调用，必须有滚动条)</p><p>​     调用者：document.body.scrollTop/…..(window)</p><p>​     作用：浏览器无法显示的部分（被卷去的部分）。</p><p>clientY/clientX:（clientTop/clientLeft 值的是border）</p><p>​     调用者：event.clientX(event)</p><p>​     作用：鼠标距离浏览器可视区域的距离（左、上）。</p><p>//   width和height<br>//   offset带border<br>//   scroll不带border，内容的宽高<br>//   client不带border</p><p>//   top和left<br>//   offset距离父系盒子带有定位的盒子之间的距离<br>//   scroll被卷去的部分的距离<br>//   clientborder的宽高</p><p>  //clientX和clientY<br>//   event调用，鼠标距离浏览器的可视区域的距离</p><h2 id="1-3-client家族特殊用法之-检浏览器宽-高度-可视区域"><a href="#1-3-client家族特殊用法之-检浏览器宽-高度-可视区域" class="headerlink" title="1.3 client家族特殊用法之:检浏览器宽/高度(可视区域)"></a>1.3 client家族特殊用法之:检浏览器宽/高度(可视区域)</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdn.net/20170331094037076?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1ppb3M=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><h2 id="1-4-Onresize事件"><a href="#1-4-Onresize事件" class="headerlink" title="1.4 Onresize事件"></a>1.4 Onresize事件</h2><p>只要浏览器的大小改变，哪怕1像素，都会触动这个事件。</p><h2 id="1-5-案例：根据浏览器可视区域大小，给定背景色"><a href="#1-5-案例：根据浏览器可视区域大小，给定背景色" class="headerlink" title="1.5 案例：根据浏览器可视区域大小，给定背景色"></a>1.5 案例：根据浏览器可视区域大小，给定背景色</h2><h2 id="1-6-事件总结"><a href="#1-6-事件总结" class="headerlink" title="1.6 事件总结"></a>1.6 事件总结</h2><p>区分：</p><p>  1.window.onscroll     屏幕滑动</p><p>  2.window.onresize      浏览器大小变化</p><p>  3.window.onload     页面加载完毕</p><p>  4.div.onmousemove     鼠标在盒子上移动</p><p>​     （注意：不是盒子移动！！！）</p><p> 5.onmouseup/onmousedown == onclick</p><h2 id="1-7-获得屏幕宽高"><a href="#1-7-获得屏幕宽高" class="headerlink" title="1.7 获得屏幕宽高"></a>1.7 获得屏幕宽高</h2><p>window.screen.width</p><p>分辨率是屏幕图像的精密度，指显示器所能显示的像素有多少。</p><p>   我们的电脑一般：</p><p>横向1280个像素点，</p><p>纵向960个像素点。</p><p>我们看电影的时候是满屏和半屏的，就是这。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>详解React</title>
      <link href="/2020/07/23/react%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/07/23/react%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="1-React简介"><a href="#1-React简介" class="headerlink" title="1. React简介"></a>1. React简介</h1><h2 id="1-1-React介绍"><a href="#1-1-React介绍" class="headerlink" title="1.1 React介绍"></a>1.1 React介绍</h2><ul><li><p>React 是一个用于构建用户界面的 JAVASCRIPT库。React主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）。</p></li><li><p>React 起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架都不满意，就决定自己写一套，用来架设 Instagram（照片交友） 的网站。做出来以后，发现这套东西很好用，<strong>就在2013年5月开源了</strong>。</p></li><li><p>React 拥有较高的性能，代码逻辑非常简单，越来越多的人已开始关注和使用它。由于 React 的<strong>设计思想极其独特</strong>，属于革命性创新，性能出众，代码逻辑却非常简单。所以，越来越多的人开始关注和使用，认为它可能是将来 Web 开发的主流工具。</p></li><li><p>清楚两个概念：</p><ul><li><p>library（库）：小而巧的库，只提供了特定的API；优点就是 船小好掉头，可以很方便的从一个库切换到另外的库；但是代码几乎不会改变；比如从jQuery切换到</p></li><li><p>Framework（框架）：大而全的是框架；框架提供了一整套的解决方案；所以如果在项目中间，想切换到另外的框架，是比较困难的；</p></li></ul></li></ul><h2 id="1-2-前端三大主流框架"><a href="#1-2-前端三大主流框架" class="headerlink" title="1.2 前端三大主流框架"></a>1.2 前端三大主流框架</h2><ul><li>Angular.js：出来<strong>较早</strong>的前端框架，学习曲线比较陡，NG1学起来比较麻烦，NG2 ~ NG5开始，进行了一系列的改革，也提供了组件化开发的概念；从NG2开始，也支持使用TS（TypeScript）进行编程；</li></ul><ul><li><p>Vue.js：<strong>最火</strong>（关注的人比较多）的一门前端框架，它是中国人开发的，对我们来说，文档要友好一些；</p></li><li><p>React.js：<strong>最流行</strong>（用的人比较多）的一门框架，因为它的设计很优秀；</p></li></ul><h2 id="1-3-React与Vue的对比"><a href="#1-3-React与Vue的对比" class="headerlink" title="1.3 React与Vue的对比"></a>1.3 React与Vue的对比</h2><p><strong>1、监听数据变化的实现原理不同</strong></p><ul><li><p>Vue 通过 getter/setter 以及一些函数的劫持，能精确知道数据变化，不需要特别的优化就能达到很好的性能</p></li><li><p>React 默认是通过比较引用地址的方式进行的，如果不优化   </p><p>（PureComponent/shouldComponentUpdate）可能导致大量不必要的VDOM的重新渲染</p></li></ul><p><strong>2、数据流的不同</strong></p><p><img src= "/img/loading.gif" data-src="assets%5C1574133046838.png" alt="img"></p><p>大家都知道Vue中默认是支持双向绑定的。在Vue1.0中我们可以实现两种双向绑定：</p><ol><li>父子组件之间，props 可以双向绑定</li><li>组件与DOM之间可以通过 v-model 双向绑定</li></ol><p>在 Vue2.x 中去掉了第一种，也就是父子组件之间不能双向绑定了（但是提供了一个语法糖自动帮你通过事件的方式修改），并且 Vue2.x 已经不鼓励组件对自己的 props 进行任何修改了。所以现在我们只有 组件 &lt;––&gt; DOM 之间的双向绑定这一种。</p><p>然而 React 从诞生之初就不支持双向绑定，React一直提倡的是单向数据流，他称之为 onChange/setState()模式。</p><p>不过由于我们一般都会用 Vuex 以及 Redux 等单向数据流的状态管理框架，因此很多时候我们感受不到这一点的区别了。</p><p><strong>3、模板渲染方式的不同</strong></p><p>在表层上， 模板的语法不同</p><ul><li>React 是通过JSX渲染模板</li><li>而Vue是通过一种拓展的HTML语法进行渲染</li></ul><p>但其实这只是表面现象，毕竟React并不必须依赖JSX。在深层上，模板的原理不同，这才是他们的本质区别：</p><ul><li>React是在组件JS代码中，通过原生JS实现模板中的常见语法，比如插值，条件，循环等，都是通过JS语法实现的</li><li>Vue是在和组件JS代码分离的单独的模板中，通过指令来实现的，比如条件语句就需要 v-if 来实现</li></ul><p><strong>4、Vuex 和 Redux 的区别</strong></p><p>从表面上来说，store 注入和使用方式有一些区别。</p><p>在 Vuex 中，$store 被直接注入到了组件实例中，因此可以比较灵活的使用：</p><ul><li>使用 dispatch 和 commit 提交更新</li><li>通过 mapState 或者直接通过 this.$store 来读取数据</li></ul><p>在 Redux 中，我们每一个组件都需要显示的用 connect 把需要的 props 和 dispatch 连接起来。</p><p>另外 Vuex 更加灵活一些，组件中既可以 dispatch action 也可以 commit reducer，而 Redux 中只能进行 dispatch，并不能直接调用 reducer 进行修改。</p><p>从实现原理上来说，最大的区别是两点：</p><ul><li>Redux 使用的是不可变数据，而Vuex的数据是可变的。Redux每次都是用新的state替换旧的state，而Vuex是直接修改</li><li>Redux 在检测数据变化的时候，是比较对象的引用地址；而Vuex其实和Vue的原理一样，是通过 getter/setter来比较的（如果看Vuex源码会知道，其实他内部直接创建一个Vue实例用来跟踪数据变化）</li></ul><p><strong>5、总结</strong></p><p>React更偏向于构建稳定大型的应用，非常的科班化。相比之下，Vue更偏向于简单迅速的解决问题，更灵活，不那么严格遵循条条框框。因此也会给人一种大型项目用React，小型项目用 Vue 的感觉。</p><h2 id="1-4-React中几个核心的概念"><a href="#1-4-React中几个核心的概念" class="headerlink" title="1.4 React中几个核心的概念"></a>1.4 React中几个核心的概念</h2><h3 id="1-4-1-虚拟DOM（Virtual-Document-Object-Model）"><a href="#1-4-1-虚拟DOM（Virtual-Document-Object-Model）" class="headerlink" title="1.4.1 虚拟DOM（Virtual Document Object Model）"></a>1.4.1 虚拟DOM（Virtual Document Object Model）</h3><ul><li><strong>DOM的本质是什么</strong>：浏览器中的概念，用JS对象来表示页面上的元素，并提供了操作 DOM 对象的API；</li><li><strong>什么是React中的虚拟DOM</strong>：是框架中的概念，是程序员用JS对象来模拟页面上的 DOM 和 DOM嵌套；</li><li><strong>为什么要实现虚拟DOM（虚拟DOM的目的）：</strong>为了实现页面中DOM 元素的高效更新</li><li><strong>DOM和虚拟DOM的区别</strong>：</li></ul><p><img src= "/img/loading.gif" data-src="images/%E8%99%9A%E6%8B%9FDOM%E7%9A%84%E6%A6%82%E5%BF%B5.png" alt=""></p><p><img src= "/img/loading.gif" data-src="assets%5C1552877849641.png" alt="1552877849641"></p><h3 id="1-4-2-react的Diff算法-Reconciliation"><a href="#1-4-2-react的Diff算法-Reconciliation" class="headerlink" title="1.4.2 react的Diff算法(Reconciliation)"></a>1.4.2 react的Diff算法(Reconciliation)</h3><p><img src= "/img/loading.gif" data-src="assets/Diff.png" alt="Diff算法图"></p><p>其实传统diff算法就是对每个节点一一对比，循环遍历所有的子节点，然后判断子节点的更新状态。通过循环递归对节点进行依次对比，算法时间复杂度达到 O(n^3) ，n是树的节点数，这个有多可怕呢？——如果要展示1000个节点，得执行上亿次比较。即便是CPU快能执行30亿条命令，也<strong>很难在一秒内</strong>计算出差异。</p><p>React 通过制定大胆的策略，将 O(n^3) 复杂度的问题转换成 O(n) 复杂度的问题。react根据自己的特点，实现了部分代码的简化。</p><p><img src= "/img/loading.gif" data-src="assets%5C1552878167661.png" alt="1552878167661"></p><h4 id="a-tree-diff"><a href="#a-tree-diff" class="headerlink" title="a) tree diff"></a>a) tree diff</h4><blockquote><p>（1）React通过updateDepth对Virtual DOM树进行层级控制。<br>（2）对树分层比较，两棵树只对同一层次节点进行比较。如果该节点不存在时，则该节点及其子节点会被完全删除，不会再进一步比较。<br>（3）只需遍历一次就能完成整棵DOM树的比较。</p></blockquote><p><img src= "/img/loading.gif" data-src="assets%5C1562723697592.png" alt="1562723697592"></p><blockquote><p>那么问题来了，如果DOM节点出现了跨层级操作,diff会咋办呢？<br>答：diff只简单考虑同层级的节点位置变换，如果是跨层级的话，只有创建节点和删除节点的操作。</p></blockquote><p><img src= "/img/loading.gif" data-src="assets%5C1562723819718.png" alt="1562723819718"></p><blockquote><p>如上图所示，以A为根节点的整棵树会被<strong>重新创建，而不是移动</strong>，因此 <strong>官方建议不要进行DOM节点跨层级操作，可以通过CSS隐藏、显示节点，而不是真正地移除、添加DOM节点</strong>。</p></blockquote><h4 id="b-component-diff"><a href="#b-component-diff" class="headerlink" title="b) component diff"></a>b) component diff</h4><p>React应用是基于组件构建的，对于组件的比较优化侧重于以下几点：</p><blockquote><ol><li>同一类型组件遵从tree diff比较v-dom树</li><li>不同类型组件，先将该组件归类为dirty component，替换下整个组件下的所有子节点</li><li>同一类型组件Virtual Dom没有变化，React允许开发者使用shouldComponentUpdate()来判断该组件是否进行diff，运用得当可以节省diff计算时间，提升性能</li></ol></blockquote><p><img src= "/img/loading.gif" data-src="assets%5C1562723945651.png" alt="1562723945651"></p><p>如上图，当组件D → 组件G时，diff判断为不同类型的组件，虽然它们的结构相似甚至一样，diff仍然不会比较二者结构，会直接销毁D及其子节点，然后新建一个G相关的子tree，这显然会影响性能，官方虽然认定这种情况极少出现，但是开发中的这种现象造成的影响是非常大的。</p><h4 id="c-element-diff"><a href="#c-element-diff" class="headerlink" title="c) element diff"></a>c) element diff</h4><p>对于同一层级的element节点，diff提供了以下3种节点操作：</p><blockquote><ol><li>INSERT_MARKUP 插入节点</li><li>MOVE_EXISING 移动节点</li><li>REMOVE_NODE 移除节点</li></ol></blockquote><p><img src= "/img/loading.gif" data-src="assets%5C1562724094202.png" alt="1562724094202"></p><p>一般diff在比较集合[A,B,C,D]和[B，A，D，C]的时候会进行全部对比，即按对应位置逐个比较，发现每个位置对应的元素都有所更新，则把旧集合全部移除，替换成新的集合，如上图，但是这样的操作在React中显然是复杂、低效、影响性能的操作，因为新集合中所有的元素都可以进行复用，无需删除重新创建，耗费性能和内存，只需要移动元素位置即可。</p><p>React对这一现象做出了一个高效的策略：允许开发者对同一层级的同组子节点添加唯一key值进行区分。意义就是代码上的一小步，性能上的一大步，甚至是翻天覆地的变化！</p><h1 id="2-Create-React-App脚手架"><a href="#2-Create-React-App脚手架" class="headerlink" title="2. Create React App脚手架"></a>2. Create React App脚手架</h1><p><a href="https://www.html.cn/create-react-app/docs/getting-started/" target="_blank" rel="noopener">https://www.html.cn/create-react-app/docs/getting-started/</a></p><p><code>Create React App</code>是FaceBook的React团队官方出的一个构建<code>React</code>单页面应用的脚手架工具。它本身集成了<code>Webpack</code>，并配置了一系列内置的<code>loader</code>和默认的npm的脚本，可以很轻松的实现零配置就可以快速开发React的应用。</p><h2 id="2-1-创建应用"><a href="#2-1-创建应用" class="headerlink" title="2.1 创建应用"></a>2.1 创建应用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 全局安装</span><br><span class="line">npm install -g create-react-app</span><br><span class="line"># 构建一个my-app的项目</span><br><span class="line">npx create-react-app my-app                     </span><br><span class="line">npx create-react-app my-test-app --template typescript    <span class="comment">//typescript版本</span></span><br><span class="line">cd my-app</span><br><span class="line"></span><br><span class="line"># 启动编译当前的React项目，并自动打开 http://localhost:3000/</span><br><span class="line">yarn start</span><br><span class="line"></span><br><span class="line"># 如果你不能确保最新版本，可以先尝试卸载： npm uninstall -g create-react-app,然后再全局安装</span><br><span class="line"></span><br><span class="line"># 解压默认的webpack配置到配置文件中</span><br><span class="line"># react-scripts 是 create-react-app 的一个核心包，一些脚本和工具的默认配置都集成在里面，而 yarn eject 命令执行后会将封装在 create-react-app 中的配置全部反编译到当前项目，这样用户就能完全取得 webpack 文件的控制权。所以，eject 命令存在的意义就是更改 webpack 配置存在的啊！</span><br><span class="line">yarn run eject</span><br><span class="line">yarn install   <span class="comment">//需要再次运行install命令安装</span></span><br><span class="line">yarn run start <span class="comment">//然后才可以启动</span></span><br></pre></td></tr></table></figure><p>应用的目录结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">├── package.json</span><br><span class="line">├── public                  # 这个是webpack的配置的静态目录</span><br><span class="line">│   ├── favicon.ico</span><br><span class="line">│   ├── index.html          # 默认是单页面应用，这个是最终的html的基础模板</span><br><span class="line">│   └── manifest.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── App.css             # App根组件的css</span><br><span class="line">│   ├── App.tsx              # App组件代码</span><br><span class="line">│   ├── App.test.tsx</span><br><span class="line">│   ├── index.css           # 启动文件样式</span><br><span class="line">│   ├── index.tsx            # 启动的文件（开始执行的入口）！！！！</span><br><span class="line">│   ├── logo.svg</span><br><span class="line">│   └── serviceWorker.js</span><br><span class="line">└── yarn.lock</span><br></pre></td></tr></table></figure><h2 id="2-2-添加图片，字体和文件"><a href="#2-2-添加图片，字体和文件" class="headerlink" title="2.2 添加图片，字体和文件"></a>2.2 添加图片，字体和文件</h2><p>使用 Webpack，添加图片和字体等静态资源的工作方式与 CSS 类似。</p><p>你可以 <strong>直接在 JavaScript 模块中 import 文件</strong>。 这会告诉 Webpack 将该文件包含在 bundle(包) 中。 与 CSS 导入不同，导入文件会为你提供字符串值。 此值是你可以在代码中引用的最终路径，例如 image 的 <code>src</code> 属性或链接到 PDF 的 <code>href</code> 属性。</p><p>要减少对服务器的请求数，导入小于 10,000 字节的图片将返回 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs" target="_blank" rel="noopener">data URI</a> 而不是路径。 这适用于以下文件扩展名：<code>bmp</code> ，<code>gif</code> ，<code>jpg</code> ，<code>jpeg</code> 和 <code>png</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如：</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.png'</span>; <span class="comment">// 告诉 Webpack 这个 JS 文件使用了这个图片</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(logo); <span class="comment">// /logo.84287d09.png</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Header</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 导入结果是图片的 URL </span></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;logo&#125;</span> <span class="attr">alt</span>=<span class="string">"Logo"</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Header;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这也适用于 CSS ：</span></span><br><span class="line">.Logo &#123;</span><br><span class="line">  background-image: url(./logo.png);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字体图标的使用</span></span><br><span class="line"><span class="comment">//yarn add font-awesome</span></span><br><span class="line"><span class="comment">//引入样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'font-awesome/css/font-awesome.css'</span></span><br><span class="line"><span class="comment">//使用样式</span></span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-address-book"</span> aria-hidden=<span class="string">"true"</span>&gt;&lt;<span class="regexp">/i&gt; </span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/具体使用参照官网：http:/</span><span class="regexp">/www.fontawesome.com.cn/</span>faicons/</span><br></pre></td></tr></table></figure><h2 id="2-3-修改默认配置"><a href="#2-3-修改默认配置" class="headerlink" title="2.3 修改默认配置"></a>2.3 修改默认配置</h2><p>要修改 create-react-app 脚手架中的默认配置，正常情况下我们也不会通过yarn reject暴露配置文件然后修改配置文件，我们可以在项目根目录下新建一个config-overrides.js配置文件，覆盖默认的配置</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>yarn add react-app-rewired customize-cra</span><br><span class="line"><span class="number">2.</span>在项目根目录下创建一个config-overrides.js</span><br><span class="line"><span class="number">3.</span>  修改package.json</span><br><span class="line">    <span class="string">"scripts"</span>: &#123;</span><br><span class="line">        - <span class="string">"start"</span>: <span class="string">"react-scripts start"</span>,</span><br><span class="line">        + <span class="string">"start"</span>: <span class="string">"react-app-rewired start"</span>,</span><br><span class="line">        - <span class="string">"build"</span>: <span class="string">"react-scripts build"</span>,</span><br><span class="line">        + <span class="string">"build"</span>: <span class="string">"react-app-rewired build"</span>,</span><br><span class="line">        - <span class="string">"test"</span>: <span class="string">"react-scripts test"</span>,</span><br><span class="line">        + <span class="string">"test"</span>: <span class="string">"react-app-rewired test"</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  修改config-overrides.js文件</span></span><br><span class="line"><span class="comment">//  http://npm.taobao.org/package/customize-cra</span></span><br><span class="line"><span class="comment">//  https://blog.csdn.net/weixin_33850890/article/details/91372527</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="comment">// 配置less和@符号</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">    override,</span><br><span class="line">    addWebpackAlias</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">"customize-cra"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = override(</span><br><span class="line">    addWebpackAlias(&#123;</span><br><span class="line">        [<span class="string">"@"</span>]: path.resolve(__dirname, <span class="string">"src"</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在项目根目录下创建paths.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">        <span class="attr">"baseUrl"</span>: <span class="string">"."</span>,</span><br><span class="line">        <span class="attr">"paths"</span>: &#123;</span><br><span class="line">            <span class="attr">"@/*"</span>: [<span class="string">"src/*"</span>],</span><br><span class="line">            <span class="attr">"@components/*"</span>: [<span class="string">"src/components/*"</span>],</span><br><span class="line">            <span class="attr">"@pages/*"</span>: [<span class="string">"src/pages/*"</span>],</span><br><span class="line">            <span class="attr">"@utils/*"</span>: [<span class="string">"src/utils/*"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改tsconfig.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"extends"</span>: <span class="string">"./paths.json"</span>,</span><br><span class="line">    <span class="attr">"compilerOptions"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-React基本语法"><a href="#2-4-React基本语法" class="headerlink" title="2.4 React基本语法"></a>2.4 React基本语法</h2><h3 id="2-4-1-React的核心包"><a href="#2-4-1-React的核心包" class="headerlink" title="2.4.1 React的核心包"></a>2.4.1 React的核心包</h3><ul><li>react： 专门用于创建组件和虚拟DOM的，同时组件的生命周期都在这个包中</li><li>react-dom： 专门进行DOM操作的，最主要的应用场景，就是<code>ReactDOM.render()</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是 创建虚拟DOM元素的 API    &lt;h1 title="啊，五环" id="myh1"&gt;你比四环多一环&lt;/h1&gt;</span></span><br><span class="line"><span class="comment">//  第一个参数： 字符串类型的参数，表示要创建的标签的名称</span></span><br><span class="line"><span class="comment">//  第二个参数：对象类型的参数， 表示 创建的元素的属性节点</span></span><br><span class="line"><span class="comment">//  第三个参数： 子节点（包括 其它 虚拟DOM 获取 文本子节点）</span></span><br><span class="line"><span class="comment">//  参数n :  其它子节点</span></span><br><span class="line"><span class="keyword">const</span> myh1 = React.createElement(<span class="string">'h1'</span>, &#123; <span class="attr">title</span>: <span class="string">'啊，五环'</span>, <span class="attr">id</span>: <span class="string">'myh1'</span> &#125;, <span class="string">'你比四环多一环'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mydiv = React.createElement(<span class="string">'div'</span>, <span class="literal">null</span>, <span class="string">'这是一个div元素'</span>, myh1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 渲染虚拟DOM元素</span></span><br><span class="line"><span class="comment">// 参数1： 表示要渲染的虚拟DOM对象</span></span><br><span class="line"><span class="comment">// 参数2： 指定容器,注意：这里不能直接放 容器元素的Id字符串，需要放一个容器的DOM对象</span></span><br><span class="line">ReactDOM.render(myh1, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br></pre></td></tr></table></figure><h3 id="2-4-2-JSX语法"><a href="#2-4-2-JSX语法" class="headerlink" title="2.4.2 JSX语法"></a>2.4.2 JSX语法</h3><blockquote><p>什么是JSX语法：就是符合 xml 规范的 JS 语法；（语法格式相对来说，要比HTML严谨很多）</p></blockquote><p>JSX语法的本质：并不是直接把 jsx 渲染到页面上，而是内部通过 createElement 再渲染到页面；</p><p>在 jsx 中混合写入 js 表达式：在 jsx 语法中，要把 JS代码写到    <code>{ }</code> 中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 导入包</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. JSX中使用数值、字符串、bool、数组等信息</span></span><br><span class="line"><span class="keyword">let</span> a:number = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> str:string = <span class="string">'你好，中国'</span></span><br><span class="line"><span class="keyword">let</span> boo:boolean = <span class="literal">false</span></span><br><span class="line"><span class="keyword">let</span> title:string = <span class="string">'999'</span></span><br><span class="line"><span class="keyword">const</span> h1:JSX.Element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>红火火恍恍惚惚<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> arr:JSX.Element[] = [</span><br><span class="line">  &lt;h2&gt;这是h2&lt;<span class="regexp">/h2&gt;,</span></span><br><span class="line"><span class="regexp">  &lt;h3&gt;这是h3&lt;/</span>h3&gt;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> arrStr:string[] = [<span class="string">'毛利兰'</span>, <span class="string">'柯南'</span>, <span class="string">'小五郎'</span>, <span class="string">'灰原哀'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个空数组，将来用来存放 名称 标签【方案1】</span></span><br><span class="line"><span class="keyword">const</span> nameArr:JSX.Element[] = []</span><br><span class="line"><span class="comment">// 注意： React 中，需要把 key 添加给 被 forEach 或 map 或 for 循环直接控制的元素</span></span><br><span class="line">arrStr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> temp = <span class="xml"><span class="tag">&lt;<span class="name">h5</span> <span class="attr">key</span>=<span class="string">&#123;item&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span><br><span class="line">  nameArr.push(temp)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组的 map 方法, map 中必须写 return</span></span><br><span class="line"><span class="keyword">const</span> result:string[] = arrStr.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item + <span class="string">'~~'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 调用 render 函数渲染   JSX  XML 比 HTML 严格多了</span></span><br><span class="line"><span class="comment">// 在JSX要使用JS，则需要把 JS 代码写到 &#123;&#125; 中</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  &#123;a + 2&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  &#123;str&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  &#123;boo ? '条件为真' : '条件为假'&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">&#123;title&#125;</span>&gt;</span>这是p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  &#123;h1&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  &#123;/* &#123;arr&#125; */&#125;</span></span><br><span class="line"><span class="xml">  &#123;</span></span><br><span class="line"><span class="xml">    // 这是注释，你看不见我</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  &#123;nameArr&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line">  &#123;arrStr.map(item =&gt; &lt;div key=&#123;item&#125;&gt;&lt;h3&gt;&#123;item&#125;&lt;/h3&gt;</span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>)&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">"ooo"</span>&gt;</span>11111<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">        </span><br><span class="line">                </span><br><span class="line"> #注意点：</span><br><span class="line"><span class="number">1.</span> 在 JSX 中 写注释：推荐使用&#123; <span class="comment">/* 这是注释 */</span> &#125;</span><br><span class="line"><span class="number">2.</span> 为 JSX 中的htmlFor替换label的<span class="keyword">for</span>属性</span><br><span class="line"><span class="number">3.</span> 在 JSX 创建DOM的时候，所有的节点，必须有唯一的根元素进行包裹；</span><br><span class="line"><span class="number">4.</span> 在 JSX 语法中，标签必须成对出现，如果是单标签，则必须自闭和！</span><br></pre></td></tr></table></figure><blockquote><p>当 编译引擎，在编译JSX代码的时候，如果遇到了<code>&lt;</code>那么就把它当作 HTML代码去编译，如果遇到了 <code>{}</code> 就把 花括号内部的代码当作普通JS代码去编译；</p></blockquote><h1 id="3-React中创建组件"><a href="#3-React中创建组件" class="headerlink" title="3. React中创建组件"></a>3. React中创建组件</h1><h2 id="3-1-使用-class-关键字来创建组件"><a href="#3-1-使用-class-关键字来创建组件" class="headerlink" title="3.1 使用 class 关键字来创建组件"></a>3.1 使用 class 关键字来创建组件</h2><h3 id="3-1-1-最基本的组件结构"><a href="#3-1-1-最基本的组件结构" class="headerlink" title="3.1.1 最基本的组件结构"></a>3.1.1 最基本的组件结构</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//让自己的组件继承React.Compoent，重写render方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 组件名称 <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是 class 创建的组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-2-使用案例"><a href="#3-1-2-使用案例" class="headerlink" title="3.1.2 使用案例"></a>3.1.2 使用案例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新建Movie.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只读 不可以修改</span></span><br><span class="line">type IProps = Readonly&lt;&#123;</span><br><span class="line">  name?: string;</span><br><span class="line">  age?: number;</span><br><span class="line">  gender?: string;</span><br><span class="line">&#125;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123; <span class="attr">msg</span>: <span class="string">'大家好，我是 class 创建的 Movie组件'</span> &#125;;</span><br><span class="line"><span class="comment">//只读 不可以this.state来修改</span></span><br><span class="line">type IState = Readonly&lt;<span class="keyword">typeof</span> initialState&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个类继承React.component   </span></span><br><span class="line"><span class="comment">//&lt;IProps，IState&gt;是泛型，约定组件中的props和state的类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Movie</span> <span class="keyword">extends</span> <span class="title">Component</span>&lt;<span class="title">IProps</span>, <span class="title">IState</span>&gt; </span>&#123;</span><br><span class="line">  readonly state: IState = initialState;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;/* 注意：在 class 组件内部，this 表示 当前组件的实例对象。props数据不可以修改，state数据可以修改 */&#125;</span></span><br><span class="line"><span class="xml">      这是 Movie 组件 -- &#123;this.props.name&#125; -- &#123;this.props.age&#125; -- &#123;this.props.gender&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;this.state.msg&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Movie;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.tsx</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  name: <span class="string">'zs'</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">  gender: <span class="string">'男'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 调用 render 函数渲染</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  123</span></span><br><span class="line"><span class="xml">  &#123;/* 这里的 Movie 标签，其实，就是 Movie 类的一个实例对象 */&#125;</span></span><br><span class="line"><span class="xml">  &#123;/* <span class="tag">&lt;<span class="name">Movie</span> <span class="attr">name</span>=<span class="string">&#123;user.name&#125;</span> <span class="attr">age</span>=<span class="string">&#123;user.age&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Movie</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">Movie</span> &#123;<span class="attr">...user</span>&#125;&gt;</span><span class="tag">&lt;/<span class="name">Movie</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>))</span><br></pre></td></tr></table></figure><h3 id="3-1-3-state的修改"><a href="#3-1-3-state的修改" class="headerlink" title="3.1.3 state的修改"></a>3.1.3 state的修改</h3><h4 id="a-不能直接修改-State"><a href="#a-不能直接修改-State" class="headerlink" title="a) 不能直接修改 State"></a>a) 不能直接修改 State</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我们把state设置为Readonly就是为了不让直接修改state，所以下面写法错误</span></span><br><span class="line"><span class="keyword">this</span>.state.comment = <span class="string">'Hello'</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//可以这样修改State</span></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;<span class="attr">comment</span>: <span class="string">'Hello'</span>&#125;);</span><br></pre></td></tr></table></figure><h4 id="b-State的更新可能是异步的"><a href="#b-State的更新可能是异步的" class="headerlink" title="b) State的更新可能是异步的"></a>b) State的更新可能是异步的</h4><p>因为 <code>this.props</code> 和 <code>this.state</code> 可能会异步更新，所以你不要依赖他们的值来更新下一个状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用setState，组件的state并不会立即改变，setState只是把要修改的状态放入一个队列中，React会优化真正的执行时机，并且React会出于性能原因，可能会将多次setState的状态修改合并成一次状态修改。所以不要依赖当前的State，计算下个State。</span></span><br><span class="line">private btnAdd = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">//Wrong</span></span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;<span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span>&#125;);</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;<span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span>&#125;);</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;<span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span>&#125;);</span><br><span class="line">  <span class="comment">//结果state的count为1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wrong   因为state和props的更新可能是异步的，所以并不能保证counter中所获取到的state和props是最新的</span></span><br><span class="line">private btnAdd = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      counter: <span class="keyword">this</span>.state.counter + <span class="keyword">this</span>.props.increment,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Correct</span></span><br><span class="line"> private btnAdd = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function">(<span class="params">state:IState,props:IProps</span>)=&gt;</span>(&#123;</span><br><span class="line">      count:state.count+<span class="number">1</span></span><br><span class="line">    &#125;))</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function">(<span class="params">state:IState,props:IProps</span>)=&gt;</span>(&#123;</span><br><span class="line">      count:state.count+<span class="number">1</span></span><br><span class="line">    &#125;))</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function">(<span class="params">state:IState,props:IProps</span>)=&gt;</span>(&#123;</span><br><span class="line">      count:state.count+<span class="number">1</span></span><br><span class="line">    &#125;))</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>state的更新既可能是同步的，也可能是异步的。 准确地说，在React内部机制能检测到的地方, setState就是异步的；在React检测不到的地方，例如setInterval、setTimeout里，setState就是同步更新的。</p></blockquote><h4 id="c-获取更新之后的state数据"><a href="#c-获取更新之后的state数据" class="headerlink" title="c) 获取更新之后的state数据"></a>c) 获取更新之后的state数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(</span><br><span class="line">    &#123; <span class="attr">data</span>: newData &#125;,</span><br><span class="line">    () =&gt; &#123;</span><br><span class="line">        <span class="comment">//这里打印的是最新的state值</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.data);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="d-setState合并"><a href="#d-setState合并" class="headerlink" title="d) setState合并"></a>d) setState合并</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//setState会把当前的值合并到原来的state中</span></span><br><span class="line"><span class="comment">//只要调用一次setState就会触发页面的重新渲染，不管这个state在页面有没有使用过，也不管这个state有没有发生变化</span></span><br><span class="line"><span class="comment">//为什么setState会触发页面的重新渲染呢？  因为setState内容会触发batchingUpdate方法来触发组件更新</span></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">    name:<span class="string">"王小虎"</span></span><br><span class="line">&#125;,<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.state)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="e-setState的实现过程"><a href="#e-setState的实现过程" class="headerlink" title="e) setState的实现过程"></a>e) setState的实现过程</h4><p><img src= "/img/loading.gif" data-src="assets/3941614716-5b13d6d716035_articlex.png" alt="3941614716-5b13d6d716035_articlex"></p><h2 id="3-2-使用构造函数来创建组件"><a href="#3-2-使用构造函数来创建组件" class="headerlink" title="3.2 使用构造函数来创建组件"></a>3.2 使用构造函数来创建组件</h2><h3 id="3-2-1-基本使用"><a href="#3-2-1-基本使用" class="headerlink" title="3.2.1 基本使用"></a>3.2.1 基本使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#1. 新建Hello.tsx，并导出组件</span><br><span class="line"><span class="keyword">import</span> React, &#123; MouseEvent, FC &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">  name?: string;</span><br><span class="line">  age?: number;</span><br><span class="line">  gender?: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Hello: FC&lt;Props&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 如果 在一个组件中 return 一个 null。则表示此组件是空的，什么都不会渲染</span></span><br><span class="line">  <span class="comment">// return null</span></span><br><span class="line">  <span class="comment">// 在组件中，必须 返回一个 合法的 JSX 虚拟DOM元素</span></span><br><span class="line">  <span class="comment">// props.name = 'zs'</span></span><br><span class="line">  <span class="built_in">console</span>.log(props)</span><br><span class="line">  <span class="comment">// 结论：不论是 Vue 还是 React，组件中的 props 永远都是只读的；不能被重新赋值；</span></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是 Hello 组件 --- &#123;props.name&#125; --- &#123;props.age&#125; --- &#123;props.gender&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Hello;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#2.导入Hello.jsx</span><br><span class="line">  <span class="comment">// 1. 导入包</span></span><br><span class="line">  <span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line">  <span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line">  <span class="comment">// 注意： 这里的 @ 符号，表示 项目根目录中的 src 这一层目录</span></span><br><span class="line">  <span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">'@/components/Hello.jsx'</span></span><br><span class="line">  <span class="keyword">const</span> dog = &#123;</span><br><span class="line">    name: <span class="string">'大黄'</span>,</span><br><span class="line">    age: <span class="number">3</span>,</span><br><span class="line">    gender: <span class="string">'雄'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    123</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Hello</span> &#123;<span class="attr">...dog</span>&#125;&gt;</span><span class="tag">&lt;/<span class="name">Hello</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br></pre></td></tr></table></figure><h3 id="3-2-2-函数组件中的state"><a href="#3-2-2-函数组件中的state" class="headerlink" title="3.2.2 函数组件中的state"></a>3.2.2 函数组件中的state</h3><blockquote><p>React 16.7.0开始推行Hook，到 React 16.8.0 Hook 稳定，Hooks开始被推广使用，它解决了传统使用生命周期而导致的相关代码逻辑分离(例如创建订阅及取消订阅)、不相关代码逻辑混合在一个生命周期中(使用多个Effect)、class中复杂的this指向、class不能被很好的压缩、class可能导致热重载不稳定</p></blockquote><blockquote><p>Hook为开发者提供了可以使用function创建微state，且一个state由一个对应的函数管理，还提供了专门处理副作用、实现redux、性能优化等功能，并且100%向后兼容，个人认为Hook是react未来发展的趋势，但并不意味着摒弃class，react也没有移除class的计划。</p></blockquote><p><code>useState</code> 就是一个 <em>Hook</em> ，通过在函数组件里调用它来给组件添加一些内部 state。React 会在重复渲染时保留这个 state。</p><p><code>useState</code> 会返回一对值：<strong>当前</strong>状态和一个让你更新它的函数，你可以在事件处理函数中或其他一些地方调用这个函数。它类似 class 组件的 <code>this.setState</code>，但是它不会把新的 state 和旧的 state 进行合并。</p><blockquote><ol><li><p>一般来说，一个函数组件，在函数退出后变量就会”消失”，但是 state 中的变量会被 React 保留。</p></li><li><p>当我们点击按钮，调用setCount函数时，React会重新渲染这个组件，并把更新的count值传给这个组件。(其实是每次 Render 都有自己的 Props 与 State)</p><p><a href="https://segmentfault.com/a/1190000018639033#item-2-5" target="_blank" rel="noopener">https://segmentfault.com/a/1190000018639033#item-2-5</a></p></li><li><p>useState()接受一个参数为默认值，该方法返回一个数组，第一个值为定义data的值，第二个为更新data的方法，他们总是成对出现的</p></li></ol></blockquote><h3 id="3-2-3-state-hook基本使用"><a href="#3-2-3-state-hook基本使用" class="headerlink" title="3.2.3  state hook基本使用"></a>3.2.3  state hook基本使用</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; FC, useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Demo1: FC&lt;Props&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//count代表state的变量</span></span><br><span class="line">  <span class="comment">//setCount是一个function，如果我们要修改count变量，需要通过setCount来修改</span></span><br><span class="line">  <span class="keyword">let</span> [count, setCount] = useState&lt;number&gt;(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">let</span> [count2, setCount2] = useState&lt;number&gt;(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> [count3, setCount3] = useState&lt;number&gt;(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;count&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; setCount(++count) &#125;&#125;&gt;点我修改count<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;count2&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; setCount2(++count2) &#125;&#125;&gt;点我修改count2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;count3&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; setCount3(++count3) &#125;&#125;&gt;点我修改count3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo1;</span><br></pre></td></tr></table></figure><h3 id="3-2-4-useState使用注意点"><a href="#3-2-4-useState使用注意点" class="headerlink" title="3.2.4 useState使用注意点"></a>3.2.4 useState使用注意点</h3><h4 id="a-useState是异步的"><a href="#a-useState是异步的" class="headerlink" title="a) useState是异步的"></a>a) <code>useState</code>是异步的</h4><p>修改state之后无法拿到最新的状态，要等到下一个事件循环周期执行时，状态才是最新的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Demo1: FC&lt;Props&gt; = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [people, setPeople] = useState&lt;&#123; <span class="attr">name</span>: string, <span class="attr">age</span>: number &#125;&gt;(&#123; <span class="attr">name</span>: <span class="string">"张三"</span>, <span class="attr">age</span>: <span class="number">12</span> &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleUpdate = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setPeople(&#123; ...people, <span class="attr">name</span>: <span class="string">'王五'</span> &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(people.name); <span class="comment">// 张三</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;people.name&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleUpdate&#125;</span>&gt;</span> 修改name<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo1;</span><br></pre></td></tr></table></figure><p>但是在state不影响DOM的前提下，你是可以同步使用它</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; FC, useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> Demo1: FC&lt;Props&gt; = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [people, setPeople] = useState&lt;&#123; <span class="attr">name</span>: string, <span class="attr">age</span>: number &#125;&gt;(&#123; <span class="attr">name</span>: <span class="string">"张三"</span>, <span class="attr">age</span>: <span class="number">12</span> &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleUpdate = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setPeople(&#123; ...people, <span class="attr">name</span>: <span class="string">'王五'</span> &#125;);</span><br><span class="line">    people.name = <span class="string">"王五"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(people.name); <span class="comment">// 王五</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;people.name&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleUpdate&#125;</span>&gt;</span> 修改name<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo1;</span><br></pre></td></tr></table></figure><h4 id="b-useState中的数据务必是immutable数据"><a href="#b-useState中的数据务必是immutable数据" class="headerlink" title="b) useState中的数据务必是immutable数据"></a>b) <code>useState</code>中的数据务必是<code>immutable</code>数据</h4><p>若两次传入同一对象则不会触发组件更新，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; FC, useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Demo1: FC&lt;Props&gt; = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [list, setList] = useState&lt;number[]&gt;([<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">9</span>])</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;list.map((item, idx) =&gt; &lt;li key=&#123;String(idx)&#125;&gt;&#123;item&#125;&lt;/li&gt;)&#125;</span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;/* sort 不生成副本，直接返回原数组 */&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; setList(list.sort((a, b) =&gt; a - b)) &#125;&#125;&gt;sort<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;/* slice 返回一个新的副本数组 */&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; setList(list.slice().sort((a, b) =&gt; a - b)) &#125;&#125;&gt;slice<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo1;</span><br></pre></td></tr></table></figure><p>点击sort按钮后并不会出发更新！</p><ul><li><code>useState</code>对应的 setState对state地改变生效，无论DOM是否使用了<code>state</code>，该组件都会重新渲染；</li></ul><h4 id="c-useState-是将新值直接覆盖掉旧值，而不是合并"><a href="#c-useState-是将新值直接覆盖掉旧值，而不是合并" class="headerlink" title="c) useState 是将新值直接覆盖掉旧值，而不是合并"></a>c) useState 是将新值直接覆盖掉旧值，而不是合并</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [temp,setTemp] = useState(&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;);</span><br><span class="line">setTemp(&#123;<span class="attr">a</span>: <span class="number">2</span>&#125;); <span class="comment">// temp = &#123;a: 2&#125;</span></span><br></pre></td></tr></table></figure><h2 id="3-3-两种创建组件方式的对比"><a href="#3-3-两种创建组件方式的对比" class="headerlink" title="3.3 两种创建组件方式的对比"></a>3.3 两种创建组件方式的对比</h2><ol><li>用<strong>构造函数</strong>创建出来的组件：叫做“无状态组件”，只有props，没有自己的私有数据和生命周期函数</li><li>用<strong>class关键字</strong>创建出来的组件：叫做“有状态组件”，有私有数据和生命周期函数</li><li>无状态组件的本质只是一个render函数，其没有实例化的过程，故而也无法访问组件对象</li></ol><blockquote><p>有状态组件和无状态组件之间的<strong>本质区别</strong>就是：有无state属性！无状态组件由于没有私有数据和生命周期函数，运行效率会比有状态组件高一些。</p><p>在react hooks中，允许我们通过useState这个hook给函数组件添加状态</p></blockquote><h2 id="3-4-条件渲染"><a href="#3-4-条件渲染" class="headerlink" title="3.4 条件渲染"></a>3.4 条件渲染</h2><h3 id="3-4-1-通过if来进行条件渲染"><a href="#3-4-1-通过if来进行条件渲染" class="headerlink" title="3.4.1 通过if来进行条件渲染"></a>3.4.1 通过if来进行条件渲染</h3><p><a href="https://blog.csdn.net/crystalqy/article/details/79066347" target="_blank" rel="noopener">https://blog.csdn.net/crystalqy/article/details/79066347</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Gretting.jsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; FC, useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">  isLoggedIn?:boolean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Gretting: FC&lt;Props&gt; = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isLoggedIn = props.isLoggedIn;</span><br><span class="line">  <span class="keyword">if</span> (isLoggedIn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>已登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>未登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Gretting;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//index.tsx</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">Gretting</span> <span class="attr">isLoggedIn</span>=<span class="string">&#123;false&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Gretting</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br></pre></td></tr></table></figure><h3 id="3-4-2-通过三元运算符条件渲染"><a href="#3-4-2-通过三元运算符条件渲染" class="headerlink" title="3.4.2 通过三元运算符条件渲染"></a>3.4.2 通过三元运算符条件渲染</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; FC, useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">  isLoggedIn?:boolean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Gretting: FC&lt;Props&gt; = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isLoggedIn = props.isLoggedIn;</span><br><span class="line">  <span class="keyword">return</span> isLoggedIn?<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>已登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>:<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>未登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Gretting;</span><br></pre></td></tr></table></figure><h3 id="3-4-3-阻止组件渲染"><a href="#3-4-3-阻止组件渲染" class="headerlink" title="3.4.3 阻止组件渲染"></a>3.4.3 阻止组件渲染</h3><p>在极少数情况下，你可能希望能隐藏组件，即使它已经被其他组件渲染。若要完成此操作，你可以让 <code>render</code> 方法直接返回 <code>null</code>，而不进行任何渲染。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; FC, useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">  isLoggedIn?:boolean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Gretting: FC&lt;Props&gt; = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isLoggedIn = props.isLoggedIn;</span><br><span class="line">  <span class="keyword">if</span> (!isLoggedIn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;已登录&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Gretting;</span><br></pre></td></tr></table></figure><h3 id="3-4-4-通过-amp-amp-进行条件渲染"><a href="#3-4-4-通过-amp-amp-进行条件渲染" class="headerlink" title="3.4.4 通过&amp;&amp;进行条件渲染"></a>3.4.4 通过&amp;&amp;进行条件渲染</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Mailbox.tsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; FC, useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">  unreadMessages?: string[]</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//解构赋值  如果没有给unreadMessages指定值的时候，默认用[]</span></span><br><span class="line"><span class="keyword">const</span> Mailbox: FC&lt;Props&gt; = <span class="function">(<span class="params">&#123;unreadMessages=[]&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;Hello!&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &#123;unreadMessages.length &gt; 0 &amp;&amp;</span></span><br><span class="line"><span class="regexp">        &lt;h2&gt;</span></span><br><span class="line"><span class="regexp">          You have &#123;unreadMessages.length&#125; unread messages.</span></span><br><span class="line"><span class="regexp">        &lt;/</span>h2&gt;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Mailbox;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/index.tsx</span></span><br><span class="line"><span class="regexp">const messages = ['React', 'Re: React', 'Re:Re: React'];</span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;Mailbox unreadMessages=&#123;messages&#125;&gt;&lt;/</span>Mailbox&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;, document.getElementById('root'))</span></span><br></pre></td></tr></table></figure><h2 id="3-5-列表渲染"><a href="#3-5-列表渲染" class="headerlink" title="3.5 列表渲染"></a>3.5 列表渲染</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//NumberList.tsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; FC, useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">  numbers?:number[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//key 帮助 React 识别哪些元素改变了，比如被添加或删除。因此你应当给数组中的每一个元素赋予一个确定的标识。</span></span><br><span class="line"><span class="comment">//一个元素的 key 最好是这个元素在列表中拥有的一个独一无二的字符串。通常，我们使用来自数据 id 来作为元素的 key。key在兄弟节点之间必须唯一</span></span><br><span class="line"><span class="comment">//当元素没有确定 id 的时候，万不得已你可以使用元素索引 index 作为 key：</span></span><br><span class="line"><span class="keyword">const</span> NumberList: FC&lt;Props&gt; = <span class="function">(<span class="params">&#123;numbers=[]&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> listItems = numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">    &lt;li key=&#123;number.toString()&#125;&gt;</span><br><span class="line">      &#123;number&#125;</span><br><span class="line">    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;ul&gt;&#123;listItems&#125;&lt;/u</span>l&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> NumberList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//index.tsx</span></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">NumberList</span> <span class="attr">numbers</span>=<span class="string">&#123;numbers&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">NumberList</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br></pre></td></tr></table></figure><h2 id="3-6-Fragment的使用"><a href="#3-6-Fragment的使用" class="headerlink" title="3.6 Fragment的使用"></a>3.6 Fragment的使用</h2><p>有时，语义化的 HTML 会被破坏。比如当在 JSX 中使用 <code>&lt;div&gt;</code> 元素来实现 React 代码功能的时候，又或是在使用列表（<code>&lt;ol&gt;</code>， <code>&lt;ul&gt;</code> 和 <code>&lt;dl&gt;</code>）和 HTML <code>&lt;table&gt;</code> 时。 在这种情况下，我们应该使用 <a href="https://react.docschina.org/docs/fragments.html" target="_blank" rel="noopener">React Fragments</a> 来组合各个组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ListItem.tsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; FC, useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这边把?去掉，表示父组件在使用当前组件的时候item必传</span></span><br><span class="line">type Props = &#123;</span><br><span class="line">  item: &#123; <span class="attr">term</span>: string, <span class="attr">description</span>: string &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ListItem: FC&lt;Props&gt; = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> item = props.item;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;React.Fragment&gt;</span><br><span class="line">      &lt;dt&gt;&#123;item.term&#125;&lt;<span class="regexp">/dt&gt;</span></span><br><span class="line"><span class="regexp">      &lt;dd&gt;&#123;item.description&#125;&lt;/</span>dd&gt;</span><br><span class="line">    &lt;<span class="regexp">/React.Fragment&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default ListItem;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/index.tsx</span></span><br><span class="line"><span class="regexp">const items = [</span></span><br><span class="line"><span class="regexp">  &#123;</span></span><br><span class="line"><span class="regexp">    term: "1",</span></span><br><span class="line"><span class="regexp">    description: "描述1"</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  &#123;</span></span><br><span class="line"><span class="regexp">    term: "2",</span></span><br><span class="line"><span class="regexp">    description: "描述2"</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">];</span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;dl&gt;</span></span><br><span class="line"><span class="regexp">    &#123;</span></span><br><span class="line"><span class="regexp">      items.map((item) =&gt; (</span></span><br><span class="line"><span class="regexp">        &lt;ListItem item=&#123;item&#125; key=&#123;item.term&#125; /</span>&gt;</span><br><span class="line">      ))</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/dl&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br></pre></td></tr></table></figure><h2 id="3-7-React组合"><a href="#3-7-React组合" class="headerlink" title="3.7 React组合"></a>3.7 React组合</h2><p>react组合类似于Vue中的slot(插槽)，子组件的内容由父组件来指定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//FancyBorder.tsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; FC, useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">  color?:string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> FancyBorder: FC&lt;Props&gt; = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div style=&#123;&#123;<span class="attr">color</span>:props.color&#125;&#125;&gt;</span><br><span class="line">      &#123;<span class="comment">/*子组件：占坑*/</span>&#125;</span><br><span class="line">      &#123;props.children&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default FancyBorder;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/index.tsx</span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;FancyBorder color="blue"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;孩儿们&lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/FancyBorder&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br></pre></td></tr></table></figure><p>少数情况下，你可能需要在一个组件中预留出几个“洞”。这种情况下，我们可以不使用 children，而是自行约定：将所需内容传入 props，并使用相应的 prop。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SplitPane.tsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; MouseEvent, FC &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">  left?:JSX.Element,</span><br><span class="line">  right?:JSX.Element</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SplitPane: FC&lt;Props&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"SplitPane"</span>&gt;</span><br><span class="line">      &lt;div className=<span class="string">"SplitPane-left"</span>&gt;</span><br><span class="line">        &#123;props.left&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div className="SplitPane-right"&gt;</span></span><br><span class="line"><span class="regexp">        &#123;props.right&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default SplitPane;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/index.tsx</span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;SplitPane</span></span><br><span class="line"><span class="regexp">    left=&#123;</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;左边&lt;/</span>div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">    right=&#123;</span><br><span class="line">      &lt;div&gt;右边&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &#125; /</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;, document.getElementById('root'))</span></span><br></pre></td></tr></table></figure><h1 id="4-评论列表案例"><a href="#4-评论列表案例" class="headerlink" title="4. 评论列表案例"></a>4. 评论列表案例</h1><h2 id="4-1-启用sass"><a href="#4-1-启用sass" class="headerlink" title="4.1 启用sass"></a>4.1 启用sass</h2><p><a href="mailto:react-scripts@2.0.0">react-scripts@2.0.0</a> 以上版本才适用。</p><p>react-scripts主要设计原理是将配置好的如 <code>Webpack，Babel，ESLint</code> ，合并到 <code>react-scripts</code> 这npm包中，用户就可以开箱即用。很多开发者都在这基础上进行改造开发。注意 <code>react-scripts</code> 就是create-react-app脚手架的核心配置代码。</p><h3 id="4-1-1-安装依赖"><a href="#4-1-1-安装依赖" class="headerlink" title="4.1.1 安装依赖"></a>4.1.1 安装依赖</h3><p>要使用Sass必须首先安装   <code>node-sass</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ npm install node-sass --save</span><br><span class="line">$ # or</span><br><span class="line">$ yarn add node-sass</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;配置node-sass的二进制包</span><br><span class="line">npm config set sass_binary_site https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node-sass&#x2F;</span><br></pre></td></tr></table></figure><p>安装完之后，我们就可以直接在组件中引入scss文件了。</p><h3 id="4-1-2-在sass文件中引入其他sass文件"><a href="#4-1-2-在sass文件中引入其他sass文件" class="headerlink" title="4.1.2 在sass文件中引入其他sass文件"></a>4.1.2 在sass文件中引入其他sass文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">'styles/colors.scss'</span>;   <span class="comment">//这边路径以当前文件路径为参照</span></span><br></pre></td></tr></table></figure><h2 id="4-2-案例完成"><a href="#4-2-案例完成" class="headerlink" title="4.2 案例完成"></a>4.2 案例完成</h2><p>思路：父组件中套了若干个评论Item子组件，所以需要创建两个组件，分别是：CmtList和CmtItem</p><h3 id="4-2-1-CmtList-tsx"><a href="#4-2-1-CmtList-tsx" class="headerlink" title="4.2.1 CmtList.tsx"></a>4.2.1 CmtList.tsx</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; FC, useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> CmtItem <span class="keyword">from</span> <span class="string">"./CmtItem"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"./CmtList.scss"</span>;</span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CmtList: FC&lt;Props&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [commentList, SetCommentList] = useState([</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">user</span>: <span class="string">'张三'</span>, <span class="attr">content</span>: <span class="string">'哈哈，沙发'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">user</span>: <span class="string">'李四'</span>, <span class="attr">content</span>: <span class="string">'哈哈，板凳'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">user</span>: <span class="string">'王五'</span>, <span class="attr">content</span>: <span class="string">'哈哈，凉席'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">user</span>: <span class="string">'赵六'</span>, <span class="attr">content</span>: <span class="string">'哈哈，砖头'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">user</span>: <span class="string">'田七'</span>, <span class="attr">content</span>: <span class="string">'哈哈，楼下山炮'</span> &#125;]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;/* 样式的第一种写法：直接用行内样式 */&#125;</span></span><br><span class="line"><span class="xml">    &#123;/* <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> '<span class="attr">red</span>', <span class="attr">fontSize:</span> '<span class="attr">35px</span>', <span class="attr">zIndex:</span> <span class="attr">3</span>, <span class="attr">fontWeight:</span> <span class="attr">200</span>, <span class="attr">textAlign:</span> '<span class="attr">center</span>' &#125;&#125;&gt;</span>这是评论列表组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> */&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是评论列表组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;commentList.map(item =&gt; <span class="tag">&lt;<span class="name">CmtItem</span> &#123;<span class="attr">...item</span>&#125; <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">CmtItem</span>&gt;</span>)&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> CmtList;</span><br></pre></td></tr></table></figure><h3 id="4-2-2-CmtList-scss"><a href="#4-2-2-CmtList-scss" class="headerlink" title="4.2.2 CmtList.scss"></a>4.2.2 CmtList.scss</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:red;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">35px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>:<span class="number">200</span>;</span><br><span class="line">  <span class="attribute">text-align</span>:center;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-3-CmtItem-tsx"><a href="#4-2-3-CmtItem-tsx" class="headerlink" title="4.2.3 CmtItem.tsx"></a>4.2.3 CmtItem.tsx</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; FC, useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./CmtItem.scss'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">  user?: string,</span><br><span class="line">  content?: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CmtItem: FC&lt;Props&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"item"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">"user"</span>&gt;</span>评论人：&#123;props.user&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">"content"</span>&gt;</span>评论内容：&#123;props.content&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> CmtItem;</span><br></pre></td></tr></table></figure><h3 id="4-2-4-CmtItem-scss"><a href="#4-2-4-CmtItem-scss" class="headerlink" title="4.2.4 CmtItem.scss"></a>4.2.4 CmtItem.scss</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#ccc</span>;</span><br><span class="line">  </span><br><span class="line">  .user&#123;</span><br><span class="line">    <span class="selector-tag">font-size</span>: 14<span class="selector-tag">px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.content</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-5-问题"><a href="#4-2-5-问题" class="headerlink" title="4.2.5 问题"></a>4.2.5 问题</h3><p>当我们在CmtList.css中指定了h1标签的样式的时候，我们发现  <code>import &quot;./CmtList.scss&quot;;&#39;</code> 之后，CmtList和CmtItem中的h1标签都变成了倾斜，说明CmtList中的样式全局生效了。原因在于webpack进行打包的时候会将所有内容打包到一个js文件，所以打包后的样式会全局生效。</p><h2 id="4-3-使用CSS模块化"><a href="#4-3-使用CSS模块化" class="headerlink" title="4.3 使用CSS模块化"></a>4.3 使用CSS模块化</h2><p>在cra脚手架中，如果某个样式文件要开启模块化，只需要把样式文件命名为xx.module.css/xx.module.scss就可以了</p><h3 id="4-3-1-CmtList-module-scss"><a href="#4-3-1-CmtList-module-scss" class="headerlink" title="4.3.1 CmtList.module.scss"></a>4.3.1 CmtList.module.scss</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css 模块化只针对类选择器 和 Id选择器生效， 不会对标签选择器模块化 */</span></span><br><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:red;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">35px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>:<span class="number">200</span>;</span><br><span class="line">  <span class="attribute">text-align</span>:center;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注意： 被 :local() 包裹起来的类名会被模块化； 默认情况下所有的类和id选择器都会被模块化了； */</span></span><br><span class="line"><span class="selector-class">.title</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">800</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注意：被 :global() 包裹起来的类名，不会被模块化，而是会全局生效； */</span> </span><br><span class="line"><span class="selector-pseudo">:global(.test)</span>&#123;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-2-CmtList-tsx"><a href="#4-3-2-CmtList-tsx" class="headerlink" title="4.3.2 CmtList.tsx"></a>4.3.2 CmtList.tsx</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cssObj <span class="keyword">from</span>  <span class="string">'./CmtList.module.scss'</span></span><br><span class="line"><span class="built_in">console</span>.log(cssObj)</span><br><span class="line"></span><br><span class="line"> &lt;h1 className=&#123;cssObj.title&#125;&gt;这是评论列表组件&lt;<span class="regexp">/h1&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-3-总结"><a href="#4-3-3-总结" class="headerlink" title="4.3.3 总结"></a>4.3.3 总结</h3><ol><li>使用 <code>:local()</code> 和 <code>:global()</code><ul><li><code>:local()</code>包裹的类名，是被模块化的类名，只能通过<code>className={cssObj.类名}</code>来使用。<code>:local</code>可以省略</li><li><code>:global()</code>包裹的类名，是全局生效的，不会被 <code>css-modules</code> 控制，定义的类名是什么，就是使用定义的类名<code>className=&quot;类名&quot;</code></li></ul></li><li>注意：只有<code>.title</code>这样的类样式或者id选择器，才会被模块化控制，类似于<code>body</code>这样的标签选择器，不会被模块化控制；</li></ol><h1 id="5-React-事件处理"><a href="#5-React-事件处理" class="headerlink" title="5. React 事件处理"></a>5. React 事件处理</h1><p><a href="https://reactjs.org/docs/events.html" target="_blank" rel="noopener">https://reactjs.org/docs/events.html</a></p><h2 id="5-1-函数组件的事件绑定"><a href="#5-1-函数组件的事件绑定" class="headerlink" title="5.1 函数组件的事件绑定"></a>5.1 函数组件的事件绑定</h2><ol><li><p>事件的名称都是React的提供的，因此名称的首字母必须大写<code>onClick</code>、<code>onMouseOver</code></p></li><li><p>为事件提供的处理函数，必须是如下格式 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123; <span class="function"><span class="keyword">function</span> &#125;&gt;按钮&lt;/<span class="title">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>事件绑定方式：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; FC, useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line">type Props = &#123; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App: FC&lt;Props&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> show = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"show方法"</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> show2 = <span class="function">(<span class="params">msg:string</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"show2方法"</span>, msg)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;show&#125;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; show2("参数") &#125;&#125;&gt;按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure></li></ol><h2 id="5-2-绑定文本框与state中的值"><a href="#5-2-绑定文本框与state中的值" class="headerlink" title="5.2 绑定文本框与state中的值"></a>5.2 绑定文本框与state中的值</h2><ol><li><p>在Vue中提供了<code>v-model</code>指令，可以很方便的实现 <code>数据的双向绑定</code>；</p></li><li><p>但是在React中只是<code>单向数据流</code>，也就是只能把state上的数据绑定到页面，无法把页面中数据的变化自动同步回 state ； 如果需要把页面上数据的变化保存到 state，则需要程序员手动监听<code>onChange</code>事件，拿到最新的数据，手动调用<code>this.setState({  })</code> 更改回去。 这种方式叫受控组件</p></li></ol><h3 id="5-2-1-表单受控组件"><a href="#5-2-1-表单受控组件" class="headerlink" title="5.2.1 表单受控组件"></a>5.2.1 表单受控组件</h3><p>在 HTML 中，表单元素（如<code>&lt;input&gt;</code>、 <code>&lt;textarea&gt;</code> 和 <code>&lt;select&gt;</code>）之类的表单元素通常自己维护 state，并根据用户输入进行更新。而在 React 中，可变状态（mutable state）通常保存在组件的 state 属性中，并且只能通过使用 <a href="https://zh-hans.reactjs.org/docs/react-component.html#setstate" target="_blank" rel="noopener"><code>setState()</code></a>来更新。</p><p>我们可以把两者结合起来，使 React 的 state 成为“唯一数据源”。渲染表单的 React 组件还控制着用户输入过程中表单发生的操作。被 React 以这种方式控制取值的表单输入元素就叫做“受控组件”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; FC, useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App: FC&lt;Props&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = useState&lt;string&gt;(<span class="string">"默认数据"</span>)</span><br><span class="line">  <span class="keyword">const</span> inputChange = <span class="function">(<span class="params">e: React.ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    setValue(e.target.value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;input value=&#123;value&#125; onChange=&#123;inputChange&#125; /&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><h3 id="5-2-2-表单非受控组件"><a href="#5-2-2-表单非受控组件" class="headerlink" title="5.2.2 表单非受控组件"></a>5.2.2 表单非受控组件</h3><p>在大多数情况下，我们推荐使用 <a href="https://zh-hans.reactjs.org/docs/forms.html#controlled-components" target="_blank" rel="noopener">受控组件</a> 来处理表单数据。在一个受控组件中，表单数据是由 React 组件来管理的。另一种替代方案是使用非受控组件，这时表单数据将交由 DOM 节点来处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; FC, useState, useRef &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App: FC&lt;Props&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//引用页面元素</span></span><br><span class="line">  <span class="keyword">const</span> inputRef = useRef&lt;HTMLInputElement&gt;(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> handleSubmit = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(inputRef.current &amp;&amp; inputRef.current.value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input type=<span class="string">"text"</span> ref=&#123;inputRef&#125; /&gt;</span><br><span class="line">      &lt;input type=<span class="string">"button"</span> value=<span class="string">"点我"</span> onClick=&#123;handleSubmit&#125;&gt;&lt;<span class="regexp">/input&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>因为非受控组件将真实数据储存在 DOM 节点中，所以在使用非受控组件时，有时候反而更容易同时集成 React 和非 React 代码。如果你不介意代码美观性，并且希望快速编写代码，使用非受控组件往往可以减少你的代码量。否则，你应该使用受控组件。</p><h3 id="5-2-3-受控组件和非受控组件"><a href="#5-2-3-受控组件和非受控组件" class="headerlink" title="5.2.3 受控组件和非受控组件"></a>5.2.3 受控组件和非受控组件</h3><p>“受控”和“不受控制”的术语通常指的是表单输入，但他们还可以描述任何组件数据的位置。作为props传递进组件的数据可以被认为是<strong>受控的</strong>（因为父组件控制数据）。只存在于内部状态的数据可以被认为是<strong>不受控制的</strong>（因为父类不能直接更改它）。</p><h2 id="5-3-React父子组件的通信"><a href="#5-3-React父子组件的通信" class="headerlink" title="5.3 React父子组件的通信"></a>5.3 React父子组件的通信</h2><h3 id="5-3-1-父组件传递给子组件"><a href="#5-3-1-父组件传递给子组件" class="headerlink" title="5.3.1 父组件传递给子组件"></a>5.3.1 父组件传递给子组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line">&lt;CMTItem key=&#123;i&#125; &#123;...item&#125;&lt;<span class="regexp">/CMTItem&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/子组件通过props可以获取到父组件传递过来的数据</span></span><br></pre></td></tr></table></figure><h3 id="5-3-2-子组件传递给父组件"><a href="#5-3-2-子组件传递给父组件" class="headerlink" title="5.3.2 子组件传递给父组件"></a>5.3.2 子组件传递给父组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line"> &lt;CMTBox reload=&#123;loadCmts&#125;&gt;&lt;<span class="regexp">/CMTBox&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/子组件通过props.reload() 来调用父组件的方法，调用的时候可以传递参数</span></span><br></pre></td></tr></table></figure><h3 id="5-3-3-评论列表发表评论"><a href="#5-3-3-评论列表发表评论" class="headerlink" title="5.3.3 评论列表发表评论"></a>5.3.3 评论列表发表评论</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">#1.CmtList.jsx</span><br><span class="line"><span class="keyword">import</span> React, &#123; FC, useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> CmtItem <span class="keyword">from</span> <span class="string">"./CmtItem"</span>;</span><br><span class="line"><span class="keyword">import</span> CmtBox <span class="keyword">from</span> <span class="string">"./CmtBox"</span>;</span><br><span class="line"><span class="comment">// import "./CmtList.scss";</span></span><br><span class="line"><span class="keyword">import</span> cssObj <span class="keyword">from</span> <span class="string">'./CmtList.module.scss'</span></span><br><span class="line"><span class="built_in">console</span>.log(cssObj)</span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CmtList: FC&lt;Props&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [commentList, SetCommentList] = useState([</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">user</span>: <span class="string">'张三'</span>, <span class="attr">content</span>: <span class="string">'哈哈，沙发'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">user</span>: <span class="string">'李四'</span>, <span class="attr">content</span>: <span class="string">'哈哈，板凳'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">user</span>: <span class="string">'王五'</span>, <span class="attr">content</span>: <span class="string">'哈哈，凉席'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">user</span>: <span class="string">'赵六'</span>, <span class="attr">content</span>: <span class="string">'哈哈，砖头'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">user</span>: <span class="string">'田七'</span>, <span class="attr">content</span>: <span class="string">'哈哈，楼下山炮'</span> &#125;]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> reload = <span class="function">(<span class="params">obj:&#123;id:number,user:string,content:string&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    SetCommentList([...commentList, obj])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;/* 样式的第一种写法：直接用行内样式 */&#125;</span></span><br><span class="line"><span class="xml">    &#123;/* <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> '<span class="attr">red</span>', <span class="attr">fontSize:</span> '<span class="attr">35px</span>', <span class="attr">zIndex:</span> <span class="attr">3</span>, <span class="attr">fontWeight:</span> <span class="attr">200</span>, <span class="attr">textAlign:</span> '<span class="attr">center</span>' &#125;&#125;&gt;</span>这是评论列表组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> */&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是评论列表组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;commentList.map(item =&gt; <span class="tag">&lt;<span class="name">CmtItem</span> &#123;<span class="attr">...item</span>&#125; <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">CmtItem</span>&gt;</span>)&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">CmtBox</span> <span class="attr">reload</span>=<span class="string">&#123;reload&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">CmtBox</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> CmtList;</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">#2.CmtItem.jsx</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./CmtItem.scss'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">CmtItem</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"item"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">"user"</span>&gt;</span>评论人：&#123;props.user&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">"content"</span>&gt;</span>评论内容：&#123;props.content&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#3.CmtBox.jsx</span><br><span class="line"><span class="keyword">import</span> React, &#123; FC, useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./CmtItem.scss'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">  reload?(obj: <span class="built_in">Object</span>): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CmtBox: FC&lt;Props&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [user, setUser] = useState&lt;string&gt;(<span class="string">""</span>);</span><br><span class="line">  <span class="keyword">const</span> [content, setContent] = useState&lt;string&gt;(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//操作的是哪个文本框就去修改哪个文本框的数据</span></span><br><span class="line">  <span class="keyword">const</span> changeHandler = <span class="function">(<span class="params">e: React.ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> tag = e.currentTarget.id;</span><br><span class="line">    <span class="keyword">if</span> (tag == <span class="string">"user"</span>) &#123;</span><br><span class="line">      setUser(e.currentTarget.value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      setContent(e.currentTarget.value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> postComment = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (user &amp;&amp; content) &#123;</span><br><span class="line">      props.reload &amp;&amp; props.reload(&#123;</span><br><span class="line">        user,</span><br><span class="line">        content,</span><br><span class="line">        id: <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">1000</span> + <span class="string">''</span>) + <span class="number">100</span></span><br><span class="line">      &#125;)</span><br><span class="line">      setUser(<span class="string">""</span>);</span><br><span class="line">      setContent(<span class="string">""</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">"user"</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">&#123;user&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;changeHandler&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">"content"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"content"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">&#123;content&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;changeHandler&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"发表评论"</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> postComment()&#125; /&gt;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> CmtBox;</span><br></pre></td></tr></table></figure><h2 id="5-4-Ref-Hook"><a href="#5-4-Ref-Hook" class="headerlink" title="5.4 Ref Hook"></a>5.4 Ref Hook</h2><blockquote><p>“ref”对象是一个通用容器，其current属性是可变的。返回的 ref 对象在组件的整个生命周期内保持不变。</p></blockquote><h3 id="5-4-1-保存dom"><a href="#5-4-1-保存dom" class="headerlink" title="5.4.1 保存dom"></a>5.4.1 保存dom</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; FC, useRef, useEffect , RefObject &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Test: FC&lt;Props&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> t:RefObject&lt;HTMLDivElement&gt; = useRef&lt;HTMLDivElement&gt;(<span class="literal">null</span>);</span><br><span class="line">  <span class="comment">//相当于componentDidMount 、componentDidUpdate</span></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(t.current); <span class="comment">// div</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div ref=&#123;t&#125;&gt; ... &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Test;</span></span><br></pre></td></tr></table></figure><h3 id="5-4-2-forwardRef"><a href="#5-4-2-forwardRef" class="headerlink" title="5.4.2 forwardRef"></a>5.4.2 forwardRef</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// father</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; FC, useRef, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Son <span class="keyword">from</span> <span class="string">'./Son'</span>;</span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Father: FC&lt;Props&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> refContainer = useRef&lt;HTMLInputElement&gt;(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> changeInput = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      refContainer.current&amp;&amp;(refContainer.current.value=<span class="string">'啊，我被改了!'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> &gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeInput&#125;</span>&gt;</span>changeInput<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Son</span> <span class="attr">ref</span>=<span class="string">&#123;refContainer&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Father;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Son</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; forwardRef &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Son = React.forwardRef&lt;HTMLInputElement&gt;<span class="function">(<span class="params">(props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Son;</span><br></pre></td></tr></table></figure><h3 id="5-4-3-useImperativeHandle"><a href="#5-4-3-useImperativeHandle" class="headerlink" title="5.4.3 useImperativeHandle"></a>5.4.3 useImperativeHandle</h3><blockquote><p><code>useImperativeHandle</code> 可以让你在使用 <code>ref</code> 时给父组件暴露的指定的值。在大多数情况下，应当避免使用 ref 这样的命令式代码。<code>useImperativeHandle</code> 应当与 <code>forwardRef</code> 一起使用</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//father</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; FC, useRef, useEffect, RefObject &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Son <span class="keyword">from</span> <span class="string">'./Son'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; InputRefProps &#125; <span class="keyword">from</span> <span class="string">"./type"</span>;</span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Father: FC&lt;Props&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> refContainer = useRef&lt;InputRefProps&gt;(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> changeInput = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    refContainer.current &amp;&amp; refContainer.current.focus()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> talk = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    refContainer.current &amp;&amp; refContainer.current.talk()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> &gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeInput&#125;</span>&gt;</span>changeInput<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;talk&#125;</span>&gt;</span>talk<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Son</span> <span class="attr">ref</span>=<span class="string">&#123;refContainer&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Father;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Son</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; forwardRef,useRef,useImperativeHandle &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; InputRefProps &#125; <span class="keyword">from</span> <span class="string">"./type"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Son = React.forwardRef&lt;InputRefProps&gt;<span class="function">(<span class="params">(props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//新建一个ref  将此ref绑定在本组建内的input上</span></span><br><span class="line">  <span class="keyword">const</span> inputRef = useRef&lt;HTMLInputElement&gt;(<span class="literal">null</span>);</span><br><span class="line">  <span class="comment">//将 使得本组件input获取焦点的方法赋给父组件传递来的ref上 </span></span><br><span class="line">  useImperativeHandle(ref, () =&gt; (&#123;</span><br><span class="line">      focus: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        inputRef.current &amp;&amp; inputRef.current.focus();</span><br><span class="line">      &#125;,</span><br><span class="line">      talk: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'hello, world!'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;));</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Son;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//type.d.ts</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> InputRefProps &#123;</span><br><span class="line">  focus(): <span class="built_in">void</span>;</span><br><span class="line">  talk():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-4-保存事件-变量"><a href="#5-4-4-保存事件-变量" class="headerlink" title="5.4.4 保存事件/变量"></a>5.4.4 保存事件/变量</h3><p>在函数组件中，因为每次re-render就意味着函数重新执行一次，因此在函数内部保持变量引用是一件我们需要思考的事情(如果普通变量，每次re-render都会被重新初始化)。</p><p>在前面学习useState时我们知道，使用useState定义变量，可以做到这样的事情。同样的，利用ref的.current也可以。</p><p>一个很常见的应用场景就是对于定时器的清除。我们需要确保setInterval的执行结果timer的引用，才能准确的清除对应的定时器。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; FC, useRef, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Timer:FC&lt;<span class="built_in">Object</span>&gt; = <span class="function">(<span class="params">props</span>)=&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> timerRef = useRef&lt;NodeJS.Timeout&gt;();</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      timerRef.current = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'do something'</span>);</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 组件卸载时，清除定时器</span></span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          timerRef.current &amp;&amp; clearInterval(timerRef.current);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="5-4-5-useState和useRef的区别"><a href="#5-4-5-useState和useRef的区别" class="headerlink" title="5.4.5 useState和useRef的区别"></a>5.4.5 useState和useRef的区别</h3><ul><li>每次 Render 的内容都会形成一个快照并保留下来，因此当状态变更而 re-render 时，就形成了 N 个 Render 状态，而每个 Render 状态都拥有自己固定不变的 Props 与 State。(每次Render都有自己的Props、State、事件处理、effect，这就是<strong>Capture Value</strong> 特性)</li><li>利用 <code>useRef</code> 就可以绕过 Capture Value 的特性。<strong>可以认为 ref 在所有 Render 过程中保持着唯一引用，因此所有对 ref 的赋值或取值，拿到的都只有一个最终状态</strong></li><li>也可以简洁的认为，<code>ref</code> 是 Mutable 的，而 <code>state</code> 是 Immutable 的。</li></ul><h1 id="6-类组件的生命周期"><a href="#6-类组件的生命周期" class="headerlink" title="6. 类组件的生命周期"></a>6. 类组件的生命周期</h1><h2 id="6-1-生命周期钩子函数介绍"><a href="#6-1-生命周期钩子函数介绍" class="headerlink" title="6.1 生命周期钩子函数介绍"></a>6.1 生命周期钩子函数介绍</h2><ul><li><p>生命周期的概念：每个组件的实例，从创建、运行、到销毁，在这个过程中会出发一些列事件，这些事件就叫做组件的生命周期函数；</p></li><li><p>React组件生命周期(React 16.4+)分为三部分：</p><ul><li><strong>组件创建阶段</strong>：</li></ul><blockquote><p>static 开头的     只会执行一次</p><p>constructor    构造器     只会执行一次</p><p>getDerivedStateFromProps: 每次re-rendering之前被调用，作用：将传递的props映射到state里面       会执行多次</p><p>render           构建虚拟dom，但是此时虚拟dom还没有渲染到页面        会执行多次</p><p>componentDidMount:组建的虚拟dom已经挂载到页面                      只会执行一次</p></blockquote><ul><li><strong>组件运行阶段</strong>：根据 props 属性 或 state 状态的改变，有选择性的执行0到多次</li></ul><blockquote><p>getDerivedStateFromProps:每次re-rendering之前被调用</p><p>shouldComponentUpdate:组件是否需要被更新，返回值是true或者false。此时可以获取最新的props和state数据</p><p>render: 重新更新渲染组件的虚拟dom</p><p>getSnapshotBeforeUpdate：在最近一次渲染提交到 DOM 节点之前调用。它的含义是在React更新Dom元素之前，获取一个快照，它返回的结果将作为componentDidUpdate的第三个参数。一般的用法就是获取更新前的DOM。</p><p>componentDidUpdate: 组件完成了更新，此时页面已经是最新的了</p></blockquote><ul><li><strong>组件卸载阶段</strong>：只执行一次</li></ul><blockquote><p>componentWillUnmount: 当组件从 DOM 中移除时会调用如下方法，此时组件还可以被使用</p><p><img src= "/img/loading.gif" data-src="assets/1574654437154.png" alt="1574654437154"></p></blockquote></li></ul><p>React生命周期的回调函数总结成表格如下：<br><img src= "/img/loading.gif" data-src="assets/1574666830021.png" alt="1574666830021"></p><h2 id="6-2-生命周期函数详解"><a href="#6-2-生命周期函数详解" class="headerlink" title="6.2 生命周期函数详解"></a>6.2 生命周期函数详解</h2><blockquote><p>在组件创建之前，会先初始化默认的props属性，这是全局调用一次，严格地来说，这不是组件的生命周期的一部分。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line">#1.Counter.jsx</span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line">type IProps = Readonly&lt;&#123;</span><br><span class="line">  initCount: number;</span><br><span class="line">&#125;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123; <span class="attr">msg</span>: <span class="string">'张三'</span> &#125;;</span><br><span class="line">type IState = Readonly&lt;<span class="keyword">typeof</span> initialState&gt;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span>&lt;<span class="title">IProps</span>, <span class="title">IState</span>&gt; </span>&#123;</span><br><span class="line">  readonly state: IState = initialState;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//-------------------------------组件创建阶段----------------------------------------</span></span><br><span class="line">  <span class="comment">//1.在组件的创建阶段：第一个执行的是static开头的属性</span></span><br><span class="line">  <span class="comment">//设定props的默认值：当父组件没有给子组件传递props的时候就会使用这个默认值</span></span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    initCount: <span class="number">100</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.在组件创建阶段，第二个执行的是构造函数 (创建一个组件对象执行一次)</span></span><br><span class="line">  <span class="comment">//构造函数的作用：主要就是用来创建组件对象</span></span><br><span class="line">  <span class="comment">//我们可以在构造函数中声明当前组件的state</span></span><br><span class="line">  <span class="keyword">constructor</span>(props: IProps) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数中只可以给state赋予初始值</span></span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      msg: <span class="string">"李四"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数中能够通过setState()来修改state的值</span></span><br><span class="line">    <span class="comment">// this.setState(&#123;</span></span><br><span class="line">    <span class="comment">//     msg:"李四"</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//3.在组件的创建阶段，第三个执行的是getDerivedStateFromProps</span></span><br><span class="line">  <span class="comment">//这个方法的作用：就是将props映射到state中</span></span><br><span class="line">  <span class="comment">//在每一次re-render的时候执行</span></span><br><span class="line">  <span class="keyword">static</span> getDerivedStateFromProps(nextProps: IProps, <span class="attr">prevState</span>: IState) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"getDerivedStateFromProps"</span>, nextProps, prevState)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//4.在组件的创建阶段，第四个执行的是render()方法。(在一个组件的各种生命周期阶段中，至少执行一次)</span></span><br><span class="line">  <span class="comment">//render()方法的主要作用：在内存中构建虚拟dom(此时虚拟dom还没有被挂载到页面)</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;</span></span><br><span class="line"><span class="xml">        // 在render()函数中不能通过setState()来修改state状态，因为这样会陷入死循环</span></span><br><span class="line"><span class="xml">        // 其实render()函数应该是一个纯函数，这个函数的作用本身就是给他什么数据，他就显示什么数据</span></span><br><span class="line"></span><br><span class="line"><span class="xml">        // this.setState(&#123;</span></span><br><span class="line"><span class="xml">        //     msg:"王五"</span></span><br><span class="line"><span class="xml">        // &#125;)</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;this.props.initCount&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;this.state.msg&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//5.在组件的创建阶段，第五个执行的是componentDidMount。(创建一个组件对象执行一次)</span></span><br><span class="line">  <span class="comment">//componentDidMount执行的时候就表示内存中的虚拟dom已经挂载到页面了，此时页面是最新的</span></span><br><span class="line">  <span class="comment">//只有componentDidMount()钩子函数才可以通过setState()来修改state</span></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="comment">//componentDidMount()方法允许我们通过setState()来修改状态</span></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      msg: <span class="string">"赵六"</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"componentDidMount方法执行了"</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//-------------------------------组价的运行阶段-------------------------------</span></span><br><span class="line">  <span class="comment">//当前组件的状态发生改变之后，会进入组件的运行阶段</span></span><br><span class="line">  <span class="comment">//1.在组件运行阶段，第一个执行的函数是getDerivedStateFromProps</span></span><br><span class="line">  <span class="comment">// static getDerivedStateFromProps(nextProps: IProps, prevState: IState) &#123;</span></span><br><span class="line">  <span class="comment">//   console.log("getDerivedStateFromProps", nextProps, prevState)</span></span><br><span class="line">  <span class="comment">//   return null;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.在组件的运行阶段，第二个执行的函数是shouldComponentUpdate。(在组件的各种生命周期阶段中，执行&gt;=0次)</span></span><br><span class="line">  <span class="comment">//作用：让程序员手动控制是否要更新组件</span></span><br><span class="line">  <span class="comment">//如果这个方法返回false，就不会更新组件(后续的生命周期函数就不会执行了)；如果这个方法返回true，就会更新组件(后续的生命周期会执行)</span></span><br><span class="line">  shouldComponentUpdate(nextProps: IProps, <span class="attr">nextState</span>: IState) &#123;</span><br><span class="line">    <span class="comment">// shouldComponentUpdate() 方法中也不能通过setState()来更改state，此时仍然会进入死循环</span></span><br><span class="line">    <span class="comment">// this.setState(&#123;</span></span><br><span class="line">    <span class="comment">//     msg:"王五"</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"shouldComponentUpdate"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//3.在组件的运行阶段，第三个执行的函数是render()函数</span></span><br><span class="line">  <span class="comment">//render()函数的作用：在内存中构建虚拟dom(此时虚拟dom还没有被挂载到页面)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//4.在组件的运行阶段，第四个执行的函数是getSnapshotBeforeUpdate。(在组件的各种生命周期阶段中，执行&gt;=0次)</span></span><br><span class="line">  <span class="comment">//主要作用：获取更新页面之前的dom信息</span></span><br><span class="line">  <span class="comment">//这个方法的返回值会作为componentDidUpdate()方法第三个参数入参  https://react.docschina.org/docs/react-component.html</span></span><br><span class="line">  getSnapshotBeforeUpdate() &#123;</span><br><span class="line">    <span class="comment">// getSnapshotBeforeUpdate() 方法中也不能通过setState()来更改state，此时仍然会进入死循环</span></span><br><span class="line">    <span class="comment">// this.setState(&#123;</span></span><br><span class="line">    <span class="comment">//     msg:"王五"</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"getSnapshotBeforeUpdate"</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">aa</span>: <span class="number">123</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//5.在组件的运行阶段，第五个执行的函数是componentDidUpdate。(在组件的各种生命周期阶段中，执行&gt;=0次)</span></span><br><span class="line">  <span class="comment">//主要作用：虚拟dom已经挂载到页面，此时页面是最新的</span></span><br><span class="line">  componentDidUpdate(prevProps: IProps, <span class="attr">prevState</span>: IState, <span class="attr">snapshot</span>: any) &#123;</span><br><span class="line">    <span class="comment">// componentDidUpdate() 方法中也不能通过setState()来更改state，此时仍然会进入死循环</span></span><br><span class="line">    <span class="comment">// this.setState(&#123;</span></span><br><span class="line">    <span class="comment">//     msg: "王五"</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"componentDidUpdate"</span>, snapshot)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//----------------------------组件的卸载阶段-----------------------------</span></span><br><span class="line">  <span class="comment">//可以在componentWillUnmount()方法中进行一些资源的释放工作。比如关闭定时器、移除事件监听。(卸载一个组件执行一次)</span></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"componentWillUnmount"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Counter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#App.jsx</span><br><span class="line"><span class="keyword">import</span> React, &#123; FC, useState, useRef &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">'./components4/Counter'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123; <span class="attr">count</span>: <span class="number">1</span> &#125;</span><br><span class="line">type IState = Readonly&lt;<span class="keyword">typeof</span> initialState&gt;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  readonly state: IState = initialState;</span><br><span class="line"></span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function">(<span class="params">prev: IState</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        count: prev.count + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      这是App组件</span></span><br><span class="line"><span class="xml">      &#123;/* <span class="tag">&lt;<span class="name">Counter</span> <span class="attr">initCount</span>=<span class="string">&#123;this.state.count&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Counter</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Counter</span>&gt;</span><span class="tag">&lt;/<span class="name">Counter</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>改变count<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><h2 id="6-3-组件的重新渲染和优化"><a href="#6-3-组件的重新渲染和优化" class="headerlink" title="6.3 组件的重新渲染和优化"></a>6.3 组件的重新渲染和优化</h2><h3 id="6-3-1-类组件的re-render的时机"><a href="#6-3-1-类组件的re-render的时机" class="headerlink" title="6.3.1 类组件的re-render的时机"></a>6.3.1 类组件的re-render的时机</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">什么时候触发类组件的re-render</span><br><span class="line">一：当类组件继承React.Component的时候</span><br><span class="line">1.当前组件中调用了setState会触发组件的re-render，不管当前组件的state有没有发生过变化(原理是setState内部会触发batchingUpdate)</span><br><span class="line">2.当父组件re-render的时候，父组件中的子组件也会re-render，不管父组件有没有给子组件传递过任何数据</span><br><span class="line">3.只要组件re-render的时候，有关于组件运行阶段的生命周期的钩子都会被触发(getDerivedStateFromProps\shouldComponentUpdate\render\getSnapshotBeforeUpdate\componentDidMount\componentDidUpdate)。</span><br><span class="line"></span><br><span class="line">二：当类组件继承React.PureComponent的时候</span><br><span class="line">1.当前组件调用了setState之后，只要state数据的内存地址发生变化，就会触发组件的re-render(不管state数据在页面有没有使用)</span><br><span class="line">2.当父组件re-render的时候，子组件不一定再re-render，而是要看父组件给子组件传递了props内存地址有没有发生变化(不管在子组件中有没有使用过父组件传递的props)</span><br><span class="line">3.只要组件re-render的时候，有关于组件运行阶段的生命周期的钩子都会被触发</span><br></pre></td></tr></table></figure><p>当组件继承React.Component的时候，我们在父组件修改了与子组件无关的state，而子组件没有用到这个状态，发现子组件也会re-render，这个时候就需要借助shouldComponentUpdate钩子函数来做优化。</p><p>我们通常的解决方案是：</p><blockquote><ol><li>使用immutable进行比较，在不相等的时候调用setState；</li><li>在shouldComponentUpdate中判断前后的props和state，如果没有变化，则返回false来阻止更新。</li><li>创建一个类继承PureComponent，判断页面是否要更新的时候进行浅比较</li></ol></blockquote><h3 id="6-3-2-shouldComponentUpdate优化"><a href="#6-3-2-shouldComponentUpdate优化" class="headerlink" title="6.3.2 shouldComponentUpdate优化"></a>6.3.2 shouldComponentUpdate优化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//作用：让程序员手动控制是否要更新组件</span></span><br><span class="line"><span class="comment">//如果这个方法返回false，就不会更新组件(后续的生命周期函数就不会执行了)；如果这个方法返回true，就会更新组件(后续的生命周期会执行)</span></span><br><span class="line">shouldComponentUpdate(nextProps: IProps, <span class="attr">nextState</span>: IState) &#123;</span><br><span class="line">    <span class="comment">//当下次传递过来的initCount为偶数的时候，不更新页面。为奇数的时候更新页面</span></span><br><span class="line">    <span class="keyword">if</span>(nextProps.initCount%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-3-PureComponent优化"><a href="#6-3-3-PureComponent优化" class="headerlink" title="6.3.3 PureComponent优化"></a>6.3.3 PureComponent优化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ListOfWords.tsx</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line">type IProps = Readonly&lt;&#123;</span><br><span class="line">  words: string[];</span><br><span class="line">&#125;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承React.Component的时候，视图更新通过shouldComponentUpdate完成</span></span><br><span class="line"><span class="comment">// class ListOfWords extends React.Component&lt;IProps&gt; &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承React.PureComponent的时候，视图更新通过数据源的内存地址判断完成</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListOfWords</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">PureComponent</span>&lt;<span class="title">IProps</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// shouldComponentUpdate(nextProps: IProps) &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(nextProps.words,"0000000000000000000000")</span></span><br><span class="line">  <span class="comment">//   return true;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;console.log("render")&#125;</span></span><br><span class="line"><span class="xml">      &#123;this.props.words.join("-")&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ListOfWords</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//App.tsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; SFC, useState, useRef &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ListOfWords <span class="keyword">from</span> <span class="string">'./components4/ListOfWords'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123; <span class="attr">words</span>: [<span class="string">'marklar'</span>] &#125;</span><br><span class="line">type IState = Readonly&lt;<span class="keyword">typeof</span> initialState&gt;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  readonly state: IState = initialState;</span><br><span class="line"></span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 当ListOfWords组件继承React.PureComponent的时候，下面的代码不会触发视图的刷新，因为当前的words虽然修改了，但总是引用同一块内存</span></span><br><span class="line">    <span class="comment">// this.setState((prev:IState)=&gt;&#123;</span></span><br><span class="line">    <span class="comment">//   prev.words.push("marklar")</span></span><br><span class="line">    <span class="comment">//   return &#123;</span></span><br><span class="line">    <span class="comment">//     words:prev.words</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面代码会触发ListOfWords视图更新，因为每次点击按钮都给words赋值一个新的数组，此时新数组和原来数组的内存地址肯定不一致，从而组件才可能更新</span></span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function">(<span class="params">prev:IState</span>)=&gt;</span>&#123;</span><br><span class="line">      prev.words.push(<span class="string">"marklar"</span>)</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        words:[...prev.words]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      这是App组件</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">ListOfWords</span> <span class="attr">words</span>=<span class="string">&#123;this.state.words&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">ListOfWords</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>添加words<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.继承Component时，数据源发生变化之后，会通过shouldComponentUpdate的返回值来判断页面是否需要刷新</span></span><br><span class="line"><span class="comment">2.继承PureComponent时，数据源发生变化之后，默认进行的是浅比较(只会比较数据的内存地址是否一致)，不能再重写shouldComponentUpdate</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="6-4-getDerivedStateFromProps存在的问题"><a href="#6-4-getDerivedStateFromProps存在的问题" class="headerlink" title="6.4 getDerivedStateFromProps存在的问题"></a>6.4 getDerivedStateFromProps存在的问题</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getDerivedStateFromProps 函数会在每次re-rendering之前被调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//为什么要用getDerivedStateFromProps？答案：组件接收的props数据是只读的，我们可以使用该方法将传递的props映射到state里面，实现修改(会有诸多问题)</span></span><br><span class="line"><span class="comment">//注意点：该方法是一个静态方法，方法中没有this，故而不可以直接通过this.setState()来改变状态，而是需要通过return来改变状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//参数：</span></span><br><span class="line"><span class="comment">//1.nextProps外部传递过来的props属性</span></span><br><span class="line"><span class="comment">//2.prevState之前的state状态</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> getDerivedStateFromProps(nextProps, prevState) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"getDerivedStateFromProps"</span>, nextProps, prevState)</span><br><span class="line">    <span class="comment">//获取到父组件中传递过来的initcount值</span></span><br><span class="line">    <span class="keyword">const</span> &#123; initcount &#125; = nextProps;</span><br><span class="line">    <span class="comment">//当父组件中传递过来的initcount发生改变了</span></span><br><span class="line">    <span class="keyword">if</span> (initcount != prevState.prevCount) &#123;</span><br><span class="line">        <span class="comment">//在方法中返回&#123;count:initcount&#125; 替换掉当前state中的 count值</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            count: initcount,</span><br><span class="line">            prevCount:initcount</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果props传入的内容不需要影响到你的state，那么就需要返回一个null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//问题：</span></span><br><span class="line"><span class="number">1.</span>当前组件的状态由多个源控制，父组件中控制列表数据，子组件中又控制了type这个state。</span><br><span class="line">因此父组件state改掉之后，会触发子组件重新渲染；本身组件state改掉之后，会触发当前组件重新渲染</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>如果你的组件内部既需要修改自己的type，又需要接收从外部修改的type。逻辑非常混乱！getDerivedStateFromProps中你根本不知道该做什么。</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (initcount != prevState.prevCount) &#123;</span><br><span class="line">    <span class="comment">//在方法中返回&#123;count:initcount&#125; 替换掉当前state中的 count值</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        count: initcount,</span><br><span class="line">        prevCount:initcount</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">如果彻底解决这个问题呢？</span><br><span class="line">答案：好好组织你的组件，在非必须的时候，摒弃这种写法(派生属性)。type要么由props驱动，要么完全由state驱动。</span><br><span class="line"></span><br><span class="line">从这个生命周期的更新来看，react更希望将受控的props和state进行分离，就如同Redux作者Dan Abramov在redux文档当中写的一样Presentational and Container Components，将所有的组件分离称为展示型组件和容器型组件，一个只负责接收props来改变自己的样式，一个负责保持其整个模块的state。这样可以让代码更加清晰。但是在实际的业务逻辑中，我们有时很难做到这一点，而且这样可能会导致容器型组件变得非常庞大以致难以管理，如何进行取舍还是需要根据实际场景决定的</span><br></pre></td></tr></table></figure><h2 id="6-5-React老版本生命周期"><a href="#6-5-React老版本生命周期" class="headerlink" title="6.5 React老版本生命周期"></a>6.5 React老版本生命周期</h2><p><img src= "/img/loading.gif" data-src="./assets/3284159097-5bbb08d17db33_articlex-1584956954768.png" alt="3284159097-5bbb08d17db33_articlex"></p><h1 id="7-函数组件的生命周期"><a href="#7-函数组件的生命周期" class="headerlink" title="7.函数组件的生命周期"></a>7.函数组件的生命周期</h1><h2 id="7-1-useEffect介绍"><a href="#7-1-useEffect介绍" class="headerlink" title="7.1 useEffect介绍"></a>7.1 useEffect介绍</h2><p><code>useEffect</code> 就是一个 Effect Hook，给函数组件增加了操作副作用的能力。它跟 class 组件中的 <code>componentDidMount</code>、<code>componentDidUpdate</code> 和 <code>componentWillUnmount</code> 具有相同的用途，只不过被合并成了一个 API。</p><p>在调用这个hook时，就是告诉React在完成对DOM的更改后运行这个hook，在这里你可以访问到state和props。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- 纯函数：如果函数的调用参数相同，则永远返回相同的结果。它不依赖于程序执行期间函数外部任何状态或数据的变化，必须只依赖于其输入参数。</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">priceAfterTax</span>(<span class="params">productPrice</span>) </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> (productPrice * <span class="number">0.20</span>) + productPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">- 副作用：一个可以被观察的副作用是在函数内部与其外部的任意交互。这可能是在函数内修改外部的变量，或者在函数里调用另外一个函数等。</span><br><span class="line">    <span class="keyword">var</span> tax = <span class="number">20</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">calculateTax</span>(<span class="params">productPrice</span>) </span>&#123;</span><br><span class="line">        tax = tax/<span class="number">100</span></span><br><span class="line">        <span class="keyword">return</span> (productPrice * tax) + productPrice;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="7-2-useEffect用法"><a href="#7-2-useEffect用法" class="headerlink" title="7.2 useEffect用法"></a>7.2 useEffect用法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1  componentDidMount执行一次，依赖项每次改变时执行一次</span></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//副作用动作</span></span><br><span class="line">&#125;,[依赖项])</span><br><span class="line"></span><br><span class="line"><span class="comment">//2  相当于componentDidMount</span></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//副作用动作</span></span><br><span class="line">&#125;,[])</span><br><span class="line"></span><br><span class="line"><span class="comment">//3  相当于componentDidMount 、componentDidUpdate</span></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//副作用动作</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="7-3-useEffect使用"><a href="#7-3-useEffect使用" class="headerlink" title="7.3 useEffect使用"></a>7.3 useEffect使用</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; FC, useState, useEffect &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line">type IProps = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Demo2: FC&lt;IProps&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//count代表state的变量</span></span><br><span class="line">  <span class="comment">//setCount是一个function，如果我们要修改count变量，需要通过setCount来修改</span></span><br><span class="line">  <span class="keyword">let</span> [count, setCount] = useState&lt;number&gt;(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">let</span> [count2, setCount2] = useState&lt;number&gt;(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//useEffect函数可以来模拟class组件的中指定生命周期的钩子函数 componentDidMount，componentDidUpdate，componentWillUnmount</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//相当于componentDidMount 、componentDidUpdate</span></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"xxxxxxxxxxx"</span>, count)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//相当于componentDidMount</span></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"yyyyyyyyy"</span>)</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="comment">//相当于componentDidMount 和 当count2的值被改变之后执行当前的useEffect</span></span><br><span class="line">  <span class="comment">//其他值改变不会执行这个useEffect</span></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"zzzzzzzzzzzzz"</span>)</span><br><span class="line">  &#125;, [count2])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    count的值是：&#123;count&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; setCount(++count) &#125;&#125;&gt;点我修改count<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    count2的值是:&#123;count2&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; setCount2(++count2) &#125;&#125;&gt;点我修改count2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo2;</span><br></pre></td></tr></table></figure><h2 id="7-4-清除副作用"><a href="#7-4-清除副作用" class="headerlink" title="7.4 清除副作用"></a>7.4 清除副作用</h2><h3 id="a-无需清理的副作用"><a href="#a-无需清理的副作用" class="headerlink" title="a) 无需清理的副作用"></a>a) 无需清理的副作用</h3><blockquote><p>有时候，我们只想<strong>在 React 更新 DOM 之后运行一些额外的代码。</strong>比如发送网络请求，手动变更 DOM，记录日志，这些都是常见的无需清除的操作。因为我们在执行完这些操作之后，就可以忽略他们了。</p></blockquote><p>需求：监听url的变化来发送网络请求，保存返回结果</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; FC, useState, useEffect &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ajax <span class="keyword">from</span> <span class="string">'@utils/ajax'</span></span><br><span class="line"></span><br><span class="line">type IProps = &#123;</span><br><span class="line">  location:string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Example: FC&lt;IProps&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = useState(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    getData();</span><br><span class="line">  &#125;, [props.location]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> getData = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    ajax.post().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      setData(res);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;data&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Example;</span><br></pre></td></tr></table></figure><p>当location发生变化时，useEffect中函数就会自动执行</p><h3 id="b-需要清理的副作用"><a href="#b-需要清理的副作用" class="headerlink" title="b) 需要清理的副作用"></a>b) 需要清理的副作用</h3><blockquote><p>之前我们研究了如何使用不需要清除的副作用，还有一些副作用是需要清除的。例如<strong>定时器</strong>、<strong>订阅外部数据源</strong>。这种情况下，清除工作是非常重要的，可以防止引起内存泄露！</p></blockquote><p>在useEffect中可选的返回一个清除函数，该清除函数会在组件<strong>卸载</strong>时自动执行，以达到清除effect的目的；</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//useEffect函数中return的function会在组件卸载时自动执行</span></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//副作用动作</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//清除effect</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用示例</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"useEffect在组件挂载和更新的时候执行"</span>)</span><br><span class="line">        <span class="keyword">let</span> timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"定时器打印"</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//如果useEffect的function中返回了一个函数，那么该函数会在组件卸载的时候执行</span></span><br><span class="line">        <span class="comment">//就相当于componentWillUnMount</span></span><br><span class="line">        <span class="comment">//现在每一次重新渲染都会返回一个新的清除函数，把上一次组件装在执行的定时器清除掉(这边由于闭包的原因，之前的定时器以及一些变量都会被释放)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span>&#123;  </span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"清除定时器"</span>)  </span><br><span class="line">            timer &amp;&amp; clearInterval(timer)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="c-useEffect返回清除函数的执行时机"><a href="#c-useEffect返回清除函数的执行时机" class="headerlink" title="c) useEffect返回清除函数的执行时机"></a>c) useEffect返回清除函数的执行时机</h3><p>这里是组件<strong>卸载</strong>时自动执行，当前状态下的函数组件render完之后会立即执行上一个函数状态中<code>useEffect</code>返回的清除函数，而这个清除函数中所带的参数也是处于上一个状态中（闭包的特性）。</p><p><a href="https://segmentfault.com/a/1190000018639033" target="_blank" rel="noopener">https://segmentfault.com/a/1190000018639033</a></p><blockquote><p>假设在组件的使用过程中，外部传入的props参数id，改变了两次，第一次传入<code>id: 1</code>， 第二次传入<code>id: 2</code></p><p>那么我们来梳理一下整个过程：</p><ol><li>传入<code>props.id = 1</code></li><li>组件渲染</li><li>DOM渲染完成，useEffect逻辑执行，返回清除副作用函数<code>clear，</code>命名为<code>clear1</code></li><li>传入<code>props.id = 2</code></li><li>组件渲染</li><li>组件渲染完成，clear1执行</li><li>useEffect逻辑执行，返回另一个clear函数，命名为<code>clear2</code></li><li>组件卸载，clear2执行</li></ol><p>执行过程有点绕，因为与你印象中的执行过程似乎不一样。其实关键的地方就在于clear函数的执行，它的特征如下：</p><ul><li>每次useEffect执行，都会返回一个新的clear函数</li><li>clear函数会在下一次useEffect逻辑之前执行（DOM渲染完成之后）</li><li>组件卸载也会执行一次</li></ul></blockquote><h2 id="7-5-useLayoutEffect"><a href="#7-5-useLayoutEffect" class="headerlink" title="7.5 useLayoutEffect"></a>7.5 useLayoutEffect</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useLayoutEffect( <span class="function"><span class="params">()</span> =&gt;</span> &#123; &#125;, [ 依赖项 ] );</span><br></pre></td></tr></table></figure><p>其函数签名与 <code>useEffect</code> 相同，但它会在所有的 DOM 变更之后<strong>同步调用</strong> effect。可以使用它来读取 DOM 布局并同步触发重渲染。</p><p>这个是用在处理DOM的时候，当你的useEffect里面的操作需要处理DOM。并且会改变页面的样式，就需要用这个，否则可能会出现出现闪屏问题</p><p><a href="https://cllxx.cn/2019/07/21/react-xin-te-xing-hooks-zhi-useeffect-he-uselayouteffect-wu/" target="_blank" rel="noopener">https://cllxx.cn/2019/07/21/react-xin-te-xing-hooks-zhi-useeffect-he-uselayouteffect-wu/</a></p><blockquote><p>useEffect和useLayoutEffect的异同：</p><ul><li>useLayoutEffect是在虚拟DOM构建完成后立即执行，useEffect是在真实DOM构建完成后立即执行</li></ul><ul><li>useLayoutEffect是同步执行，useEffect是异步执行</li></ul></blockquote><h2 id="7-6-useEffect使用注意点"><a href="#7-6-useEffect使用注意点" class="headerlink" title="7.6 useEffect使用注意点"></a>7.6 useEffect使用注意点</h2><p>useEffect的函数需要返回一个cleanup的清除函数或者undefined。而当我们使用await、async的时候，会默认返回一个Promise，所以我们不能在useEffect函数中使用async</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误</span></span><br><span class="line">useEffect(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">     <span class="keyword">await</span> fetchSomething();</span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br><span class="line"><span class="comment">//正确</span></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">await</span> fetchSomething();</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><h1 id="8-其他常用hook"><a href="#8-其他常用hook" class="headerlink" title="8.其他常用hook"></a>8.其他常用hook</h1><h2 id="8-1-函数组件re-render的时机"><a href="#8-1-函数组件re-render的时机" class="headerlink" title="8.1 函数组件re-render的时机"></a>8.1 函数组件re-render的时机</h2><blockquote><ol><li>组件重新被创建</li><li>当前组件state的内存地址发生了变化，无论dom中是否使用了state</li><li>父组件更新，子组件也会自动的更新</li><li>组件更新时，会卸载所有function，并重新创建function (执行函数组件的所有逻辑)</li></ol></blockquote><p>也就是说，在函数组件中，只要父组件或者当前组件的state内存地址发生变化，都会触发当前组件以及当前组件的子组件re-render，无论当前组件是否使用到父组件中的state。</p><p>而在函数组件中，react不再区分mount和update两个状态，这意味着函数组件的每一次调用都会执行其内部的所有逻辑，那么会带来较大的性能损耗。因此useMemo 和useCallback就是解决性能问题的杀手锏。</p><h2 id="8-2-memo-useMemo-useCallback"><a href="#8-2-memo-useMemo-useCallback" class="headerlink" title="8.2 memo\useMemo\useCallback"></a>8.2 memo\useMemo\useCallback</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Child.tsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; FC &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Child: FC&lt;&#123;&#125;&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;date.toLocaleString()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Child;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Parent.tsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; FC,useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">"./Child"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Parent:FC&lt;&#123;&#125;&gt; = <span class="function">(<span class="params">props</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count,setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;数量为:&#123;count&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;()=&gt;&#123;setCount(count+1)&#125;&#125;&gt;点我加1&lt;/</span>button&gt;</span><br><span class="line">      &lt;Child&gt;&lt;<span class="regexp">/Child&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Parent;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//index.tsx</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">Parent</span>&gt;</span><span class="tag">&lt;/<span class="name">Parent</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//案例存在的问题：每点击一次按钮，会重新渲染一次时间，说明父组件更新的时候，子组件也重新渲染了</span></span><br></pre></td></tr></table></figure><h3 id="8-2-1-使用memo高阶函数"><a href="#8-2-1-使用memo高阶函数" class="headerlink" title="8.2.1 使用memo高阶函数"></a>8.2.1 使用memo高阶函数</h3><p><code>React.memo()</code>是一个高阶函数，它与 <a href="https://reactjs.org/docs/react-api.html#reactpurecomponent" target="_blank" rel="noopener"><code>React.PureComponent</code></a>类似，是一个函数组件而非一个类。</p><p>React.memo()可接受2个参数，第一个参数为纯函数的组件，第二个参数用于对比props控制是否刷新，与<a href="https://reactjs.org/docs/react-component.html#shouldcomponentupdate" target="_blank" rel="noopener"><code>shouldComponentUpdate()</code></a>功能类似</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Child.tsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; FC,memo &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Child: FC&lt;&#123;count?:number&#125;&gt; = memo(<span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;date.toLocaleString()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;,(prev,next) =&gt; &#123; <span class="built_in">console</span>.log(prev.count,next.count); <span class="keyword">return</span> prev.count==next.count &#125;);</span><br><span class="line"> <span class="comment">//这边只要父亲传递给孩子的props发生了变化就应该刷新子组件(如果父亲没有给子组件传递props或者父亲给子组件传递的props没有改变，则子组件不应该刷新)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Child;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Parent.tsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; FC,useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">"./Child"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Parent:FC&lt;&#123;&#125;&gt; = <span class="function">(<span class="params">props</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count,setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;数量为:&#123;count&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;()=&gt;&#123;setCount(count+1)&#125;&#125;&gt;点我加1&lt;/</span>button&gt;</span><br><span class="line">      &lt;Child count=&#123;count&#125;&gt;&lt;<span class="regexp">/Child&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Parent;</span><br></pre></td></tr></table></figure><h3 id="8-2-2-useMemo"><a href="#8-2-2-useMemo" class="headerlink" title="8.2.2 useMemo"></a>8.2.2 useMemo</h3><h4 id="a-没有使用useMemo存在的问题"><a href="#a-没有使用useMemo存在的问题" class="headerlink" title="a) 没有使用useMemo存在的问题"></a>a) 没有使用useMemo存在的问题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Parent.tsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; FC, useState &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">"./Child"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Parent: FC&lt;&#123;&#125;&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> obj = &#123;</span><br><span class="line">    name: <span class="string">"zhangsan"</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;数量为:&#123;count&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button</span></span><br><span class="line"><span class="regexp">        onClick=&#123;() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          setCount(count + 1);</span></span><br><span class="line"><span class="regexp">        &#125;&#125;</span></span><br><span class="line"><span class="regexp">      &gt;</span></span><br><span class="line"><span class="regexp">        点我加1</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">      &lt;Child obj=&#123;obj&#125;&gt;&lt;<span class="regexp">/Child&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Parent;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Child.tsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; FC, memo &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Child: FC&lt;&#123; <span class="attr">obj</span>: &#123; name?: string &#125; &#125;&gt; = memo(</span><br><span class="line">  (props) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;date.toLocaleString()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  (prev, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> prev.obj == next.obj;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Child;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//案例存在的问题：每点击一次按钮，会重新渲染一次时间，但是每一次点击按钮的时候，父组件给子组件传递的都是相同的obj对象，为什么子组件还是会刷新呢?</span></span><br><span class="line"><span class="comment">//原因是每一次点击按钮的时候，会重新刷新父组件，父组件中的obj会重新被实例化，所以新实例化的obj和上一次实例化的obj不是同一个对象</span></span><br></pre></td></tr></table></figure><h4 id="b-useMemo-hook"><a href="#b-useMemo-hook" class="headerlink" title="b) useMemo hook"></a>b) useMemo hook</h4><p>useMemo可以用来缓存一些变量，并指定哪些条件变化后重新计算缓存的变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> memoizedValue = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> computeExpensiveValue(a, b), [a, b]);</span><br></pre></td></tr></table></figure><blockquote><p>useMemo第一个参数是一个 factory 函数，该函数的返回结果会通过useMemo缓存下来</p><p>​                  第二个参数是factory函数的依赖(deps)，当依赖(deps)改变时才重新执行 factory 函数，memoizedValue 才会被重新计算</p></blockquote><p>也就是在依赖未改变时（或空数组无依赖时），memoizedValue 总是返回通过useMemo缓存的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Parent.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; FC, useState,useMemo &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">"./Child"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Parent: FC&lt;&#123;&#125;&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">//使用useMemo缓存变量值  依赖项没有指定</span></span><br><span class="line">  <span class="keyword">const</span> obj = useMemo(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name: <span class="string">"zhangsan"</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,[])</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;数量为:&#123;count&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button</span></span><br><span class="line"><span class="regexp">        onClick=&#123;() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          setCount(count + 1);</span></span><br><span class="line"><span class="regexp">        &#125;&#125;</span></span><br><span class="line"><span class="regexp">      &gt;</span></span><br><span class="line"><span class="regexp">        点我加1</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">      &lt;Child obj=&#123;obj&#125;&gt;&lt;<span class="regexp">/Child&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Parent;</span><br></pre></td></tr></table></figure><h3 id="8-2-3-useCallback"><a href="#8-2-3-useCallback" class="headerlink" title="8.2.3 useCallback"></a>8.2.3 useCallback</h3><h4 id="a-没有使用useCallback的问题"><a href="#a-没有使用useCallback的问题" class="headerlink" title="a) 没有使用useCallback的问题"></a>a) 没有使用useCallback的问题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Parent.tsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; FC, useState,useMemo &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">"./Child"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Parent: FC&lt;&#123;&#125;&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [text,setText] = useState(<span class="string">""</span>)</span><br><span class="line">  <span class="keyword">const</span> changeHandler = <span class="function">(<span class="params">event:React.ChangeEvent&lt;HTMLInputElement&gt;</span>)=&gt;</span>&#123;</span><br><span class="line">    setText(event.target.value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;text文本为:&#123;text&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Child onChange=&#123;changeHandler&#125;&gt;&lt;/</span>Child&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Parent;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/Child.tsx</span></span><br><span class="line"><span class="regexp">import React, &#123; FC, memo &#125; from "react";</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const Child: FC&lt;&#123;</span></span><br><span class="line"><span class="regexp">  onChange?: (event: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; void;</span></span><br><span class="line"><span class="regexp">&#125;&gt; = memo((props) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  const date = new Date();</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &#123;date.toLocaleString()&#125;</span></span><br><span class="line"><span class="regexp">      &lt;input type="text" onChange=&#123;props.onChange&#125;&gt;&lt;/i</span>nput&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Child;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/上面代码中，我们在子组件中修改文本框的值，会触发子组件的onChange，从而触发父组件的changeHandler方法，在父组件中的changeHandler方法中修改了text文本，所以页面上的text值发生了改变。 </span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/但是除了我们发现页面上text文本改变之外，子组件中的时间也发生了改变 (说明每一次子组件输入内容的时候都会触发子组件的重新渲染)</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/原因是每一次子组件输入内容，父组件的text文本发生变化，造成父组件被重新渲染，从而造成父组件传递给子组件的changeHandler方法(props)发生了变化，从而造成子组件的重新渲染</span></span><br></pre></td></tr></table></figure><h4 id="b-useCallback-hook"><a href="#b-useCallback-hook" class="headerlink" title="b) useCallback   hook"></a>b) useCallback   hook</h4><p>useMemo缓存的是值</p><p>useCallback缓存的是函数。有两个参数，第一个参数是需要缓存的函数，第二个参数是依赖项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Parent.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; FC, useState,useCallback &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">"./Child"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Parent: FC&lt;&#123;&#125;&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [text,setText] = useState(<span class="string">""</span>)</span><br><span class="line">  <span class="comment">//使用useCallback缓存函数</span></span><br><span class="line">  <span class="keyword">const</span> changeHandler = useCallback(<span class="function">(<span class="params">event:React.ChangeEvent&lt;HTMLInputElement&gt;</span>)=&gt;</span>&#123;</span><br><span class="line">    setText(event.target.value)</span><br><span class="line">  &#125;,[])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;text文本为:&#123;text&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Child onChange=&#123;changeHandler&#125;&gt;&lt;/</span>Child&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Parent;</span></span><br></pre></td></tr></table></figure><h3 id="8-2-4-useMemo和useCallback的区别和联系"><a href="#8-2-4-useMemo和useCallback的区别和联系" class="headerlink" title="8.2.4 useMemo和useCallback的区别和联系"></a>8.2.4 useMemo和useCallback的区别和联系</h3><p>实际上<code>useCallback</code>是基于<code>useMemo</code>实现的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useCallback</span>(<span class="params">callback, args</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> useMemo(<span class="function"><span class="params">()</span> =&gt;</span> callback, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>useMemo</code>是返回<code>callback</code>执行后的结果</li><li><code>useCallback</code> 是直接返回被<code>useMemo</code>修饰的<code>callback</code>函数</li></ol><h2 id="8-3-useReducer和useContext"><a href="#8-3-useReducer和useContext" class="headerlink" title="8.3 useReducer和useContext"></a>8.3 useReducer和useContext</h2><h3 id="8-3-1-useContext"><a href="#8-3-1-useContext" class="headerlink" title="8.3.1 useContext"></a>8.3.1 useContext</h3><blockquote><p>跨级组件通信，实现同一子树下所有节点可统一共享子树根节点的数据</p></blockquote><p>useContext接收一个 context 对象（<code>React.createContext</code> 的返回值）并返回该 context 的当前值。当前的 context 值由上层组件中距离当前组件最近的 <code>&lt;MyContext.Provider&gt;</code> 的 <code>value</code> 决定。</p><p>当组件上层最近的 <code>&lt;MyContext.Provider&gt;</code> 更新时，该 Hook 会触发重渲染，并使用最新传递给 <code>MyContext</code> provider 的 context <code>value</code> 值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> value = useContext(MyContext);</span><br></pre></td></tr></table></figure><p>基本用法：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#1.index.jsx</span><br><span class="line"><span class="keyword">import</span> MyContext <span class="keyword">from</span> <span class="string">'./context.js'</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;name:</span>"<span class="attr">zhangsan</span>"&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">Parent</span>&gt;</span><span class="tag">&lt;/<span class="name">Parent</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">MyContext.Provider</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#2.context.js</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">let</span> context = createContext&lt;&#123; <span class="attr">name</span>: string &#125;&gt;(&#123; <span class="attr">name</span>: <span class="string">""</span> &#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyContext;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#3.Parent.jsx</span><br><span class="line"><span class="keyword">import</span> React, &#123; FC,useContext &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> MyContext <span class="keyword">from</span> <span class="string">'../context.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Parent: FC&lt;&#123;&#125;&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//在子组件中获取根组件暴露的数据</span></span><br><span class="line">  <span class="keyword">const</span> contextValue = useContext(MyContext);</span><br><span class="line">  <span class="built_in">console</span>.log(contextValue)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;text文本为:&#123;contextValue.name&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Parent;</span><br></pre></td></tr></table></figure><h3 id="8-3-2-useReducer"><a href="#8-3-2-useReducer" class="headerlink" title="8.3.2 useReducer"></a>8.3.2 useReducer</h3><h4 id="a-redux介绍"><a href="#a-redux介绍" class="headerlink" title="a) redux介绍"></a>a) redux介绍</h4><p>Redux是SPA单页面应用程序中多个组件之间共享数据的一种方式。</p><p><img src= "/img/loading.gif" data-src="D:%5C%E5%89%8D%E7%AB%AF%E5%A4%87%E8%AF%BE%5C17.REACT%5Creadme%5Cassets%5C1602462149160.png" alt="1602462149160"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- store：共享的state数据。</span><br><span class="line">- reducers：纯函数，用于修改state，由action触发。</span><br><span class="line">- action：一个对象，是 reducers的触发器，通过dispatch来触发，action对象需要有type字段</span><br><span class="line">- dispatch：派发器， dispatch函数接受一个action对象作为入参。action对象需要有type字段</span><br></pre></td></tr></table></figure><h4 id="b-useReducer"><a href="#b-useReducer" class="headerlink" title="b) useReducer"></a>b) useReducer</h4><p>useReducer是在函数组件中实现类似 Redux 功能的一个Hook。他接收两个参数，第一个参数是一个recuder(纯函数)，第二个参数是state的初始值。</p><p>他返回一个状态 state和 dispath，state是返回状态中的值，而 dispatch 是一个可以发布事件来更新 state 的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reducer 纯函数，用于修改state</span></span><br><span class="line"><span class="comment">// initialArg 初始化的state状态</span></span><br><span class="line"><span class="comment">// init 一个函数用于惰性计算state初始值</span></span><br><span class="line"><span class="comment">// state 获取state数据</span></span><br><span class="line"><span class="comment">// dispatch 派发器，用于接收一个action来触发reducer，从而修改state</span></span><br><span class="line"><span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initialArg, init);</span><br></pre></td></tr></table></figure><h3 id="8-3-3-useReducer和useContext-了解"><a href="#8-3-3-useReducer和useContext-了解" class="headerlink" title="8.3.3 useReducer和useContext(了解)"></a>8.3.3 useReducer和useContext(了解)</h3><p>在函数组件中，useReducer和useContext结合使用的时候可以提供类似Vuex那样的全局状态管理</p><p>useContext负责向子孙组件暴露数据</p><p>useReducer提供全局的state、reducers、dispatch等 (useReducer必须要在函数组件中才能使用，所以这边得把代码放到App.tsx中)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">#1.index.tsx</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span>&gt;</span><span class="tag">&lt;/<span class="name">App</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br><span class="line">                </span><br><span class="line">#2.App.tsx</span><br><span class="line"><span class="keyword">import</span> React, &#123; useContext, useReducer &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"./App.css"</span>;</span><br><span class="line"><span class="keyword">import</span> Parent4 <span class="keyword">from</span> <span class="string">"./components4/Parent4"</span>;</span><br><span class="line"><span class="keyword">import</span> MyContext4, &#123; ActionType &#125; <span class="keyword">from</span> <span class="string">"./components4/MyContext4"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//reducer是一个纯函数，可以将action的变化转换为state的变化</span></span><br><span class="line"><span class="comment">//所以reducer纯函数需要接收一个action</span></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function"><span class="keyword">function</span> (<span class="params">state = <span class="number">0</span>, action: ActionType</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//根据action的type来修改state</span></span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"ADD"</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"SUB"</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"ADDN"</span>:</span><br><span class="line">      <span class="keyword">if</span> (action.step) &#123;</span><br><span class="line">        <span class="keyword">let</span> num = action.step.num;</span><br><span class="line">        <span class="keyword">return</span> state + num;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//useContext的作用是给子孙组件提供数据</span></span><br><span class="line"><span class="comment">//useReducer的作用提供全局的状态管理</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [count = <span class="number">0</span>, dispatch] = useReducer(reducer, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;MyContext4.Provider value=&#123;[count, dispatch]&#125;&gt;</span><br><span class="line">      &lt;Parent4&gt;&lt;<span class="regexp">/Parent4&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>MyContext4.Provider&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#3.Parent.tsx</span><br><span class="line"><span class="keyword">import</span> React, &#123; FC, useContext &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> Child4 <span class="keyword">from</span> <span class="string">"./Child4"</span>;</span><br><span class="line"><span class="keyword">import</span> MyContext4 <span class="keyword">from</span> <span class="string">"./MyContext4"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Parent4: FC = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> [count,dispatch] = useContext(MyContext4);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> clickHandler1 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//通过派发器来接收一个action，从而触发reducer的执行，会根据对应的action执行对应的数据修改逻辑</span></span><br><span class="line">    dispatch(&#123;</span><br><span class="line">      type: <span class="string">"ADD"</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> clickHandler2 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    dispatch(&#123;</span><br><span class="line">      type: <span class="string">"SUB"</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> clickHandler3 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    dispatch(&#123;</span><br><span class="line">      type: <span class="string">"ADDN"</span>,</span><br><span class="line">      step: &#123;</span><br><span class="line">        num: <span class="number">5</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h3&gt;Parent组件&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;当前count : &#123;count&#125;&lt;/</span>p&gt;</span><br><span class="line">      &lt;button onClick=&#123;clickHandler1&#125;&gt;点我+<span class="number">1</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;clickHandler2&#125;&gt;点我-1&lt;/</span>button&gt;</span><br><span class="line">      &lt;button onClick=&#123;clickHandler3&#125;&gt;点我+<span class="number">5</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Child4&gt;&lt;/</span>Child4&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Parent4;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">#4.Child.tsx</span></span><br><span class="line"><span class="regexp">import React, &#123; FC, useContext &#125; from "react";</span></span><br><span class="line"><span class="regexp">import MyContext4 from "./</span>MyContext4<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const Child4: FC = (props) =&gt; &#123;</span></span><br><span class="line"><span class="string">  let [count, dispatch] = useContext(MyContext4);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  const clickHandler = ()=&gt;&#123;</span></span><br><span class="line"><span class="string">    dispatch(&#123;</span></span><br><span class="line"><span class="string">      type:"</span>ADD<span class="string">"</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  return (</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h3&gt;Child子组件&lt;/h3&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;当前数量&#123;count&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;button onClick=&#123;clickHandler&#125;&gt;点我修改数量&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default Child4;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#5.MyContext.tsx</span></span><br><span class="line"><span class="string">//创建一个上下文对象，该对象会在useContext中使用到</span></span><br><span class="line"><span class="string">import &#123; createContext, Dispatch, ReducerAction &#125; from "</span>react<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//声明Action的泛型</span></span><br><span class="line"><span class="string">export type ActionType = &#123;</span></span><br><span class="line"><span class="string">  type: string;</span></span><br><span class="line"><span class="string">  step?: &#123;</span></span><br><span class="line"><span class="string">    num: number;</span></span><br><span class="line"><span class="string">  &#125;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//声明Context的泛型</span></span><br><span class="line"><span class="string">type ContextType = [</span></span><br><span class="line"><span class="string">  number,</span></span><br><span class="line"><span class="string">  Dispatch&lt;ActionType&gt;</span></span><br><span class="line"><span class="string">];</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//创建一个context上下文，并导出</span></span><br><span class="line"><span class="string">let context = createContext&lt;ContextType&gt;([0,()=&gt;&#123;&#125;])</span></span><br><span class="line"><span class="string">export default context;</span></span><br></pre></td></tr></table></figure><p>useReducer和useContext的出现并不是为了取代redux，redux是独立于任何第三方库，redux有优秀的中间件(异步数据流、debug)。当状态比较简单的时候，我们可以使用useReducer和useContext来实现组件之间的数据共享，但是当状态变得特别复杂的时候，建议使用redux。</p><h2 id="8-4-Hook的规则"><a href="#8-4-Hook的规则" class="headerlink" title="8.4 Hook的规则"></a>8.4 Hook的规则</h2><h3 id="8-4-1-只在组件顶层中使用Hook"><a href="#8-4-1-只在组件顶层中使用Hook" class="headerlink" title="8.4.1 只在组件顶层中使用Hook"></a>8.4.1 只在组件顶层中使用Hook</h3><blockquote><p><strong>不要在循环，条件或嵌套函数中调用 Hook，</strong> 确保总是在你的 React 函数的最顶层调用他们。遵守这条规则，你就能确保 Hook 在每一次渲染中都按照同样的顺序被调用。这让 React 能够在多次的 <code>useState</code> 和 <code>useEffect</code> 调用之间保持 hook 状态的正确。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>); <span class="comment">//Yes</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(props.id)&#123;</span><br><span class="line">        <span class="comment">// const [count, setCount] = useState(0); //No</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">const</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// const [count, setCount] = useState(0); //No</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-4-2-只在React-函数中调用Hook"><a href="#8-4-2-只在React-函数中调用Hook" class="headerlink" title="8.4.2 只在React 函数中调用Hook"></a>8.4.2 只在React 函数中调用Hook</h3><blockquote><p><strong>不要在普通的 JavaScript 函数中调用 Hook。</strong>你可以：</p><ul><li>在 React 的函数组件中调用 Hook</li><li>在自定义 Hook 中调用其他 Hook</li><li>在class组件中不能使用Hook</li></ul><p>遵循此规则，确保组件的状态逻辑在代码中清晰可见。</p></blockquote><h2 id="8-5-Hook参照文章："><a href="#8-5-Hook参照文章：" class="headerlink" title="8.5 Hook参照文章："></a>8.5 Hook参照文章：</h2><ol><li><a href="https://react-1251415695.cos-website.ap-chengdu.myqcloud.com/docs/getting-started.html" target="_blank" rel="noopener">React官方文档</a></li><li><a href="https://blog.csdn.net/sinat_17775997/article/details/94453167" target="_blank" rel="noopener">useMemo与useCallback使用指南</a></li><li><a href="https://blog.csdn.net/gtLBTNq9mr3/article/details/93984397" target="_blank" rel="noopener">useReducerde使用和原理</a></li><li><a href="https://segmentfault.com/a/1190000021133222" target="_blank" rel="noopener">五个大型项目实践总结，解密React Hooks最佳实践</a></li><li><a href="https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/" target="_blank" rel="noopener">useEffect完整指南</a></li><li><a href="https://zhuanlan.zhihu.com/p/88135310" target="_blank" rel="noopener">一文彻底搞懂 react hooks 的原理和实现</a></li><li><a href="https://www.jianshu.com/p/b9ac8fa849f1" target="_blank" rel="noopener">React Hooks的原理</a></li></ol><h1 id="9-React-router"><a href="#9-React-router" class="headerlink" title="9. React-router"></a>9. React-router</h1><h2 id="9-1-前端路由的两种实现方案"><a href="#9-1-前端路由的两种实现方案" class="headerlink" title="9.1 前端路由的两种实现方案"></a>9.1 前端路由的两种实现方案</h2><ol><li><p>hash : hash原本的作用是为一个很长的文档页添加锚点信息，它自带不改变url刷新页面的功能，所以自然而然被用单页面应用程序中了。</p></li><li><p>history : 应该说history是主流的解决方案，浏览器的前进后退用的就是这个，它是window对象下的，以前的history提供的方法只能做页面之间的前进后退，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">history.go(number|URL) 可加载历史列表中的某个具体的页面</span><br><span class="line">history.forward() 可加载历史列表中的下一个 URL</span><br><span class="line">history.back() 可加载历史列表中的前一个 URL</span><br></pre></td></tr></table></figure><p>为了在不刷新浏览器的情况下，创建新的浏览记录并插入浏览记录队列中，html5新增了如下方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. history.pushState(state, title, url)</span><br><span class="line">   添加一条历史记录， state用于传递参数，可以为空。title是设置历史记录的标题，可以为空。url是历史记录的URL，不可以为空。</span><br><span class="line"></span><br><span class="line">2.history.replaceState(state, title, url)</span><br><span class="line">将history堆栈中当前的记录替换成这里的url，参数同上。</span><br><span class="line"></span><br><span class="line">这个特性后来用到了单页面应用中比如：vue-router，react-router-dom里面。</span><br></pre></td></tr></table></figure></li></ol><h2 id="9-2-Reac中的路由"><a href="#9-2-Reac中的路由" class="headerlink" title="9.2 Reac中的路由"></a>9.2 Reac中的路由</h2><p><code>&lt;Router&gt;</code>是React中实现路由最外层的容器，一般情况下我们不再需要直接使用它，而是使用在它基础之上封装的几个适用于不同环境的组件，react-router-dom的Router有四种：</p><table><thead><tr><th>Router</th><th>适用情况</th></tr></thead><tbody><tr><td><a href="https://link.jianshu.com?t=https%3A%2F%2Freacttraining.com%2Freact-router%2Fweb%2Fapi%2FBrowserRouter" target="_blank" rel="noopener">BrowserRouter</a></td><td>react-router-dom扩展，利用HTML5 新增的history API (pushState, replaceState)，是web应用最常用的路由组件</td></tr><tr><td><a href="https://link.jianshu.com?t=https%3A%2F%2Freacttraining.com%2Freact-router%2Fweb%2Fapi%2FHashRouter" target="_blank" rel="noopener">HashRouter</a></td><td>react-router-dom扩展，利用window.location.hash，适用于低版本浏览器或者一些特殊情境</td></tr><tr><td><a href="https://link.jianshu.com?t=https%3A%2F%2Freacttraining.com%2Freact-router%2Fweb%2Fapi%2FMemoryRouter" target="_blank" rel="noopener">MemoryRouter</a></td><td>继承自react-router ，用户在地址栏看不到任何路径变化，一般用在测试或者非浏览器环境开发中</td></tr><tr><td><a href="https://link.jianshu.com?t=https%3A%2F%2Freacttraining.com%2Freact-router%2Fweb%2Fapi%2FStaticRouter" target="_blank" rel="noopener">StaticRouter</a></td><td>继承自react-router，某些页面从渲染出来以后没有多的交互，所以没有状态的变化需要存储，就可以使用静态路由，静态路由适用于服务器端</td></tr></tbody></table><p>一般我们很少会用到MemoryRouter和StaticRouter，在web应用中更多的是用   <code>react-router-dom</code>扩展出来的BrowserRouter和HashRouter，这两个就是我前面提到的前端路由的两种解决办法的各自实现。</p><h2 id="9-3-HashRouter的基本使用"><a href="#9-3-HashRouter的基本使用" class="headerlink" title="9.3 HashRouter的基本使用"></a>9.3 HashRouter的基本使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-router react-router-dom @types/react-router-dom</span><br><span class="line"></span><br><span class="line">#1.main.js </span><br><span class="line"><span class="comment">// 1. 导入包</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.jsx'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 render 函数渲染 虚拟DOM</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span>&gt;</span><span class="tag">&lt;/<span class="name">App</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>))</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">#2.App.jsx</span><br><span class="line"><span class="keyword">import</span> React, &#123; FC &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HashRouter 表示一个路由的跟容器，所有的路由相关的东西，都要包裹在 HashRouter 里面</span></span><br><span class="line"><span class="comment">// Route 表示一个路由规则， 在 Route 上有两个比较重要的属性：path   component</span></span><br><span class="line"><span class="comment">// Link 表示一个路由的链接 ，就好比 vue 中的 &lt;router-link to=""&gt;&lt;/router-link&gt;</span></span><br><span class="line"><span class="keyword">import</span> &#123; HashRouter, Route, Link &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./components6/Home'</span></span><br><span class="line"><span class="keyword">import</span> Movie <span class="keyword">from</span> <span class="string">'./components6/Movie'</span></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">'./components6/About'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App: FC&lt;&#123;&#125;&gt; = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 当 使用 HashRouter 把 App 根组件的元素包裹起来之后，网站就已经启用路由了</span></span><br><span class="line">  <span class="comment">// 在一个 HashRouter 中，只能有唯一的一个根元素</span></span><br><span class="line">  <span class="comment">// 在一个网站中，只需要使用 唯一的一次 &lt;HashRouter&gt;&lt;/HashRouter&gt; 就行了</span></span><br><span class="line">  <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">HashRouter</span>&gt;</span></span></span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;这是网站的APP根组件&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">      &lt;Link to="/home"&gt;首页&lt;/Link&gt;&amp;nbsp;&amp;nbsp;</span><br><span class="line">      &lt;Link to="/movie/top250/10"&gt;电影&lt;/Link&gt;&amp;nbsp;&amp;nbsp;</span><br><span class="line">      &lt;Link to="/about"&gt;关于&lt;/Link&gt;</span><br><span class="line"></span><br><span class="line">      &lt;hr /&gt;</span><br><span class="line"></span><br><span class="line">      &#123;/* Route 创建的标签，就是路由规则，其中 path 表示要匹配的路由，component 表示要展示的组件 */&#125;</span><br><span class="line">      &#123;/* 在 vue 中有个 router-view 的路由标签专门用来放置匹配到的路由组件的，但是在 react-router 中并没有类似于这样的标签，而是直接把 Route 标签当作的坑（占位符） */&#125;</span><br><span class="line">      &#123;/* Route 具有两种身份：1. 它是一个路由匹配规则； 2. 它是一个占位符，表示将来匹配到的组件都放到这个位置， 如果想让路由规则进行精确匹配，可以为 Route添加 exact 属性，表示启用精确匹配模式 */&#125;</span><br><span class="line">      &lt;Route path="/home" component=&#123;Home&#125;&gt;&lt;/Route&gt;</span><br><span class="line">      &#123;/* 注意：默认情况下，路由中的规则是模糊匹配的，如果路由可以部分匹配成功，就会展示这个路由对应的组件 */&#125;</span><br><span class="line">      &#123;/* 如果要匹配参数，可以在匹配规则中使用 : 修饰符，表示这个位置匹配到的是参数 */&#125;</span><br><span class="line">      &lt;Route path="/movie/:type/:id" component=&#123;Movie&#125; exact&gt;&lt;/Route&gt;</span><br><span class="line">      &lt;Route path="/about" component=&#123;About&#125;&gt;&lt;/Route&gt;</span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">HashRouter</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br><span class="line">                </span><br><span class="line">#3.components/Home.jsx    </span><br><span class="line"><span class="keyword">import</span> React, &#123; FC &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Home:FC&lt;&#123;&#125;&gt; = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Home;</span><br><span class="line"></span><br><span class="line">#4. components/Movie.jsx </span><br><span class="line"><span class="keyword">import</span> React, &#123; FC &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; RouteComponentProps &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"></span><br><span class="line">type ParamsProps = &#123;</span><br><span class="line">  type?: string | <span class="literal">undefined</span>,</span><br><span class="line">  id?: string | <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line">type IProps = &#123;</span><br><span class="line">  name?: string</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> Movie: FC&lt;IProps &amp; RouteComponentProps&lt;ParamsProps&gt;&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>电影--- &#123;props.match.params.type&#125; --- &#123;props.match.params.id&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Movie;</span><br><span class="line"></span><br><span class="line">#5. components/About.jsx</span><br><span class="line"><span class="keyword">import</span> React, &#123; FC &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> About:FC&lt;&#123;&#125;&gt; = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>关于我们<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> About;</span><br></pre></td></tr></table></figure><h2 id="9-4-匹配规则"><a href="#9-4-匹配规则" class="headerlink" title="9.4 匹配规则"></a>9.4 匹配规则</h2><p><strong>默认：</strong></p><table><thead><tr><th>路径</th><th>location.pathname</th><th>是否匹配</th></tr></thead><tbody><tr><td>/one</td><td>/one</td><td>是</td></tr><tr><td>/one</td><td>/one/</td><td>是</td></tr><tr><td>/one</td><td>/one/111</td><td>是</td></tr><tr><td>/one</td><td>/one/aaa/bbb</td><td>是</td></tr></tbody></table><p><strong>exact配置：</strong>exact属性为true时路径中的hash值必须和path完全一致才渲染对应的组件，如果为false则’/‘也可以匹配’/xxx’</p><table><thead><tr><th>路径</th><th>location.pathname</th><th>exact</th><th>是否匹配</th></tr></thead><tbody><tr><td>/one</td><td>/one/two</td><td>true</td><td>否</td></tr><tr><td>/one</td><td>/one/two</td><td>false</td><td>是</td></tr></tbody></table><p><strong>strict配置：</strong>strict属性主要就是匹配反斜杠，规定是否匹配末尾包含反斜杠的路径，如果strict为true，则如果path中不包含反斜杠结尾，则他也不能匹配包含反斜杠结尾的路径</p><table><thead><tr><th>路径</th><th>location.pathname</th><th>strict</th><th>是否匹配</th></tr></thead><tbody><tr><td>/one/</td><td>/one</td><td>true</td><td>否</td></tr><tr><td>/one/</td><td>/one/</td><td>true</td><td>是</td></tr><tr><td>/one/</td><td>/one/two</td><td>true</td><td>是</td></tr></tbody></table><h2 id="9-5-Switch和Redirect"><a href="#9-5-Switch和Redirect" class="headerlink" title="9.5 Switch和Redirect"></a>9.5 Switch和Redirect</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; HashRouter, Route, Link, Switch, Redirect &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">HashRouter</span>&gt;</span></span></span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;这是网站的APP根组件&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">      &lt;Link to="/home"&gt;首页&lt;/Link&gt;&amp;nbsp;&amp;nbsp;</span><br><span class="line">      &lt;Link to="/movie/top250/10"&gt;电影&lt;/Link&gt;&amp;nbsp;&amp;nbsp;</span><br><span class="line">      &lt;Link to="/about"&gt;关于&lt;/Link&gt;</span><br><span class="line"></span><br><span class="line">      &lt;hr /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">      &#123;/*<span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">       Switch表示路由互斥，如果没有Switch，会根据路由找到所有匹配的组件显示</span></span><br><span class="line"><span class="xml">       比如http://localhost:3000/#/user  会找到/、/user所匹配的路由(下面home没有找到是因为精确匹配了)</span></span><br><span class="line"><span class="xml">    */&#125;</span></span><br><span class="line">      &lt;Switch&gt;</span><br><span class="line">        &#123;/*</span><br><span class="line">        path:/ 表示访问根路径的情况下默认载入home组件</span><br><span class="line">        exact精确匹配，为了给其他组件一个机会获取到url改变</span><br><span class="line">        strict 在确定路径是否与当前URL匹配时，将考虑路径后的斜线；</span><br><span class="line">       */&#125;</span><br><span class="line">        &lt;Route path="/home" component=&#123;Home&#125;&gt;&lt;/Route&gt;</span><br><span class="line">        &lt;Route path="/movie/:type/:id" component=&#123;Movie&#125; exact&gt;&lt;/Route&gt;</span><br><span class="line">        &lt;Route path="/about" component=&#123;About&#125;&gt;&lt;/Route&gt;</span><br><span class="line">        &#123;/*没有匹配到路径的时候重定向到根路径*/&#125;</span><br><span class="line">        &lt;Redirect to="/" /&gt;</span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/HashRouter&gt;)</span></span><br></pre></td></tr></table></figure><h2 id="9-6-React中的编程式导航和路由传参"><a href="#9-6-React中的编程式导航和路由传参" class="headerlink" title="9.6 React中的编程式导航和路由传参"></a>9.6 React中的编程式导航和路由传参</h2><h3 id="9-6-1-withRouter的使用"><a href="#9-6-1-withRouter的使用" class="headerlink" title="9.6.1 withRouter的使用"></a>9.6.1 withRouter的使用</h3><p>withRouter可以包装任何自定义组件，将react-router 的 history,location,match 三个对象传入。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route exact path=<span class="string">"/Home"</span> component=&#123;Home&#125;/&gt;</span><br></pre></td></tr></table></figure><blockquote><p> 1.只有包裹在Route组件里的才能使用<code>props.location</code>，<br> 2.假如有个需求，是面包屑或者导航组件里需要拿到<code>props.location</code>（导航组件或者面包屑一般不会包裹在<code>Route</code>里），那么直接这么写显然就不行了。这个时候<code>withRouter</code>修饰一下，就可以这么写了。</p></blockquote><h3 id="9-6-2-使用withRouter跳转页面"><a href="#9-6-2-使用withRouter跳转页面" class="headerlink" title="9.6.2 使用withRouter跳转页面"></a>9.6.2 使用withRouter跳转页面</h3><blockquote><p>只有在 <Route> 包裹的组件中才能在 this.props 属性中找到 history 对象。但有些情况下我们就是希望在一个没被 <Route> 包裹的组件中用到 history 对象，我们可以这样用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Header.tsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; FC &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; RouteComponentProps, withRouter &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Header: FC&lt;RouteComponentProps&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> goAbout = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    props.history.push(&#123; <span class="attr">pathname</span>: <span class="string">"/about"</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    网页头</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;goAbout&#125;</span>&gt;</span>点我跳转About页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withRouter(Header);</span><br></pre></td></tr></table></figure><h3 id="9-6-3-路由传参"><a href="#9-6-3-路由传参" class="headerlink" title="9.6.3 路由传参"></a>9.6.3 路由传参</h3><p>TS 路由接口：RouteComponentProps</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; RouteComponentProps &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> RouterInfo &#123;</span><br><span class="line">  id: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (props: RouteComponentProps&lt;RouterInfo&gt;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1 className=&#123;styles.title&#125;&gt;Page productDetail/index ---&#123;props.match.params.id&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="a-params方式传参"><a href="#a-params方式传参" class="headerlink" title="a) params方式传参"></a>a) params方式传参</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">'/path/:name'</span> component=&#123;Path&#125;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;Link to=<span class="string">"/path/2"</span>&gt;xxx&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">props.history.push(&#123;pathname:"/</span>path/<span class="string">" + name&#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">读取参数用:props.match.params.name</span></span><br></pre></td></tr></table></figure><p>优势 ： 刷新地址栏，参数依然存在<br>缺点  :   只能传字符串，并且如果传的值太多的话，url会变得长而丑陋。</p><h4 id="b-search方式传参"><a href="#b-search方式传参" class="headerlink" title="b) search方式传参"></a>b) search方式传参</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">'/web/departManange '</span> component=&#123;DepartManange&#125;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;link to=<span class="string">"web/departManange?tenantId=12121212"</span>&gt;xxx&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">props.history.push(&#123;pathname:"/</span>web/departManange<span class="string">",search: 'tenantId=12121212'&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">读取参数用: props.location.search</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//search参数的解析</span></span><br><span class="line"><span class="string">yarn add url -S</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">import url from 'url'</span></span><br><span class="line"><span class="string">const httpUrl = props.location.search;</span></span><br><span class="line"><span class="string">url.parse(httpUrl, true).query.tenantId;</span></span><br></pre></td></tr></table></figure><p>优势 ： 刷新地址栏，参数依然存在</p><p>缺点  :   只能传字符串，并且如果传的值太多的话，url会变得长而丑陋。</p><h4 id="c-state方式传参"><a href="#c-state方式传参" class="headerlink" title="c) state方式传参"></a>c) state方式传参</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">'/sort '</span> component=&#123;Sort&#125;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;Link to=&#123;&#123; <span class="attr">pathname</span> : <span class="string">' /sort '</span> , <span class="attr">state</span> : &#123; <span class="attr">name</span> : <span class="string">'sunny'</span> &#125;&#125;&#125;&gt; </span><br><span class="line">props.history.push(&#123;<span class="attr">pathname</span>:<span class="string">"/sort "</span>,<span class="attr">state</span> : &#123; <span class="attr">name</span> : <span class="string">'sunny'</span> &#125;&#125;);</span><br><span class="line"></span><br><span class="line">读取参数用: props.location.state.name</span><br></pre></td></tr></table></figure><p>优势：传参优雅，传递参数可传对象，state传的参数是加密的<br>缺点：刷新地址栏，参数丢失</p><h2 id="9-7-组件懒加载和基于路由的代码分割"><a href="#9-7-组件懒加载和基于路由的代码分割" class="headerlink" title="9.7 组件懒加载和基于路由的代码分割"></a>9.7 组件懒加载和基于路由的代码分割</h2><p><code>React.lazy</code> 函数能让你像渲染常规组件一样处理动态引入（的组件）。</p><p><code>React.lazy</code> 接受一个函数，这个函数需要动态调用 <code>import()</code>。它必须返回一个 <code>Promise</code>，该 Promise 需要 resolve 一个 <code>defalut</code> export 的 React 组件。</p><p>然后应在 <code>Suspense</code> 组件中渲染 lazy 组件(Suspense 就是实现所谓的延迟加载效果)，如此使得我们可以使用在等待加载 lazy 组件时做优雅降级（如 loading 指示器等）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route, Switch &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> React, &#123; Suspense, lazy &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Home = lazy(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./routes/Home'</span>));</span><br><span class="line"><span class="keyword">const</span> About = lazy(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./routes/About'</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    <span class="comment">//fallback 属性接受任何在组件加载过程中你想展示的 React 元素</span></span><br><span class="line">    &lt;Suspense fallback=&#123;&lt;div&gt;Loading...&lt;<span class="regexp">/div&gt;&#125;&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Route exact path="/</span><span class="string">" component=&#123;Home&#125;/&gt;</span></span><br><span class="line"><span class="string">        &lt;Route path="</span>/about<span class="string">" component=&#123;About&#125;/&gt;</span></span><br><span class="line"><span class="string">      &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">    &lt;/Suspense&gt;</span></span><br><span class="line"><span class="string">  &lt;/Router&gt;</span></span><br><span class="line"><span class="string">);</span></span><br></pre></td></tr></table></figure><h1 id="10-高阶组件"><a href="#10-高阶组件" class="headerlink" title="10.高阶组件"></a>10.高阶组件</h1><h2 id="10-1-高阶函数"><a href="#10-1-高阶函数" class="headerlink" title="10.1 高阶函数"></a>10.1 高阶函数</h2><p><strong>高阶函数是一个函数，它接收函数作为参数或将函数作为输出返回</strong></p><ul><li><p>举个栗子:</p><ul><li><p>接收函数作为参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function a(x) &#123;</span><br><span class="line">  x();</span><br><span class="line">&#125;</span><br><span class="line">function b() &#123;</span><br><span class="line">  alert(&#39;hello&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a(b);</span><br></pre></td></tr></table></figure></li><li><p>将函数作为输出返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function a() &#123;</span><br><span class="line">  function b() &#123;</span><br><span class="line">    alert(&#39;hello&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">  return b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a()();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>以上函数a就是一个高阶函数, 用法非常简单, 那么实际开发中又有哪些是高阶函数呢？</p><ul><li>Array 的 map 、reduce 、filter 等方法</li><li>Object 的 keys 、values 等方法</li></ul></li></ul><h2 id="10-2-高阶组件"><a href="#10-2-高阶组件" class="headerlink" title="10.2 高阶组件"></a>10.2 高阶组件</h2><ul><li>概念：<strong>高阶组件就是一个函数，且该函数接受一个组件作为参数，并返回一个新的组件</strong></li></ul><blockquote><p>高阶组件可以看做是装饰器模式(Decorator Pattern)在React的实现。即允许向一个现有的对象添加新的功能，同时又不改变其结构，属于包装模式(Wrapper Pattern)的一种。最大的特点就是重用组件逻辑</p></blockquote><h3 id="10-2-1-高阶组件的实现方式-属性代理"><a href="#10-2-1-高阶组件的实现方式-属性代理" class="headerlink" title="10.2.1 高阶组件的实现方式-属性代理"></a>10.2.1 高阶组件的实现方式-属性代理</h3><p>属性代理(Props Proxy)：<code>HOC</code>是包裹在普通组件外面的一层高阶函数，任何要传入普通组件内的<code>props</code> 或者 <code>state</code> 首先都要经过 <code>HOC</code>。</p><p><code>props</code>和 <code>state</code>等属性原本是要流向 目标组件的腰包的，但是却被 雁过拔毛的<code>HOC</code>拦路打劫，那么最终这些 <code>props</code>和 <code>states</code>数据到底还能不能再到达 目标组件，或者哪些能到达以及到达多少就全由 <code>HOC</code>说了算了，也就是说，<code>HOC</code>拥有了提前对这些属性进行修改的能力。</p><p>属性代理的作用：</p><ul><li>更改prop</li><li>通过refs获取组件实例(类组件)</li><li>抽象state</li><li>把WrappedComponent与其他elements包装在一起</li></ul><h4 id="a-属性代理-用其他元素包装组件"><a href="#a-属性代理-用其他元素包装组件" class="headerlink" title="a) 属性代理-用其他元素包装组件"></a>a) 属性代理-用其他元素包装组件</h4><p>为了封装样式、布局或别的目的，可以用其它组件和元素包裹 WrappedComponent。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//被包裹组件</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; SFC &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> HocComponent <span class="keyword">from</span> <span class="string">'../HOC/HocComponent'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyComponent: SFC&lt;&#123;&#125;&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>被包裹组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> HocComponent(MyComponent);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//高阶组件</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; SFC &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">HocComponent</span>(<span class="params">WrappedComponent: SFC&lt;&#123;&#125;&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> NewComponent: SFC&lt;&#123;&#125;&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> "<span class="attr">red</span>" &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> NewComponent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="b-属性代理-更改props"><a href="#b-属性代理-更改props" class="headerlink" title="b) 属性代理-更改props"></a>b) 属性代理-更改props</h4><p>在高阶组件中添加新的 props，可以在 WrappedComponent 中通过 this.props.name访问到。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MyComponent.tsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; SFC &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> HocComponent <span class="keyword">from</span> <span class="string">'../HOC/HocComponent'</span></span><br><span class="line"><span class="keyword">import</span> &#123; PrametersType &#125; <span class="keyword">from</span> <span class="string">'../HOC/Type'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyComponent: SFC&lt;PrametersType&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello React ---- &#123;props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> HocComponent(MyComponent);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//HocComponent.tsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; SFC &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; PrametersType &#125; <span class="keyword">from</span> <span class="string">'./Type'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">HocComponent</span>(<span class="params">WrappedComponent: SFC&lt;PrametersType&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> NewComponent: SFC&lt;PrametersType&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...props</span>&#125;&gt;</span><span class="tag">&lt;/<span class="name">WrappedComponent</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> NewComponent;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Type.tsx</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> type PrametersType = &#123;</span><br><span class="line">  name?:string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="c-属性代理-抽取公共state"><a href="#c-属性代理-抽取公共state" class="headerlink" title="c) 属性代理-抽取公共state"></a>c) 属性代理-抽取公共state</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MyInput.tsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; SFC, useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyInput: SFC&lt;&#123;&#125;&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = useState&lt;string&gt;(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleChange = <span class="function">(<span class="params">e: React.ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    setValue(e.target.value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyInput;</span><br><span class="line"></span><br><span class="line">          </span><br><span class="line"><span class="comment">//MyTextArea.tsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; SFC, useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyTextArea: SFC&lt;&#123;&#125;&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = useState&lt;string&gt;(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleChange = <span class="function">(<span class="params">e: React.ChangeEvent&lt;HTMLTextAreaElement&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    setValue(e.target.value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyTextArea;</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line"><span class="comment">//index.tsx</span></span><br><span class="line"><span class="keyword">import</span> MyInput <span class="keyword">from</span> <span class="string">'./components7/MyInput'</span></span><br><span class="line"><span class="keyword">import</span> MyTextArea <span class="keyword">from</span> <span class="string">'./components7/MyTextArea'</span></span><br><span class="line">          </span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">MyInput</span>&gt;</span><span class="tag">&lt;/<span class="name">MyInput</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">MyTextArea</span>&gt;</span><span class="tag">&lt;/<span class="name">MyTextArea</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//这边代码存在的问题：MyInput和MyTextArea组件都有自己的state和change方法，代码重用性太大</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MyInput.tsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; SFC &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;TextPrametersType&#125; <span class="keyword">from</span> <span class="string">'../HOC/Type'</span></span><br><span class="line"><span class="keyword">import</span> HocTextComponent <span class="keyword">from</span> <span class="string">'../HOC/HocTextComponent'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyInput: SFC&lt;TextPrametersType&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;props.value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;props.change&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> HocTextComponent(MyInput);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//MyTextArea.tsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; SFC &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;TextPrametersType&#125; <span class="keyword">from</span> <span class="string">'../HOC/Type'</span></span><br><span class="line"><span class="keyword">import</span> HocTextComponent <span class="keyword">from</span> <span class="string">'../HOC/HocTextComponent'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyTextArea: SFC&lt;TextPrametersType&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">value</span>=<span class="string">&#123;props.value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;props.change&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyTextArea;</span><br><span class="line">      </span><br><span class="line">          </span><br><span class="line"><span class="comment">//HocTextComponent.tsx      </span></span><br><span class="line"><span class="keyword">import</span> React, &#123; SFC, useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; TextPrametersType &#125; <span class="keyword">from</span> <span class="string">'./Type'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">HocTextComponent</span>(<span class="params">WrappedComponent: SFC&lt;TextPrametersType&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> NewComponent: React.FC&lt;TextPrametersType&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [value, setValue] = useState&lt;string&gt;(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">const</span> handleChange = <span class="function">(<span class="params">e: React.ChangeEvent&lt;HTMLInputElement|HTMLTextAreaElement&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">      setValue(e.target.value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> newProps = &#123;</span><br><span class="line">      value: value,</span><br><span class="line">      change: handleChange</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...props</span>&#125; &#123;<span class="attr">...newProps</span>&#125;&gt;</span><span class="tag">&lt;/<span class="name">WrappedComponent</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> NewComponent;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//Type.tsx</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> type TextPrametersType = &#123;</span><br><span class="line">  value?:string,</span><br><span class="line">  change?(e: React.ChangeEvent):<span class="keyword">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-2-2-高阶组件的实现方式-反向继承"><a href="#10-2-2-高阶组件的实现方式-反向继承" class="headerlink" title="10.2.2 高阶组件的实现方式-反向继承"></a>10.2.2 高阶组件的实现方式-反向继承</h3><p>反向继承( Inheritance Inversion )：返回的 HOC 类（Enhancer）继承了 WrappedComponent。之所以被称为 Inheritance Inversion 是因为 WrappedComponent 被 Enhancer 继承了，而不是 WrappedComponent 继承了 Enhancer。在这种方式中，它们的关系看上去被反转（inverse）了。</p><p>通过继承WrappedComponent，除了一些静态方法，包括生命周期，state，各种function，我们都可以得到。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iiHOC</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">Enhancer</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.render()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反向继承的作用：</p><ul><li>渲染劫持</li><li>操作state</li></ul><h4 id="a-反向继承-渲染劫持"><a href="#a-反向继承-渲染劫持" class="headerlink" title="a) 反向继承-渲染劫持"></a>a) 反向继承-渲染劫持</h4><p>之所以被称为渲染劫持是因为 HOC 控制着 WrappedComponent 的渲染输出，可以用它做各种各样的事。通过渲染劫持可以：</p><ul><li>在由 render输出的任何 React 元素中读取、添加、编辑、删除 props</li><li>读取和修改由 render 输出的 React 元素树</li><li>有条件地渲染元素树</li><li>把样式包裹进元素树（就像在 Props Proxy 中的那样）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.svg'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">name</span>=<span class="string">"pp"</span>&gt;</span>被包裹组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">iiHOC</span>(<span class="params">WrappedComponent: React.ComponentClass</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">Enhancer</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="comment">//super.render() 调用父类的渲染方法  获取到父类的渲染结果</span></span><br><span class="line">      <span class="keyword">const</span> elementsTree = <span class="keyword">super</span>.render();</span><br><span class="line">      <span class="comment">//在父亲的渲染结果上新增一个属性</span></span><br><span class="line">      <span class="keyword">let</span> newProps = &#123; <span class="attr">style</span>: &#123; <span class="attr">color</span>: <span class="string">"red"</span> &#125; &#125;;</span><br><span class="line">      <span class="comment">//elementsTree as ReactElement 类型推导</span></span><br><span class="line">      <span class="keyword">const</span> props = elementsTree &amp;&amp; (elementsTree <span class="keyword">as</span> ReactElement).props;</span><br><span class="line">      <span class="keyword">const</span> p = <span class="built_in">Object</span>.assign(&#123;&#125;, props, newProps);</span><br><span class="line">      <span class="keyword">const</span> newElement = React.cloneElement(</span><br><span class="line">        elementsTree <span class="keyword">as</span> ReactElement,</span><br><span class="line">        p,</span><br><span class="line">        props.children</span><br><span class="line">      );</span><br><span class="line">      <span class="comment">//返回新的页面</span></span><br><span class="line">      <span class="keyword">return</span> newElement;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> NewComponent = iiHOC(MyComponent)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;NewComponent&gt;&lt;<span class="regexp">/NewComponent&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><h4 id="b-反向继承-修改state"><a href="#b-反向继承-修改state" class="headerlink" title="b) 反向继承-修改state"></a>b) 反向继承-修改state</h4><p>HOC 可以读取、编辑和删除 WrappedComponent 实例的 state，如果需要，也可以给它添加更多的 state。但是这会搞乱 WrappedComponent 的 state，可能会导致破坏某些东西，通常不建议使用高阶组件修改添加state。</p><p>下面通过访问 WrappedComponent 的 props 和 state 来做测试。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">IIHOCDEBUGGER</span>(<span class="params">WrappedComponent: React.ComponentClass</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">II</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;h2&gt;HOC Debugger Component&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">          &lt;p&gt;Props&lt;/</span>p&gt; <span class="xml"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>&#123;JSON.stringify(this.props)&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span></span><br><span class="line">          &lt;p&gt;State&lt;<span class="regexp">/p&gt;&lt;pre&gt;&#123;JSON.stringify(this.state)&#125;&lt;/</span>pre&gt;</span><br><span class="line">          &#123;<span class="keyword">super</span>.render()&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="11-安装-React-Developer-Tools-调试工具"><a href="#11-安装-React-Developer-Tools-调试工具" class="headerlink" title="11.安装 React Developer Tools 调试工具"></a>11.安装 React Developer Tools 调试工具</h1><p><a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=zh-CN" target="_blank" rel="noopener">React Developer Tools - Chrome 扩展下载安装地址</a></p><h1 id="12-相关文章"><a href="#12-相关文章" class="headerlink" title="12. 相关文章"></a>12. 相关文章</h1><ul><li><a href="https://mp.weixin.qq.com/s/gV-w_rRfdBVAqsOpBGZaVw" target="_blank" rel="noopener">2018 年，React 将独占前端框架鳌头？</a></li><li><a href="https://mp.weixin.qq.com/s/0wXWqKIigaKzMSfy4vJMVw" target="_blank" rel="noopener">前端框架三巨头年度走势对比：Vue 增长率最高</a></li></ul><ul><li><a href="http://www.cnblogs.com/tim100/p/6050514.html" target="_blank" rel="noopener">React数据流和组件间的沟通总结</a></li><li><a href="https://segmentfault.com/q/1010000005876655/a-1020000005876751" target="_blank" rel="noopener">单向数据流和双向绑定各有什么优缺点？</a></li><li><a href="https://www.zhihu.com/question/29504639?sort=created" target="_blank" rel="noopener">怎么更好的理解虚拟DOM?</a></li><li><a href="http://www.css88.com/react/index.html" target="_blank" rel="noopener">React中文文档 - 版本较低</a></li><li><a href="http://blog.csdn.net/yczz/article/details/49886061" target="_blank" rel="noopener">React 源码剖析系列 － 不可思议的 react diff</a></li><li><a href="http://www.infoq.com/cn/articles/react-dom-diff?from=timeline&isappinstalled=0" target="_blank" rel="noopener">深入浅出React（四）：虚拟DOM Diff算法解析</a></li><li><a href="http://www.cocoachina.com/webapp/20150721/12692.html" target="_blank" rel="noopener">一看就懂的ReactJs入门教程（精华版）</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/06/css_modules.html" target="_blank" rel="noopener">CSS Modules 用法教程</a></li><li><a href="http://blog.csdn.net/itzhongzi/article/details/66045880" target="_blank" rel="noopener">将MarkDown转换为HTML页面</a></li><li><a href="https://jingyan.baidu.com/article/0320e2c1c9cf0e1b87507b26.html" target="_blank" rel="noopener">win7命令行 端口占用 查询进程号 杀进程</a></li><li><a href="https://facebook.github.io/react/docs/typechecking-with-proptypes.html" target="_blank" rel="noopener">类型校验</a></li></ul><ul><li><a href="https://reactjs.org/docs/animation.html#high-level-api-reactcsstransitiongroup" target="_blank" rel="noopener">Animation Add-Ons</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>浅谈TypeScript</title>
      <link href="/2020/06/23/typescript/"/>
      <url>/2020/06/23/typescript/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><h2 id="1-1-TS简介"><a href="#1-1-TS简介" class="headerlink" title="1.1 TS简介"></a>1.1 TS简介</h2><p>TypeScript 是 JavaScript 的强类型版本。然后在编译期去掉类型和特有语法，生成纯粹的 JavaScript 代码。由于最终在浏览器中运行的仍然是 JavaScript，所以 TypeScript 并不依赖于浏览器的支持，也并不会带来兼容性问题。</p><p>TypeScript 是 JavaScript 的超集，这意味着他支持所有的 JavaScript 语法。并在此之上对 JavaScript 添加了一些扩展，如 class / interface / module 等。这样会大大提升代码的可阅读性。</p><p>和 JavaScript 弱类型不同，TypeScript 这种强类型语言最大的优势在于静态类型检查，可以在代码开发阶段就预知一些低级错误的发生。</p><ul><li>一种类似于 JavaScript 的语言，在 JavaScript 的基础之上增加了类型，同时增强了 JavaScript 部分语法功能</li><li>遵循 EcmaScript 6 标准规范</li><li>由微软开发</li><li>Angular 2 框架采用 TypeScript 编写</li><li>背后有微软和谷歌两大公司的支持</li><li>TypeScript 可以编译成 JavaScript 从而在支持 JavaScript 的环境中运行</li><li>TypeScript 和 JavaScript 的关系就好比 less 和 css 的关系</li></ul><p>TypeScript 中文网     <a href="https://www.tslang.cn/" target="_blank" rel="noopener">https://www.tslang.cn/</a></p><p>在线编译环境              <a href="https://www.typescriptlang.org/play/index.html" target="_blank" rel="noopener">https://www.typescriptlang.org/play/index.html</a></p><h2 id="1-2-TS环境搭建"><a href="#1-2-TS环境搭建" class="headerlink" title="1.2 TS环境搭建"></a>1.2 TS环境搭建</h2><ol><li>打开命令行，键入<code>npm i -g typescript</code> 全局安装TS</li><li>继续在命令行环境下键入 <code>tsc -init</code> 进行初始化，<br>你会发现根目录下多了 tsconfig.json 的文件，记录了编译成JS的选项</li><li>创建ts文件</li><li>打开VSCode进入该目录，按下 Ctrl+shift+B 快捷键会进行编译，初次编译会选择编译模式</li><li>输入node命令运行js代码</li></ol><h2 id="1-3-变量声明"><a href="#1-3-变量声明" class="headerlink" title="1.3 变量声明"></a>1.3 变量声明</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span></span><br><span class="line">- 作用域 : 全局作用域、函数作用域</span><br><span class="line">- 重复声明</span><br><span class="line">- 变量提升</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span></span><br><span class="line">- 块级作用域</span><br><span class="line">- 在同一个块中不能重复声明</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span></span><br><span class="line">- 声明同时必须赋值</span><br><span class="line">- 一旦声明不可改变（对象可以修改）</span><br><span class="line">- 块级作用域</span><br></pre></td></tr></table></figure><h2 id="1-4-基本数据类型"><a href="#1-4-基本数据类型" class="headerlink" title="1.4 基本数据类型"></a>1.4 基本数据类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串</span></span><br><span class="line"><span class="keyword">var</span> uname:<span class="built_in">string</span> = <span class="string">"zhangsan"</span>;</span><br><span class="line"><span class="keyword">let</span> nickname: <span class="built_in">string</span> = <span class="string">'张三'</span>;</span><br><span class="line"><span class="keyword">let</span> isDone: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> age: <span class="built_in">number</span> = <span class="number">37</span>;</span><br><span class="line"><span class="keyword">let</span> sentence: <span class="built_in">string</span> = <span class="string">`Hello, my nickname is <span class="subst">$&#123; nickname &#125;</span>.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">I'll be <span class="subst">$&#123; age + <span class="number">1</span> &#125;</span> years old next month.`</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组</span></span><br><span class="line"><span class="comment">//TypeScript像JavaScript一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上[]，表示由此类型元素组成的一个数组：</span></span><br><span class="line"><span class="keyword">let</span> list: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种方式是使用数组泛型，Array&lt;元素类型&gt;：</span></span><br><span class="line"><span class="keyword">let</span> list: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ts的数组只能存放单一数据类型的元素，元组则可以很好的解决此问题。</span></span><br><span class="line"><span class="comment">//元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为string和number类型的元组。</span></span><br><span class="line"><span class="comment">// Declare a tuple type</span></span><br><span class="line"><span class="keyword">let</span> x: [string, number];</span><br><span class="line"><span class="comment">// Initialize it</span></span><br><span class="line">x = [<span class="string">'hello'</span>, <span class="number">10</span>]; <span class="comment">// OK</span></span><br><span class="line"><span class="comment">// Initialize it incorrectly</span></span><br><span class="line">x = [<span class="number">10</span>, <span class="string">'hello'</span>]; <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//object类型</span></span><br><span class="line">- 允许赋任意值</span><br><span class="line">- 但是不能调用任意方法，即便它真的有</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo: object = &#123;</span><br><span class="line">  name: <span class="string">'Jack'</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//知道即可，用的很少，没有类型校验和语法提示</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Any</span></span><br><span class="line"><span class="comment">//有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用 any类型来标记这些变量：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> notSure: any = <span class="number">4</span>;</span><br><span class="line">notSure = <span class="string">"maybe a string instead"</span>;</span><br><span class="line">notSure = <span class="literal">false</span>; <span class="comment">// okay, definitely a boolean</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Void 类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//void类型像是与any类型相反，它表示没有任何类型。 当一个函数没有返回值时，你通常会见到其返回值类型是 void：</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">warnUser</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  alert(<span class="string">"This is my warning message"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个void类型的变量没有什么大用，因为你只能为它赋予undefined：</span></span><br><span class="line"><span class="keyword">let</span> unusable: <span class="keyword">void</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Null 和 Undefined</span></span><br><span class="line"><span class="comment">// Not much else we can assign to these variables!</span></span><br><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//never</span></span><br><span class="line">never 是其它类型（包括 <span class="literal">null</span> 和 <span class="literal">undefined</span>）的子类型，代表从不会出现的值。</span><br><span class="line"><span class="keyword">let</span> x: never;</span><br><span class="line"><span class="keyword">let</span> y: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行错误，数字类型不能转为 never 类型</span></span><br><span class="line">x = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// 运行正确，never 类型可以赋值给 never类型</span></span><br><span class="line">x = <span class="function">(<span class="params">(<span class="params"></span>)=&gt;&#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="params">'exception'</span>)&#125;</span>)<span class="params">()</span>;</span></span><br><span class="line"><span class="function">// 运行正确，<span class="params">never</span> 类型可以赋值给 数字类型</span></span><br><span class="line"><span class="function"><span class="params">y</span> = (<span class="params">(<span class="params"></span>)=&gt;&#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="params">'exception'</span>)&#125;</span>)<span class="params">()</span>;</span></span><br><span class="line"><span class="function">// 返回值为 <span class="params">never</span> 的函数可以是抛出异常的情况</span></span><br><span class="line"><span class="function"><span class="params">function</span> <span class="params">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="params">never</span> &#123;</span></span><br><span class="line"><span class="function">    <span class="params">throw</span> <span class="params">new</span> <span class="params">Error</span>(<span class="params">message</span>);</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function">// 返回值为 <span class="params">never</span> 的函数可以是无法被执行到的终止点的情况</span></span><br><span class="line"><span class="function"><span class="params">function</span> <span class="params">loop</span><span class="params">()</span>: <span class="params">never</span> &#123;</span></span><br><span class="line"><span class="function">    <span class="params">while</span> (<span class="params"><span class="literal">true</span></span>) &#123;&#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类型推断</span></span><br><span class="line"><span class="comment">// 有时候你会遇到这样的情况，你会比TypeScript更了解某个值的详细信息。 通常这会发生在你清楚地知道一个实体具有比它现有类型更确切的类型。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 TypeScript会假设你，程序员，已经进行了必须的检查。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型断言有两种形式。 其一是“尖括号”语法：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> someValue: <span class="built_in">any</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).length;</span><br><span class="line"></span><br><span class="line"><span class="comment">//另一个为as语法：</span></span><br><span class="line"><span class="keyword">let</span> someValue: <span class="built_in">any</span> = <span class="string">"this is a string"</span>;</span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).length;</span><br><span class="line"></span><br><span class="line"><span class="comment">//两种形式是等价的。 至于使用哪个大多数情况下是凭个人喜好；然而，当你在TypeScript里使用JSX时，只有 as语法断言是被允许的。</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//枚举类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Color &#123;Red, Green, Blue&#125;;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Blue;</span><br><span class="line"><span class="built_in">console</span>.log(c);    <span class="comment">// 输出 2</span></span><br></pre></td></tr></table></figure><h2 id="1-5-解构赋值"><a href="#1-5-解构赋值" class="headerlink" title="1.5 解构赋值"></a>1.5 解构赋值</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组解构</span></span><br><span class="line"><span class="keyword">let</span> input = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> [first, second] = input;</span><br><span class="line"><span class="built_in">console</span>.log(first); <span class="comment">// outputs 1</span></span><br><span class="line"><span class="built_in">console</span>.log(second); <span class="comment">// outputs 2</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上面的写法等价于：</span></span><br><span class="line">first = input[<span class="number">0</span>];</span><br><span class="line">second = input[<span class="number">1</span>];</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用解构赋值交换变量：</span></span><br><span class="line">[first, second] = [second, first];</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数参数解构：</span></span><br><span class="line"><span class="comment">//函数参数解构：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ff</span>(<span class="params">[first, second]: [<span class="built_in">number</span>, <span class="built_in">number</span>]</span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log(first)</span><br><span class="line">  <span class="built_in">console</span>.log(second)</span><br><span class="line">&#125;</span><br><span class="line">ff([<span class="number">1</span>,<span class="number">2</span>])</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解构剩余参数：</span></span><br><span class="line"><span class="keyword">let</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="built_in">console</span>.log(first) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(rest) <span class="comment">// [2, 3, 4]</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//也可以忽略其它参数：</span></span><br><span class="line"><span class="keyword">let</span> [first] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(first); <span class="comment">// outputs 1</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//或者跳过解构：</span></span><br><span class="line"><span class="keyword">let</span> [, second, , fourth] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象解构</span></span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">    a: <span class="string">"foo"</span>,</span><br><span class="line">    b: <span class="number">12</span>,</span><br><span class="line">    c: <span class="string">"bar"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//let &#123; a, b &#125; = o;</span></span><br><span class="line"><span class="comment">//let &#123;a, b&#125;: &#123;a: string, b: number&#125; = o;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//你可以在对象里使用 ... 语法创建剩余变量：</span></span><br><span class="line"><span class="keyword">let</span> &#123; a, ...passthrough &#125; = o;</span><br><span class="line"><span class="keyword">let</span> total = passthrough.b + passthrough.c.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">//属性解构重命名</span></span><br><span class="line"><span class="comment">//你也可以给属性以不同的名字：</span></span><br><span class="line"><span class="keyword">let</span> &#123; a: newName1, b: newName2 &#125; = o;</span><br></pre></td></tr></table></figure><h2 id="1-6-展开操作符-…"><a href="#1-6-展开操作符-…" class="headerlink" title="1.6 展开操作符 (…)"></a>1.6 展开操作符 (…)</h2><ul><li>展开数组</li><li>展开对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr1, ...arr2];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;</span><br><span class="line"><span class="keyword">let</span> obj3 = &#123; ...obj1, ...obj2 &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(arr3,obj3)</span><br></pre></td></tr></table></figure><h2 id="1-7-函数"><a href="#1-7-函数" class="headerlink" title="1.7 函数"></a>1.7 函数</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数参数</span></span><br><span class="line"><span class="comment">//参数及返回值类型</span></span><br><span class="line"><span class="comment">//function 函数名字(参数1,参数2,参数3):函数返回值&#123;函数体&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可选参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y?: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span> = 20</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//剩余参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...args: <span class="built_in">number</span>[]</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ret: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">    args.forEach((item: <span class="built_in">number</span>): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">        ret += item</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line"><span class="keyword">let</span> add = (x: <span class="built_in">number</span>, y: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> x + y</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数重载：重载是方法名字相同，而参数不同，返回类型可以相同也可以不同。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//参数类型不同：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disp</span>(<span class="params"><span class="built_in">string</span></span>):<span class="title">void</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disp</span>(<span class="params"><span class="built_in">number</span></span>):<span class="title">void</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//参数数量不同：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disp</span>(<span class="params">n1:<span class="built_in">number</span></span>):<span class="title">void</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disp</span>(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>):<span class="title">void</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//参数类型顺序不同：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disp</span>(<span class="params">n1:<span class="built_in">number</span>,s1:<span class="built_in">string</span></span>):<span class="title">void</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disp</span>(<span class="params">s:<span class="built_in">string</span>,n:<span class="built_in">number</span></span>):<span class="title">void</span></span>;</span><br></pre></td></tr></table></figure><h2 id="1-8-联合类型"><a href="#1-8-联合类型" class="headerlink" title="1.8 联合类型"></a>1.8 联合类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//联合类型（Union Types）可以通过管道(|)将变量设置多种类型，赋值时可以根据设置的类型来赋值。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> val:<span class="built_in">string</span>|<span class="built_in">number</span> </span><br><span class="line">val = <span class="number">12</span> </span><br><span class="line">val = <span class="string">"Runoob"</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr:<span class="built_in">number</span>[]|<span class="built_in">string</span>[]; </span><br><span class="line"><span class="keyword">var</span> i:<span class="built_in">number</span>; </span><br><span class="line">arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>] </span><br><span class="line">arr = [<span class="string">"Runoob"</span>,<span class="string">"Google"</span>,<span class="string">"Taobao"</span>]</span><br></pre></td></tr></table></figure><h2 id="1-9-类"><a href="#1-9-类" class="headerlink" title="1.9 类"></a>1.9 类</h2><h3 id="1-9-1-类的基本使用"><a href="#1-9-1-类的基本使用" class="headerlink" title="1.9.1 类的基本使用"></a>1.9.1 类的基本使用</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本示例</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sayHello() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> zs: Person = <span class="keyword">new</span> Person(<span class="string">'张三'</span>, <span class="number">18</span>);</span><br></pre></td></tr></table></figure><h3 id="1-8-2-super关键字的使用"><a href="#1-8-2-super关键字的使用" class="headerlink" title="1.8.2 super关键字的使用"></a>1.8.2 super关键字的使用</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承</span></span><br><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    move(distanceInMeters: <span class="built_in">number</span> = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Animal moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    bark() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Woof! Woof!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog();</span><br><span class="line">dog.bark();</span><br><span class="line">dog.move(<span class="number">10</span>);</span><br><span class="line">dog.bark();</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个例子展示了最基本的继承：类从基类中继承了属性和方法。 这里， Dog是一个 派生类，它派生自 Animal 基类，通过 extends关键字。 派生类通常被称作 子类，基类通常被称作 超类。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//因为 Dog继承了 Animal的功能，因此我们可以创建一个 Dog的实例，它能够 bark()和 move()。</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面是一个更复杂的例子：</span></span><br><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; </span><br><span class="line">        <span class="keyword">this</span>.name = theName; </span><br><span class="line">    &#125;</span><br><span class="line">    move(distanceInMeters: <span class="built_in">number</span> = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Snake <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123; </span><br><span class="line">        <span class="keyword">super</span>(name); </span><br><span class="line">    &#125;</span><br><span class="line">    move(distanceInMeters = <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Slithering..."</span>);</span><br><span class="line">        <span class="keyword">super</span>.move(distanceInMeters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Horse <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123; </span><br><span class="line">        <span class="keyword">super</span>(name); </span><br><span class="line">    &#125;</span><br><span class="line">    move(distanceInMeters = <span class="number">45</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Galloping..."</span>);</span><br><span class="line">        <span class="keyword">super</span>.move(distanceInMeters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sam = <span class="keyword">new</span> Snake(<span class="string">"Sammy the Python"</span>);</span><br><span class="line"><span class="keyword">let</span> tom: Animal = <span class="keyword">new</span> Horse(<span class="string">"Tommy the Palomino"</span>);</span><br><span class="line"></span><br><span class="line">sam.move();</span><br><span class="line">tom.move(<span class="number">34</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//与前一个例子的不同点是，派生类包含了一个构造函数，它 必须调用 super()，它会执行基类的构造函数。 而且，在构造函数里访问 this的属性之前，我们 一定要调用 super()。 这个是TypeScript强制执行的一条重要规则。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这个例子演示了如何在子类里可以重写父类的方法。 Snake类和 Horse类都创建了 move方法，它们重写了从Animal继承来的 move方法，使得 move方法根据不同的类而具有不同的功能。 注意，即使 tom被声明为Animal类型，但因为它的值是 Horse，调用 tom.move(34)时，它会调用 Horse里重写的方法：</span></span><br><span class="line"></span><br><span class="line">Slithering...</span><br><span class="line">Sammy the Python moved <span class="number">5</span>m.</span><br><span class="line">Galloping...</span><br><span class="line">Tommy the Palomino moved <span class="number">34</span>m.</span><br></pre></td></tr></table></figure><h3 id="1-9-3-成员修饰符"><a href="#1-9-3-成员修饰符" class="headerlink" title="1.9.3 成员修饰符"></a>1.9.3 成员修饰符</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//public 公共的</span></span><br><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; </span><br><span class="line">        <span class="keyword">this</span>.name = theName; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> move(distanceInMeters: <span class="built_in">number</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//private 私有的</span></span><br><span class="line">- 不能被外部访问，只能在类的内部访问使用</span><br><span class="line">- 私有成员不会被继承</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">public</span> age: <span class="built_in">number</span> = <span class="number">18</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">type</span>: <span class="built_in">string</span> = <span class="string">'human'</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">constructor</span> (<span class="params">name:<span class="built_in">string</span>, age:<span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//protected 受保护的</span></span><br><span class="line">- 和 <span class="keyword">private</span> 类似，但是可以被继承</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">protected</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123; </span><br><span class="line">        <span class="keyword">this</span>.name = name; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Employee <span class="keyword">extends</span> Person &#123;</span><br><span class="line">    <span class="keyword">private</span> department: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, department: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name)</span><br><span class="line">        <span class="keyword">this</span>.department = department;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> getElevatorPitch() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Hello, my name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> and I work in <span class="subst">$&#123;<span class="keyword">this</span>.department&#125;</span>.`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> howard = <span class="keyword">new</span> Employee(<span class="string">"Howard"</span>, <span class="string">"Sales"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(howard.getElevatorPitch());</span><br><span class="line"><span class="built_in">console</span>.log(howard.name); <span class="comment">// 错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意，我们不能在 Person类外使用 name，但是我们仍然可以通过 Employee类的实例方法访问，因为Employee是由 Person派生而来的。</span></span><br></pre></td></tr></table></figure><h3 id="1-9-4-getter和setter"><a href="#1-9-4-getter和setter" class="headerlink" title="1.9.4 getter和setter"></a>1.9.4 getter和setter</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    private _name:string;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(name: string)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>._name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> name(value:string) &#123;<span class="keyword">this</span>._name = value;&#125;</span><br><span class="line">    <span class="keyword">get</span> name() &#123;<span class="keyword">return</span> <span class="keyword">this</span>._name;&#125;</span><br><span class="line"></span><br><span class="line">    talk()</span><br><span class="line">    &#123;</span><br><span class="line">        alert(<span class="string">"Hi, my name is "</span> + <span class="keyword">this</span>.name + <span class="string">"!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-9-5-静态成员"><a href="#1-9-5-静态成员" class="headerlink" title="1.9.5 静态成员"></a>1.9.5 静态成员</h3><ul><li>不需要实例化访问的成员称之为静态成员，即只能被类访问的成员</li><li><code>static</code> 关键字</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="comment">//静态变量</span></span><br><span class="line">    <span class="keyword">static</span> country = <span class="string">"中国"</span>;</span><br><span class="line">    <span class="comment">//京塔方法</span></span><br><span class="line">    <span class="keyword">static</span> sayhello() &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"hello"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person();  </span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> Person(); </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.country)  <span class="comment">//静态变量，直接通过类型来访问</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.country) <span class="comment">//错误</span></span><br></pre></td></tr></table></figure><h2 id="1-10-接口"><a href="#1-10-接口" class="headerlink" title="1.10 接口"></a>1.10 接口</h2><p>在面向对象编程中，接口是一种规范的定义，它定义了行为和动作规范，起到一种限制和规范的作用。<br>接口不关心状态数据，也不关心方法的实现细节，它只规定了一些属性和方法，而实现接口的类必须提供具体的信息。</p><h3 id="1-10-1-接口对类的规范"><a href="#1-10-1-接口对类的规范" class="headerlink" title="1.10.1 接口对类的规范"></a>1.10.1 接口对类的规范</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个人的接口</span></span><br><span class="line"><span class="keyword">interface</span> Human &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    say(word: <span class="built_in">string</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//让老师类实现Human接口，老师类实现接口的时候必须提供接口的具体信息</span></span><br><span class="line"><span class="keyword">class</span> Teacher <span class="keyword">implements</span> Human&#123;</span><br><span class="line">    name = <span class="string">"老师"</span>;</span><br><span class="line">    age = <span class="number">38</span>;</span><br><span class="line">    say(word: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"老师说"</span>+word)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//让学生类实现Human接口，学生类实现接口的时候必须提供接口的具体信息</span></span><br><span class="line"><span class="keyword">class</span> Student <span class="keyword">implements</span> Human&#123;</span><br><span class="line">    name = <span class="string">"学生"</span>;</span><br><span class="line">    age = <span class="number">18</span>;</span><br><span class="line">    say(word: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"学生说"</span>+word)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-10-2-接口对对象的规范"><a href="#1-10-2-接口对对象的规范" class="headerlink" title="1.10.2 接口对对象的规范"></a>1.10.2 接口对对象的规范</h3><p>TypeScript 中的接口除了可用于对类的一部分行为进行抽象以外，也常用于对对象的形状（Shape）进行描述</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">interface Shape &#123;</span><br><span class="line">    head: string;</span><br><span class="line">    arm: string;</span><br><span class="line">&#125;</span><br><span class="line">interface Person &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age: number;</span><br><span class="line">    shape: Shape;</span><br><span class="line">    say(word: string): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack: Person = &#123;</span><br><span class="line">    name: <span class="string">'Jack'</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    shape: &#123;</span><br><span class="line">        head: <span class="string">'head'</span>,</span><br><span class="line">        arm: <span class="string">'arm'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    say(word: string) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(word)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">jack.say(<span class="string">'hi'</span>)</span><br></pre></td></tr></table></figure><h3 id="1-10-3-接口可选属性"><a href="#1-10-3-接口可选属性" class="headerlink" title="1.10.3 接口可选属性"></a>1.10.3 接口可选属性</h3><p>接口里的属性不全都是必需的。 有些是只在某些条件下存在，或者根本不存在。 可选属性在应用“option bags”模式时很常用，即给函数传入的参数对象中只有部分属性赋值了。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    gender: <span class="built_in">string</span>,</span><br><span class="line">    age?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack: Person = &#123;</span><br><span class="line">    gender: <span class="string">'Male'</span></span><br><span class="line">    <span class="comment">// 可以不赋值 age 属性，因为是可选的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-10-4-接口只读属性"><a href="#1-10-4-接口只读属性" class="headerlink" title="1.10.4 接口只读属性"></a>1.10.4 接口只读属性</h3><p>一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 <code>readonly</code>来指定只读属性:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    readonly name: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack: Person = &#123;</span><br><span class="line">    name: <span class="string">'Jack'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jack.name = <span class="string">'Ivan'</span> <span class="comment">// 报错: name 是只读的</span></span><br></pre></td></tr></table></figure><p><code>readonly</code> vs <code>const</code></p><ul><li>常量使用 const</li><li>对象属性使用 readonly</li></ul><h3 id="1-10-5-函数接口"><a href="#1-10-5-函数接口" class="headerlink" title="1.10.5 函数接口"></a>1.10.5 函数接口</h3><p>因为函数也是对象，所以我们也可以通过接口来对函数做“规定”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">interface Fn &#123;</span><br><span class="line">    (a: number, <span class="attr">b</span>: number): number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> add: Fn = <span class="function"><span class="keyword">function</span>(<span class="params">a: number, b: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h3 id="1-10-6-接口继承"><a href="#1-10-6-接口继承" class="headerlink" title="1.10.6 接口继承"></a>1.10.6 接口继承</h3><p>就像 ES6 的 class 一样，接口也可以做继承操作，效果就是会继承父接口的“规定”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">interface Animal &#123;</span><br><span class="line">    move(): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Human extends Animal &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack: Human = &#123;</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    name: <span class="string">'Jack'</span>,</span><br><span class="line">    move() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'move'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-11-命名空间"><a href="#1-11-命名空间" class="headerlink" title="1.11 命名空间"></a>1.11 命名空间</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//命名空间就是内部模块，目的就是解决重名问题。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//a.ts  声明命名空间</span></span><br><span class="line"><span class="comment">//TypeScript 的命名空间只对外暴露需要在外部访问的对象，命名空间内的对象通过 export 关键字对外暴露</span></span><br><span class="line"><span class="keyword">namespace</span> Utils &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> IPerson &#123;</span><br><span class="line">      name: <span class="built_in">string</span>;</span><br><span class="line">      age: <span class="built_in">number</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//my.ts  使用命名空间</span></span><br><span class="line"><span class="comment">// reference 引用命名空间(可以加也可以不加)</span></span><br><span class="line"><span class="comment">/// &lt;reference path="a.ts" /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me: Utils.IPerson = &#123;</span><br><span class="line">  name: <span class="string">'funlee'</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(me); <span class="comment">// &#123;name: 'funlee', age: 18&#125;</span></span><br></pre></td></tr></table></figure><h2 id="1-12-模块"><a href="#1-12-模块" class="headerlink" title="1.12 模块"></a>1.12 模块</h2><p>模块是在其自身的作用域里执行，并不是在全局作用域，这意味着定义在模块里面的变量、函数和类等在模块外部是不可见的，除非明确地使用 export 导出它们。类似地，我们必须通过 import 导入其他模块导出的变量、函数、类等。</p><p>两个模块之间的关系是通过在文件级别上使用 import 和 export 建立的(其实就是ES6的模块化语法)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导出模块</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> str = <span class="string">"你好"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> title = <span class="string">"标题"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> title;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入模块</span></span><br><span class="line"><span class="keyword">import</span> title,&#123;num,str,say&#125; <span class="keyword">from</span> <span class="string">'./a'</span></span><br><span class="line"><span class="built_in">console</span>.log(title,str,say)</span><br></pre></td></tr></table></figure><h2 id="1-13-声明文件"><a href="#1-13-声明文件" class="headerlink" title="1.13 声明文件"></a>1.13 声明文件</h2><blockquote><p>d.ts为声明文件  主要用作类型的声明</p></blockquote><ul><li>在d.ts使用了declare，表示全局声明类型，需要结合tsconfig.json一起使用才能<br>有效果。 (使用方式：类似于命名空间)</li><li>或者使用export的方式，在普通ts中将d.ts导入(使用方式：类似于模块)</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//data.d.ts    注意：只有声明没有实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个类型</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> StringFunc = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个命名空间</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> API &#123;</span><br><span class="line">  <span class="comment">//导出CurrentUser接口类型</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> CurrentUser &#123;</span><br><span class="line">    avatar?: <span class="built_in">string</span>;</span><br><span class="line">    name?: <span class="built_in">string</span>;</span><br><span class="line">    title?: <span class="built_in">string</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-14-作业"><a href="#1-14-作业" class="headerlink" title="1.14 作业"></a>1.14 作业</h2><p>写出下列ts代码的含义：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导出一个函数 函数名字是defineConfig，函数参数是config，参数类型是IConfigFromPlugins或者IConfig，返回值是IConfigFromPlugins或者IConfig</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">defineConfig</span>(<span class="params">config: IConfigFromPlugins | IConfig</span>): <span class="title">IConfigFromPlugins</span> | <span class="title">IConfig</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个类型叫OverlayFunc，该类型是一个函数，该函数的返回值是ReactNode</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> OverlayFunc = <span class="function"><span class="params">()</span> =&gt;</span> React.ReactNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出一个类型，该类型叫SiderTheme，他的值是light或者dark</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> SiderTheme = <span class="string">'light'</span> | <span class="string">'dark'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个常量，名字叫columns，他的类型是ProColumns的数组，数组中的元素是TableListItem</span></span><br><span class="line"><span class="keyword">const</span> columns: ProColumns&lt;TableListItem&gt;[] = []</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个常量，名字叫LoginMessage，他的类型是React.FC，React.FC中接收&#123;content: string&#125;类型的数据。LoginMessage的值是一个箭头函数，该函数通过解构赋值或者content作为函数的入参，函数没有返回值</span></span><br><span class="line"><span class="keyword">const</span> LoginMessage: React.FC&lt;&#123;</span><br><span class="line">  content: <span class="built_in">string</span>;</span><br><span class="line">&#125;&gt; = <span class="function">(<span class="params">&#123; content &#125;</span>) =&gt;</span> ()</span><br><span class="line"></span><br><span class="line"><span class="comment">//type的 | 和 &amp;</span></span><br><span class="line"><span class="keyword">type</span> Env1 = <span class="string">'prod'</span> | <span class="string">'test'</span> | <span class="string">'dev'</span>;</span><br><span class="line"><span class="keyword">type</span> Env2 = <span class="string">'prod'</span> | <span class="string">'boe'</span> | <span class="string">'ppe'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> EnvUnion = Env1 | Env2; <span class="comment">// 'prod' | 'test' | 'dev' | 'boe' | 'ppe'  取并集</span></span><br><span class="line"><span class="keyword">type</span> EnvInter = Env1 &amp; Env2; <span class="comment">// 'prod'   取交集</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个类型叫Partial，主要作用就是将T中的每一个键可选</span></span><br><span class="line"><span class="keyword">type</span> Partial&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个类型叫Pick 主要作用选择T中的符合条件的属性</span></span><br><span class="line"><span class="comment">//https://blog.csdn.net/weixin_34376986/article/details/93167453</span></span><br><span class="line"><span class="keyword">type</span> Pick&lt;T, K <span class="keyword">extends</span> keyof T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]: T[P];</span><br><span class="line">&#125;;</span><br><span class="line">                 </span><br><span class="line"><span class="comment">//判断T是不是继承U，如果是则取never类型，否则取T类型本身</span></span><br><span class="line"><span class="keyword">type</span> Exclude&lt;T, U&gt; = T <span class="keyword">extends</span> U ? never : T;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断T是不是继承U，如果是则取T类型，否则取never类型</span></span><br><span class="line"><span class="keyword">type</span> Extract&lt;T, U&gt; = T <span class="keyword">extends</span> U ? T : never;</span><br><span class="line">          </span><br><span class="line"><span class="comment">//Omit 主要作用 选择T中除了K之外的其他属性          </span></span><br><span class="line"><span class="keyword">type</span> Omit&lt;T, K <span class="keyword">extends</span> keyof <span class="built_in">any</span>&gt; = Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个常量REACT_APP_ENV，他的值是test  dev  pre 或者false中的任意一个</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> REACT_APP_ENV: <span class="string">'test'</span> | <span class="string">'dev'</span> | <span class="string">'pre'</span> | <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ant Design Pro V5</title>
      <link href="/2020/03/23/ant-design-pro/"/>
      <url>/2020/03/23/ant-design-pro/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Ant-Design-Pro介绍"><a href="#1-Ant-Design-Pro介绍" class="headerlink" title="1.Ant Design Pro介绍"></a>1.Ant Design Pro介绍</h1><p>Ant Design Pro 是一个企业级中后台前端/设计解决方案</p><blockquote><p>特性</p></blockquote><ul><li><strong>优雅美观</strong>：基于 Ant Design 体系精心设计</li><li><strong>常见设计模式</strong>：提炼自中后台应用的典型页面和场景</li><li><strong>最新技术栈</strong>：使用 React/dva/antd 等前端前沿技术开发</li><li><strong>响应式</strong>：针对不同屏幕大小设计</li><li><strong>主题</strong>：可配置的主题满足多样化的品牌诉求</li><li><strong>国际化</strong>：内建业界通用的国际化方案</li><li><strong>最佳实践</strong>：良好的工程实践助您持续产出高质量代码</li><li><strong>Mock 数据</strong>：实用的本地数据调试方案</li><li><strong>UI 测试</strong>：自动化测试保障前端产品质量</li></ul><p><img src= "/img/loading.gif" data-src="D:%5C%E5%89%8D%E7%AB%AF%E5%A4%87%E8%AF%BE%5C17.REACT%5Creadme%5Cassets%5C1600843149045.png" alt="1600843149045"></p><p>创建项目：</p><p>yarn create umi myprotest</p><p>yarn install</p><p>yarn start</p><p>注意：这里创建项目的时候选择V5版本</p><p>​        Pro V4+antd@4 版本权限验证不好用。<strong>Pro V4+antd@4 可以查看完整版的ant design pro项目</strong>。</p><p>​        Pro V4+antd@3 版本有区块不好用</p><h1 id="2-目录结构和配置介绍"><a href="#2-目录结构和配置介绍" class="headerlink" title="2.目录结构和配置介绍"></a>2.目录结构和配置介绍</h1><h2 id="2-1-目录结构"><a href="#2-1-目录结构" class="headerlink" title="2.1 目录结构"></a>2.1 目录结构</h2><p><img src= "/img/loading.gif" data-src="D:%5C%E5%89%8D%E7%AB%AF%E5%A4%87%E8%AF%BE%5C17.REACT%5Creadme%5Cassets%5C1601258826340.png" alt="1601258826340"></p><h2 id="2-2-配置文件"><a href="#2-2-配置文件" class="headerlink" title="2.2 配置文件"></a>2.2 配置文件</h2><h3 id="2-2-1-config-ts"><a href="#2-2-1-config-ts" class="headerlink" title="2.2.1 config.ts"></a>2.2.1 config.ts</h3><p>该文件类似.umirc.ts文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入umi中的配置文件的类型 ts中要用</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">'umi'</span>;</span><br><span class="line"><span class="comment">//引入默认的配置文件</span></span><br><span class="line"><span class="keyword">import</span> defaultSettings <span class="keyword">from</span> <span class="string">'./defaultSettings'</span>;</span><br><span class="line"><span class="comment">//代理配置文件</span></span><br><span class="line"><span class="keyword">import</span> proxy <span class="keyword">from</span> <span class="string">'./proxy'</span>;</span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="comment">//当前开发环境\发布环境</span></span><br><span class="line"><span class="keyword">const</span> &#123; REACT_APP_ENV &#125; = process.env;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出配置对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  <span class="comment">//文件名支持hash命名</span></span><br><span class="line">  hash: <span class="literal">true</span>,  </span><br><span class="line">  <span class="comment">//启用dva插件</span></span><br><span class="line">  <span class="comment">//每个插件都会对应一个 id 和一个 key，id 是路径的简写，key 是进一步简化后用于配置的唯一值。</span></span><br><span class="line">  <span class="comment">//比如插件 /node_modules/@umijs/plugin-antd ,id 为 @umijs/plugin-antd，key 为 antd。</span></span><br><span class="line">  antd: &#123;&#125;,</span><br><span class="line">  <span class="comment">//启用dva插件</span></span><br><span class="line">  dva: &#123;</span><br><span class="line">    hmr: <span class="literal">true</span>,  <span class="comment">//热更新</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//启用layout布局插件  ant design pro中需要使用</span></span><br><span class="line">  layout: &#123;</span><br><span class="line">    name: <span class="string">'Ant Design Pro'</span>,</span><br><span class="line">    locale: <span class="literal">true</span>,     <span class="comment">//国际化</span></span><br><span class="line">    siderWidth: <span class="number">208</span>,  <span class="comment">//侧边栏宽度</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//启用locale国际化插件 配置之后才可以使用useIntl </span></span><br><span class="line">  locale: &#123;</span><br><span class="line">    <span class="comment">//默认的语言环境</span></span><br><span class="line">    <span class="keyword">default</span>: <span class="string">'zh-CN'</span>,</span><br><span class="line">    <span class="comment">//antd开启国际化</span></span><br><span class="line">    antd: <span class="literal">true</span>, </span><br><span class="line">    <span class="comment">// default true, when it is true, will use `navigator.language` overwrite default</span></span><br><span class="line">    baseNavigator: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//配置按需加载   即是否把构建产物进行拆分，在需要的时候下载额外的 JS 再执行。</span></span><br><span class="line">  dynamicImport: &#123;</span><br><span class="line">    loading: <span class="string">'@/components/PageLoading/index'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//兼容ie11</span></span><br><span class="line">  targets: &#123;</span><br><span class="line">    ie: <span class="number">11</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// umi routes: https://umijs.org/docs/routing</span></span><br><span class="line">  <span class="comment">//路由配置</span></span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/user'</span>,</span><br><span class="line">      <span class="comment">//不使用默认的页面布局模板，如果此属性不写就会使用默认页面布局模板(app.tsx中声明的layout)</span></span><br><span class="line">      layout: <span class="literal">false</span>,</span><br><span class="line">      <span class="comment">//子路由</span></span><br><span class="line">      routes: [</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">'login'</span>,</span><br><span class="line">          path: <span class="string">'/user/login'</span>,</span><br><span class="line">          component: <span class="string">'./user/login'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/welcome'</span>,</span><br><span class="line">      name: <span class="string">'welcome'</span>,</span><br><span class="line">      <span class="comment">// access: 'canUser',  //只有user登录可以访问  在access.ts中有声明</span></span><br><span class="line">      icon: <span class="string">'smile'</span>,      <span class="comment">//指定icon图标  可以使用ant design中的图标</span></span><br><span class="line">      component: <span class="string">'./Welcome'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/admin'</span>,</span><br><span class="line">      name: <span class="string">'admin'</span>,</span><br><span class="line">      icon: <span class="string">'crown'</span>,</span><br><span class="line">      access: <span class="string">'canAdmin'</span>,  <span class="comment">//只有admin登录可以访问  在access.ts中有声明</span></span><br><span class="line">      component: <span class="string">'./Admin'</span>,</span><br><span class="line">      routes: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">'/admin/sub-page'</span>,</span><br><span class="line">          name: <span class="string">'sub-page'</span>,</span><br><span class="line">          icon: <span class="string">'smile'</span>,</span><br><span class="line">          component: <span class="string">'./Welcome'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'list.table-list'</span>,</span><br><span class="line">      icon: <span class="string">'table'</span>,</span><br><span class="line">      path: <span class="string">'/list'</span>,</span><br><span class="line">      component: <span class="string">'./ListTableList'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      redirect: <span class="string">'/welcome'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      component: <span class="string">'./404'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// Theme for antd: https://ant.design/docs/react/customize-theme-cn</span></span><br><span class="line">  theme: &#123;</span><br><span class="line">    <span class="comment">// ...darkTheme,</span></span><br><span class="line">    <span class="comment">// 主要颜色,</span></span><br><span class="line">    <span class="string">'primary-color'</span>: defaultSettings.primaryColor,</span><br><span class="line">    <span class="comment">//主题颜色配置</span></span><br><span class="line">    <span class="comment">// 'font-size-base': '14px',</span></span><br><span class="line">    <span class="comment">// 'badge-font-size': '12px',</span></span><br><span class="line">    <span class="comment">// 'btn-font-size-lg': '@font-size-base',</span></span><br><span class="line">    <span class="comment">// 'menu-dark-bg': '#00182E',</span></span><br><span class="line">    <span class="comment">// 'menu-dark-submenu-bg': '#000B14',</span></span><br><span class="line">    <span class="comment">// 'layout-sider-background': '#00182E',</span></span><br><span class="line">    <span class="comment">// 'layout-body-background': '#f0f2f5',</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  title: <span class="literal">false</span>,</span><br><span class="line">  ignoreMomentLocale: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">//代理</span></span><br><span class="line">  proxy: proxy[REACT_APP_ENV || <span class="string">'dev'</span>],</span><br><span class="line">  manifest: &#123;</span><br><span class="line">    basePath: <span class="string">'/'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//别名</span></span><br><span class="line">  alias: &#123;</span><br><span class="line">    <span class="string">'@'</span>: path.resolve(__dirname, <span class="string">'src'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-2-2-defaultSettings-ts"><a href="#2-2-2-defaultSettings-ts" class="headerlink" title="2.2.2 defaultSettings.ts"></a>2.2.2 defaultSettings.ts</h3><p>页面样式的配置文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Settings <span class="keyword">as</span> LayoutSettings &#125; <span class="keyword">from</span> <span class="string">'@ant-design/pro-layout'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  navTheme: <span class="string">'dark'</span>,         <span class="comment">//主题颜色   dark light</span></span><br><span class="line">  primaryColor: <span class="string">'#1890ff'</span>,   <span class="comment">//主要颜色</span></span><br><span class="line">  layout: <span class="string">'mix'</span>,             <span class="comment">//布局方式  slide</span></span><br><span class="line">  contentWidth: <span class="string">'Fluid'</span>,     <span class="comment">//内容宽度</span></span><br><span class="line">  fixedHeader: <span class="literal">false</span>,        <span class="comment">//固定头</span></span><br><span class="line">  fixSiderbar: <span class="literal">true</span>,         <span class="comment">//固定左侧内容</span></span><br><span class="line">  colorWeak: <span class="literal">false</span>,          <span class="comment">//弱视</span></span><br><span class="line">  menu: &#123;</span><br><span class="line">    locale: <span class="literal">true</span>,            <span class="comment">//菜单国际化</span></span><br><span class="line">  &#125;,</span><br><span class="line">  title: <span class="string">'Ant Design Pro'</span>,   <span class="comment">//标题</span></span><br><span class="line">  pwa: <span class="literal">false</span>,</span><br><span class="line">  iconfontUrl: <span class="string">''</span>,           <span class="comment">//icon图标地址</span></span><br><span class="line">&#125; <span class="keyword">as</span> LayoutSettings &amp; &#123;</span><br><span class="line">  pwa: boolean;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-proxy-ts"><a href="#2-2-3-proxy-ts" class="headerlink" title="2.2.3 proxy.ts"></a>2.2.3 proxy.ts</h3><p>该文件主要是代理的配置文件，仅在开发环境有效</p><h3 id="2-2-4-app-tsx"><a href="#2-2-4-app-tsx" class="headerlink" title="2.2.4 app.tsx"></a>2.2.4 app.tsx</h3><p>app.tsx为运行时配置文件，导出的信息会使用对应的插件在运行时配置到程序中</p><h2 id="2-3-配置详解"><a href="#2-3-配置详解" class="headerlink" title="2.3 配置详解"></a>2.3 配置详解</h2><h3 id="2-3-1-路由和菜单"><a href="#2-3-1-路由和菜单" class="headerlink" title="2.3.1 路由和菜单"></a>2.3.1 路由和菜单</h3><p>ant design pro会根据配置的路由自动生成对应的菜单</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// umi routes: https://umijs.org/docs/routing</span></span><br><span class="line"><span class="comment">// hideChildrenInMenu 用于隐藏不需要在菜单中展示的子路由。用法可以查看 分步表单 的配置。</span></span><br><span class="line"><span class="comment">// hideInMenu 可以在菜单中不展示这个路由，包括子路由。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//路由配置</span></span><br><span class="line">routes: [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/user'</span>,</span><br><span class="line">        <span class="comment">//不使用默认的页面布局模板，如果此属性不写就会使用默认页面布局模板(app.tsx中声明的layout)</span></span><br><span class="line">        layout: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">//子路由</span></span><br><span class="line">        routes: [</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">'login'</span>,</span><br><span class="line">                path: <span class="string">'/user/login'</span>,</span><br><span class="line">                component: <span class="string">'./user/login'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/welcome'</span>,</span><br><span class="line">        name: <span class="string">'welcome'</span>,</span><br><span class="line">        <span class="comment">// access: 'canUser',  //只有user登录可以访问  在access.ts中有声明</span></span><br><span class="line">        icon: <span class="string">'smile'</span>,      <span class="comment">//指定icon图标  可以使用ant design中的图标</span></span><br><span class="line">        component: <span class="string">'./Welcome'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/admin'</span>,</span><br><span class="line">        name: <span class="string">'admin'</span>,</span><br><span class="line">        icon: <span class="string">'crown'</span>,</span><br><span class="line">        access: <span class="string">'canAdmin'</span>,  <span class="comment">//只有admin登录可以访问  在access.ts中有声明</span></span><br><span class="line">        component: <span class="string">'./Admin'</span>,</span><br><span class="line">        routes: [</span><br><span class="line">            &#123;</span><br><span class="line">                path: <span class="string">'/admin/sub-page'</span>,</span><br><span class="line">                name: <span class="string">'sub-page'</span>,</span><br><span class="line">                icon: <span class="string">'smile'</span>,</span><br><span class="line">                component: <span class="string">'./Welcome'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">'list.table-list'</span>,</span><br><span class="line">        icon: <span class="string">'table'</span>,</span><br><span class="line">        path: <span class="string">'/list'</span>,</span><br><span class="line">        component: <span class="string">'./ListTableList'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/'</span>,</span><br><span class="line">        redirect: <span class="string">'/welcome'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        component: <span class="string">'./404'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h3 id="2-3-2-权限"><a href="#2-3-2-权限" class="headerlink" title="2.3.2 权限"></a>2.3.2 权限</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>当要设定某些菜单只有部分用户可见的时候，可以在菜单配置中写 access: <span class="string">'canAdmin'</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>canAdmin的信息在src/access.ts中声明，该文件中导出的access函数会用插件<span class="meta">@umijs</span>/plugin-access进行运行时配置，函数返回的结果要是下面类型</span><br><span class="line"> *  返回结果:</span><br><span class="line"> *  &#123;</span><br><span class="line"> *     canAdmin:<span class="literal">true</span>,</span><br><span class="line"> *     canUser:<span class="literal">false</span></span><br><span class="line"> *  &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>useAccess：可以在页面根据不同的登录用户显示不同的信息</span><br><span class="line">   <span class="keyword">import</span> &#123; useAccess, Access &#125; <span class="keyword">from</span> <span class="string">'umi'</span>;</span><br><span class="line">   <span class="keyword">const</span> access = useAccess();      <span class="comment">//此处为当前返回的结果数据</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> (access.canReadFoo) &#123;</span><br><span class="line">    <span class="comment">// 如果可以读取 Foo，则...</span></span><br><span class="line">   &#125; </span><br><span class="line">   &lt;Access</span><br><span class="line">     accessible=&#123;access.canReadFoo&#125;</span><br><span class="line">     fallback=&#123;&lt;div&gt;Can not read foo content.&lt;<span class="regexp">/div&gt;&#125;</span></span><br><span class="line"><span class="regexp">          &gt;</span></span><br><span class="line"><span class="regexp">          Foo content.</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Access&gt;</span><br></pre></td></tr></table></figure><h3 id="2-3-3-布局"><a href="#2-3-3-布局" class="headerlink" title="2.3.3 布局"></a>2.3.3 布局</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当某个路由不需要布局文件的时候，只需要在config.ts的路由配置中设定layout: <span class="literal">false</span>即可，如果没有写这个，则会使用默认的布局文件</span><br><span class="line"></span><br><span class="line">默认的布局文件在app.tsx中layout中声明，会使用@umijs/plugin-layout进行运行时配置</span><br></pre></td></tr></table></figure><h3 id="2-3-4-InitialState"><a href="#2-3-4-InitialState" class="headerlink" title="2.3.4 InitialState"></a>2.3.4 InitialState</h3><p>在app.tsx中导出getInitialState方法，会使用@umijs/plugin-initial-state插件进行运行时配置，该方法会在整个应用最开始执行，返回值会作为全局共享的数据。(每次刷新页面的之后都会执行)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#1. app.tsx使用getInitialState提供全局共享数据</span><br><span class="line"><span class="comment">/**<span class="doctag">@umijs</span>/plugin-initial-state  会启用这个插件</span></span><br><span class="line"><span class="comment">* getInitialState会在整个应用最开始执行，返回值会作为全局共享的数据</span></span><br><span class="line"><span class="comment">* 其他组件中可以使用useModel来获取这份数据 (类似生产者消费者模式)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getInitialState</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;</span>&#123;</span><br><span class="line">  currentUser?: API.CurrentUser;</span><br><span class="line">  settings?: LayoutSettings;</span><br><span class="line">&#125;&gt; &#123;</span><br><span class="line">  <span class="comment">// 如果是登录页面，不执行</span></span><br><span class="line">  <span class="keyword">if</span> (history.location.pathname !== <span class="string">'/user/login'</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> currentUser = <span class="keyword">await</span> queryCurrent();</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        currentUser,</span><br><span class="line">        settings: defaultSettings,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      history.push(<span class="string">'/user/login'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    settings: defaultSettings,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#2.在其他组件中可以通过useModel获取上面暴露的数据</span><br><span class="line"><span class="keyword">import</span> &#123; useModel &#125; <span class="keyword">from</span> <span class="string">'umi'</span>;</span><br><span class="line"><span class="comment">//initialState是getInitialState方法的返回值</span></span><br><span class="line"><span class="comment">//loading是数据加载状态</span></span><br><span class="line"><span class="comment">//refresh可以重新执行getInitialState方法</span></span><br><span class="line"><span class="keyword">const</span> &#123; initialState,loading,refresh &#125; = useModel(<span class="string">'@@initialState'</span>);</span><br></pre></td></tr></table></figure><h3 id="2-3-5-国际化"><a href="#2-3-5-国际化" class="headerlink" title="2.3.5 国际化"></a>2.3.5 国际化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#1.src/locales 是国际化的配置文件</span><br><span class="line"></span><br><span class="line">#2.SelectLang是语言选择组件</span><br><span class="line"><span class="keyword">import</span> &#123; SelectLang &#125; <span class="keyword">from</span> <span class="string">'umi'</span>;</span><br><span class="line"></span><br><span class="line">#3.useIntl国际化库</span><br><span class="line"><span class="keyword">import</span> &#123; useIntl,FormattedMessage &#125; <span class="keyword">from</span> <span class="string">'umi'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//useIntl().formatMessage  使用formatMessage这个api进行国际化</span></span><br><span class="line">useIntl().formatMessage(&#123;</span><br><span class="line">    id: <span class="string">'menu.home'</span>,</span><br><span class="line">    defaultMessage: <span class="string">'Home'</span>,</span><br><span class="line">&#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用FormattedMessage组件进行国际化</span></span><br><span class="line">&lt;button&gt;<span class="xml"><span class="tag">&lt;<span class="name">FormattedMessage</span> <span class="attr">id</span>=<span class="string">"menu.admin"</span> /&gt;</span></span>&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-知识点介绍"><a href="#3-知识点介绍" class="headerlink" title="3.知识点介绍"></a>3.知识点介绍</h1><h2 id="3-1-封装组件介绍"><a href="#3-1-封装组件介绍" class="headerlink" title="3.1 封装组件介绍"></a>3.1 封装组件介绍</h2><p>Footer 网页底部组件的封装</p><p>HeaderDropdown 鼠标移动的下拉组件的封装</p><p>PageLoading  页面加载组件的封装   需要在config.ts中配置</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PageLoading  pro-layout封装的一个简单的加载页面</span></span><br><span class="line"><span class="keyword">import</span> &#123; PageLoading &#125; <span class="keyword">from</span> <span class="string">'@ant-design/pro-layout'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// loading components from code split</span></span><br><span class="line"><span class="comment">// https://umijs.org/plugin/umi-plugin-react.html#dynamicimport</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> PageLoading;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置按需加载   即是否把构建产物进行拆分，在需要的时候下载额外的 JS 再执行。</span></span><br><span class="line">dynamicImport: &#123;</span><br><span class="line">    loading: <span class="string">'@/components/PageLoading/index'</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>RightContent  登录后右上侧组件的封装(包含搜索、用户头像、语言选择等信息)</p><h2 id="3-2-procomponents"><a href="#3-2-procomponents" class="headerlink" title="3.2  procomponents"></a>3.2  procomponents</h2><p><a href="https://procomponents.ant.design/components/layout#api" target="_blank" rel="noopener">https://procomponents.ant.design/components/layout#api</a></p><h3 id="3-2-1-高级布局ProLayout"><a href="#3-2-1-高级布局ProLayout" class="headerlink" title="3.2.1 高级布局ProLayout"></a>3.2.1 高级布局ProLayout</h3><h4 id="a-BasicLayout-amp-amp-BasicLayoutProps"><a href="#a-BasicLayout-amp-amp-BasicLayoutProps" class="headerlink" title="a) BasicLayout&amp;&amp;BasicLayoutProps"></a>a) BasicLayout&amp;&amp;BasicLayoutProps</h4><p>BasicLayout 基础页面布局，包含了头部导航，侧边栏和通知栏等等。</p><p>ProLayout 与 umi 配合使用会有最好的效果，umi 会把 config.ts 中的路由帮我们自动注入到配置的 layout 中，这样我们就可以免去手写菜单的烦恼。</p><p>BasicLayoutProps基本页面布局的属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * app.tsx :  这边没有直接使用BasicLayout，而是写一个箭头函数返回BasicLayoutProps的实现，原因在于此处要根据initialState处理页面切换。</span></span><br><span class="line"><span class="comment"> * @umijs/plugin-layout</span></span><br><span class="line"><span class="comment"> * 默认登录后的页面布局模板 (此处权限验证的代码已经封装，看不到了，在老版本的项目中可以看到源代码)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> layout = (&#123;</span><br><span class="line">  initialState,</span><br><span class="line">&#125;: &#123;</span><br><span class="line">  initialState: &#123; settings?: LayoutSettings; currentUser?: API.CurrentUser &#125;;</span><br><span class="line">&#125;): <span class="function"><span class="params">BasicLayoutProps</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">//渲染顶部右侧内容</span></span><br><span class="line">    rightContentRender: <span class="function"><span class="params">()</span> =&gt;</span> &lt;RightContent /&gt;,</span><br><span class="line">    <span class="comment">//关闭 content的 margin</span></span><br><span class="line">    disableContentMargin: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">//渲染网页底部页面</span></span><br><span class="line">    footerRender: <span class="function"><span class="params">()</span> =&gt;</span> &lt;Footer /&gt;,</span><br><span class="line">    <span class="comment">//当切换页面的时候触发的事件</span></span><br><span class="line">    onPageChange: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 如果没有登录，重定向到 login</span></span><br><span class="line">      <span class="keyword">if</span> (!initialState?.currentUser?.userid &amp;&amp; history.location.pathname !== <span class="string">'/user/login'</span>) &#123;</span><br><span class="line">        history.push(<span class="string">'/user/login'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//渲染路径导航(代码为后来新增)</span></span><br><span class="line">    breadcrumbRender: <span class="function">(<span class="params">routers = []</span>) =&gt;</span> [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'/'</span>,</span><br><span class="line">        breadcrumbName: useIntl().formatMessage(&#123;</span><br><span class="line">          id: <span class="string">'menu.home'</span>,</span><br><span class="line">          defaultMessage: <span class="string">'Home'</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;,</span><br><span class="line">      ...routers,</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//路径导航相关(代码为后来新增)</span></span><br><span class="line">    itemRender: <span class="function">(<span class="params">route, params, routes, paths</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> first = routes.indexOf(route) === <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> first ? (</span><br><span class="line">        &lt;Link to=&#123;paths.join(<span class="string">'/'</span>)&#125;&gt;&#123;route.breadcrumbName&#125;&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">      ) : (</span></span><br><span class="line"><span class="regexp">        &lt;span&gt;&#123;route.breadcrumbName&#125;&lt;/</span>span&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//渲染menu菜单头的方法(代码为后来新增)</span></span><br><span class="line">    menuHeaderRender: <span class="function"><span class="params">()</span> =&gt;</span> &lt;div&gt;测试菜单&lt;<span class="regexp">/div&gt;,</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/渲染菜单数据(此处可以修改返回的菜单数据从而实现渲染服务器返回的菜单信息)</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/menuData 为confit.ts中配置的菜单信息</span></span><br><span class="line"><span class="regexp">    menuDataRender: (menuData) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">      return menuData;</span></span><br><span class="line"><span class="regexp">      /</span>*</span><br><span class="line">      <span class="keyword">return</span> [</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">'/user'</span>,</span><br><span class="line">          layout: <span class="literal">false</span>,</span><br><span class="line">          <span class="comment">//子路由</span></span><br><span class="line">          routes: [</span><br><span class="line">            &#123;</span><br><span class="line">              name: <span class="string">'login'</span>,</span><br><span class="line">              path: <span class="string">'/user/login'</span>,</span><br><span class="line">              component: <span class="string">'./user/login'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">'/welcome'</span>,</span><br><span class="line">          name: <span class="string">'welcome'</span>,</span><br><span class="line">          icon: &lt;QuestionCircleOutlined /&gt;,</span><br><span class="line">          component: <span class="string">'./Welcome'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ];</span><br><span class="line">      *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/传入配置参数</span></span><br><span class="line"><span class="regexp">    ...initialState?.settings,</span></span><br><span class="line"><span class="regexp">  &#125;;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><h4 id="b-PageContainer"><a href="#b-PageContainer" class="headerlink" title="b) PageContainer"></a>b) PageContainer</h4><p>正文内容组件，封装了 ant design 的 PageHeader 组件，增加了 tabList 和 content。 根据当前的路由填入 title 和 breadcrumb。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//content 指定页面内容</span></span><br><span class="line"><span class="comment">//title 指定页面标题</span></span><br><span class="line"><span class="comment">//pageHeaderRender 重新渲染页面头</span></span><br><span class="line"><span class="comment">//footer 网页尾部内容</span></span><br><span class="line"><span class="comment">//tabList 切换的tab列表</span></span><br><span class="line">&lt;PageContainer</span><br><span class="line">  content=<span class="string">" 这个页面只有 admin 权限才能查看"</span></span><br><span class="line">  title=<span class="string">"管理员页面头部信息"</span></span><br><span class="line">  pageHeaderRender=&#123;<span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;div&gt;测试&lt;<span class="regexp">/div&gt;;</span></span><br><span class="line"><span class="regexp">  &#125;&#125;</span></span><br><span class="line"><span class="regexp">  footer=&#123;[&lt;div&gt;页面尾巴&lt;/div&gt;]&#125;</span></span><br><span class="line"><span class="regexp">  tabList=&#123;</span></span><br><span class="line"><span class="regexp">     [&#123;key:"张三",tab:&lt;div&gt;张三&lt;/div&gt;&#125;,&#123;key:"李四",tab:&lt;div&gt;李四&lt;/div&gt;&#125;]</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&gt;</span></span><br><span class="line"><span class="regexp">  &lt;p&gt;正文内容&lt;/</span>p&gt;</span><br><span class="line">&lt;<span class="regexp">/PageContainer&gt;</span></span><br></pre></td></tr></table></figure><h4 id="c-DefaultFooter"><a href="#c-DefaultFooter" class="headerlink" title="c) DefaultFooter"></a>c) DefaultFooter</h4><p>网页默认的底部组件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;DefaultFooter</span><br><span class="line">    copyright=<span class="string">"2019 蚂蚁金服体验技术部出品"</span></span><br><span class="line">    links=&#123;[</span><br><span class="line">      &#123;</span><br><span class="line">        key: <span class="string">'Ant Design Pro'</span>,</span><br><span class="line">        title: <span class="string">'Ant Design Pro'</span>,</span><br><span class="line">        href: <span class="string">'https://pro.ant.design'</span>,</span><br><span class="line">        blankTarget: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        key: <span class="string">'github'</span>,</span><br><span class="line">        title: &lt;GithubOutlined /&gt;,</span><br><span class="line">        href: <span class="string">'https://github.com/ant-design/ant-design-pro'</span>,</span><br><span class="line">        blankTarget: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        key: <span class="string">'Ant Design'</span>,</span><br><span class="line">        title: <span class="string">'Ant Design'</span>,</span><br><span class="line">        href: <span class="string">'https://ant.design'</span>,</span><br><span class="line">        blankTarget: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ]&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h4 id="d-PageLoading"><a href="#d-PageLoading" class="headerlink" title="d) PageLoading"></a>d) PageLoading</h4><p>加载页面组件，需要在config.ts中配置。配置之后加载页面就默认会用该组件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置按需加载   即是否把构建产物进行拆分，在需要的时候下载额外的 JS 再执行。</span></span><br><span class="line">dynamicImport: &#123;</span><br><span class="line">    loading: <span class="string">'@/components/PageLoading/index'</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="e-FooterToolbar"><a href="#e-FooterToolbar" class="headerlink" title="e) FooterToolbar"></a>e) FooterToolbar</h4><p>底部工具栏组件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;FooterToolbar</span><br><span class="line">    extra=&#123;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        已选择项&amp;nbsp;&amp;nbsp;</span><br><span class="line">        &lt;span&gt;服务调用次数总计万&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt;</span><br><span class="line">        &#123;<span class="comment">/**批量删除按钮 */</span>&#125;</span><br><span class="line">    &lt;Button&gt;批量删除&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">    &#123;/</span>**批量审批按钮 *<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">    &lt;Button type="primary"&gt;批量审批&lt;/</span>Button&gt;</span><br><span class="line">&lt;<span class="regexp">/FooterToolbar&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-2-高级表格ProTable"><a href="#3-2-2-高级表格ProTable" class="headerlink" title="3.2.2  高级表格ProTable"></a>3.2.2  高级表格ProTable</h3><h4 id="a-ProColumns"><a href="#a-ProColumns" class="headerlink" title="a) ProColumns"></a>a) ProColumns</h4><p>高级列，会嵌套在高级表格中使用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义高级列(会嵌套在高级表格中)</span></span><br><span class="line">  <span class="keyword">const</span> columns: ProColumns&lt;TableListItem&gt;[] = [</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">'规则名称'</span>, <span class="comment">//页面显示的标题</span></span><br><span class="line">      dataIndex: <span class="string">'name'</span>, <span class="comment">//对应数据源中的字段</span></span><br><span class="line">      tip: <span class="string">'规则名称是唯一的 key'</span>, <span class="comment">//tip提示信息</span></span><br><span class="line">      formItemProps: &#123;</span><br><span class="line">        <span class="comment">//校验规则</span></span><br><span class="line">        rules: [</span><br><span class="line">          &#123;</span><br><span class="line">            required: <span class="literal">true</span>,</span><br><span class="line">            message: <span class="string">'规则名称为必填项'</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//渲染列的方法 : dom为页面元素,entity为数据源</span></span><br><span class="line">      render: <span class="function">(<span class="params">dom, entity</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &lt;a onClick=&#123;<span class="function"><span class="params">()</span> =&gt;</span> setRow(entity)&#125;&gt;&#123;dom&#125;&lt;<span class="regexp">/a&gt;;</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    &#123;</span></span><br><span class="line"><span class="regexp">      title: '描述',</span></span><br><span class="line"><span class="regexp">      dataIndex: 'desc',</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/input的type类型</span></span><br><span class="line"><span class="regexp">      valueType: 'textarea',</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    &#123;</span></span><br><span class="line"><span class="regexp">      title: '服务调用次数',</span></span><br><span class="line"><span class="regexp">      dataIndex: 'callNo',</span></span><br><span class="line"><span class="regexp">      sorter: true,</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/新建表单和查询的展开表单中不显示当前信息</span></span><br><span class="line"><span class="regexp">      hideInForm: true,</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/渲染文字的方法</span></span><br><span class="line"><span class="regexp">      renderText: (val: string) =&gt; `$&#123;val&#125; 万`,</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    &#123;</span></span><br><span class="line"><span class="regexp">      title: '状态',</span></span><br><span class="line"><span class="regexp">      dataIndex: 'status',</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/新建表单和查询的展开表单中不显示当前信息</span></span><br><span class="line"><span class="regexp">      hideInForm: true,</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/枚举值</span></span><br><span class="line"><span class="regexp">      valueEnum: &#123;</span></span><br><span class="line"><span class="regexp">        0: &#123; text: '关闭', status: 'Default' &#125;,</span></span><br><span class="line"><span class="regexp">        1: &#123; text: '运行中', status: 'Processing' &#125;,</span></span><br><span class="line"><span class="regexp">        2: &#123; text: '已上线', status: 'Success' &#125;,</span></span><br><span class="line"><span class="regexp">        3: &#123; text: '异常', status: 'Error' &#125;,</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    &#123;</span></span><br><span class="line"><span class="regexp">      title: '上次调度时间',</span></span><br><span class="line"><span class="regexp">      dataIndex: 'updatedAt',</span></span><br><span class="line"><span class="regexp">      sorter: true,</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ input的type类型</span></span><br><span class="line"><span class="regexp">      valueType: 'dateTime',</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 新建表单查询的展开表单中不显示当前信息</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ hideInForm: true,</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 自定义渲染内容(会在新增表单和查询的展开表单中显示,要看到这个属性的结果需要把hideInForm: true去掉)</span></span><br><span class="line"><span class="regexp">      renderFormItem: (item, &#123; defaultRender, ...rest &#125;, form) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/获取当前数据的状态信息</span></span><br><span class="line"><span class="regexp">        const status = form.getFieldValue('status');</span></span><br><span class="line"><span class="regexp">        if (`$&#123;status&#125;` === '0') &#123;</span></span><br><span class="line"><span class="regexp">          return false;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        if (`$&#123;status&#125;` === '3') &#123;</span></span><br><span class="line"><span class="regexp">          return &lt;Input &#123;...rest&#125; placeholder="请输入异常原因！" /</span>&gt;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> defaultRender(item);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">'操作'</span>,</span><br><span class="line">      dataIndex: <span class="string">'option'</span>,</span><br><span class="line">      valueType: <span class="string">'option'</span>,</span><br><span class="line">      <span class="comment">//渲染操作栏的方法</span></span><br><span class="line">      render: <span class="function">(<span class="params">_, record</span>) =&gt;</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">          &#123;<span class="comment">/**配置按钮 */</span>&#125;</span><br><span class="line">          &lt;a</span><br><span class="line">            onClick=&#123;<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="comment">//点击配置按钮让更新表单可见</span></span><br><span class="line">              handleUpdateModalVisible(<span class="literal">true</span>);</span><br><span class="line">              <span class="comment">//点击配置按钮设置更新表单的数据</span></span><br><span class="line">              setStepFormValues(record);</span><br><span class="line">            &#125;&#125;</span><br><span class="line">          &gt;</span><br><span class="line">            配置</span><br><span class="line">          &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Divider type="vertical" /</span>&gt;</span><br><span class="line">          &#123;<span class="comment">/**订阅警报按钮 */</span>&#125;</span><br><span class="line">          &lt;a href=<span class="string">""</span>&gt;订阅警报&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>&gt;</span><br><span class="line">      ),</span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br></pre></td></tr></table></figure><h4 id="b-ProTable-amp-ActionType"><a href="#b-ProTable-amp-ActionType" class="headerlink" title="b) ProTable&amp;ActionType"></a>b) ProTable&amp;ActionType</h4><p>ProTable 高级表格</p><p>ActionType  记录高级表格的常用事件  (reload reset reloadAndRest等事件)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ProTable, &#123; ProColumns, ActionType &#125; <span class="keyword">from</span> <span class="string">'@ant-design/pro-table'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//actionRef 记录高级表格的常用事件  (reload reset reloadAndRest等事件)</span></span><br><span class="line"><span class="keyword">const</span> actionRef = useRef&lt;ActionType&gt;();</span><br><span class="line"></span><br><span class="line">&lt;ProTable&lt;TableListItem&gt;</span><br><span class="line">        headerTitle=<span class="string">"查询表格"</span> <span class="comment">//表格标题</span></span><br><span class="line">        actionRef=&#123;actionRef&#125; <span class="comment">//表格事件的引用</span></span><br><span class="line">        rowKey=<span class="string">"key"</span> <span class="comment">//表格每一行的key，这边为数据源中每一条数据的key</span></span><br><span class="line">        search=&#123;&#123;</span><br><span class="line">          labelWidth: <span class="number">120</span>, <span class="comment">//搜索lable的宽度   如果不想显示搜索栏，设置成false即可</span></span><br><span class="line">        &#125;&#125;</span><br><span class="line">        <span class="comment">//渲染工具栏(新建按钮)</span></span><br><span class="line">        toolBarRender=&#123;<span class="function"><span class="params">()</span> =&gt;</span> [</span><br><span class="line">          <span class="comment">//点击新建按钮，让新建表单可见</span></span><br><span class="line">          &lt;Button <span class="keyword">type</span>=<span class="string">"primary"</span>&gt;新建&lt;<span class="regexp">/Button&gt;,</span></span><br><span class="line"><span class="regexp">        ]&#125;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/设置表格数据 (columns配置的sorter没有用，这边入参的sorter为空，要实现排序，手动storter写死)</span></span><br><span class="line"><span class="regexp">        request=&#123;(params, sorter, filter) =&gt; </span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/指定表格列</span></span><br><span class="line"><span class="regexp">        columns=&#123;columns&#125;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/选中每一行(打钩)，记录下选中的数据</span></span><br><span class="line"><span class="regexp">        rowSelection=&#123;&#123;</span></span><br><span class="line"><span class="regexp">        &#125;&#125;</span></span><br><span class="line"><span class="regexp">/</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-3-高级描述ProDescriptions"><a href="#3-2-3-高级描述ProDescriptions" class="headerlink" title="3.2.3 高级描述ProDescriptions"></a>3.2.3 高级描述ProDescriptions</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ProDescriptions <span class="keyword">from</span> <span class="string">'@ant-design/pro-descriptions'</span>;</span><br><span class="line"></span><br><span class="line">&lt;ProDescriptions&lt;TableListItem&gt;</span><br><span class="line">    <span class="comment">//几列显示</span></span><br><span class="line">    column=&#123;<span class="number">2</span>&#125;</span><br><span class="line">    <span class="comment">//标题 如果row存在则取name，如果row不存在则不取name，避免row不存在的时候报错</span></span><br><span class="line">    title=&#123;row?.name&#125;</span><br><span class="line">    <span class="comment">//设置ProDescriptions的数据</span></span><br><span class="line">    request=&#123;<span class="keyword">async</span> () =&gt; (&#123;</span><br><span class="line">        data: row || &#123;&#125;,</span><br><span class="line">    &#125;)&#125;</span><br><span class="line">    <span class="comment">//传参，参数改变的时候会触发页面刷新</span></span><br><span class="line">    params=&#123;&#123;</span><br><span class="line">        id: row?.name,</span><br><span class="line">    &#125;&#125;</span><br><span class="line">    <span class="comment">//设置ProDescriptions的列数据</span></span><br><span class="line">    columns=&#123;columns&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h2 id="3-3-登录页面及流程"><a href="#3-3-登录页面及流程" class="headerlink" title="3.3 登录页面及流程"></a>3.3 登录页面及流程</h2><h3 id="3-3-1-登录页面及子组件"><a href="#3-3-1-登录页面及子组件" class="headerlink" title="3.3.1 登录页面及子组件"></a>3.3.1 登录页面及子组件</h3><p>user/login/index.tsx   登录页面</p><p>user/login/components/login/index.tsx  封装的login组件，同时把Tab、Submit、Username、Password、Mobile、Captcha等组件挂在到当前index.tsx中</p><p>LoginContext.tsx  上下文对象，主要通过上下文在user/login/components/login/index.tsx中给子组件共享和暴露数据</p><p>LoginItem.tsx    登录项，主要在这里通过map.tsx中的配置动态创建登录子组件，包括Username、Password、Mobile、Captcha等</p><p>LoginSumit.tsx  提交登录表单的组件</p><p>LoginTab.tsx  登录切换Tab组件</p><h3 id="3-3-2-登录流程"><a href="#3-3-2-登录流程" class="headerlink" title="3.3.2 登录流程"></a>3.3.2 登录流程</h3><ol><li><p>提交登录表单</p></li><li><p>调用fakeAccountLogin这个service发送登录请求</p></li><li><p>登录成功之后跳回回调地址 </p><p>注意：这边使用window.location.href=”xx”，会刷新页面，从而触发app.tsx中的getInitialState方法重新执行</p></li><li><p>根据当前url从路由配置中找寻相应的规则，然后根据getInitialState中的CurrentUser做权限验证，呈现登录后的用户菜单和页面</p></li></ol><h2 id="3-4-列表页流程"><a href="#3-4-列表页流程" class="headerlink" title="3.4 列表页流程"></a>3.4 列表页流程</h2><h3 id="3-4-1-列表页面及子组件"><a href="#3-4-1-列表页面及子组件" class="headerlink" title="3.4.1 列表页面及子组件"></a>3.4.1 列表页面及子组件</h3><p>pages/ListTableList/index.tsx   列表页面</p><p>pages/ListTableList/service.ts  列表页面的请求文件</p><p>pages/ListTableList/data.d.ts   列表页面的类型声明文件</p><p>pages/ListTableList/components/createForm.tsx  创建表单的组件</p><p>pages/ListTableList/components/updateForm.tsx  更新表单的组件</p><h3 id="3-4-2-列表流程"><a href="#3-4-2-列表流程" class="headerlink" title="3.4.2 列表流程"></a>3.4.2 列表流程</h3><h4 id="a-列表页面展示、查询、分页"><a href="#a-列表页面展示、查询、分页" class="headerlink" title="a) 列表页面展示、查询、分页"></a>a) 列表页面展示、查询、分页</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置表格数据 (columns配置的sorter没有用，这边入参的sorter为空，要实现排序，手动storter写死)</span></span><br><span class="line">request=&#123;<span class="function">(<span class="params">params, sorter, filter</span>) =&gt;</span></span><br><span class="line">         queryRule(&#123; ...params, sorter: &#123; callNo: <span class="string">'ascend'</span> &#125;, filter &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="b-规则新增"><a href="#b-规则新增" class="headerlink" title="b) 规则新增"></a>b) 规则新增</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.点击新建按钮，让新建表单模态框可见</span></span><br><span class="line">&lt;Button <span class="keyword">type</span>=<span class="string">"primary"</span> onClick=&#123;<span class="function"><span class="params">()</span> =&gt;</span> handleModalVisible(<span class="literal">true</span>)&#125;&gt;</span><br><span class="line">    &lt;PlusOutlined /&gt; 新建</span><br><span class="line">&lt;<span class="regexp">/Button&gt;,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/2.点击新建表单的提交表单按钮，发送请求，然后让新建表单不可见，然后让外边的表单刷新页面</span></span><br><span class="line"><span class="regexp">&lt;CreateForm onCancel=&#123;() =&gt; handleModalVisible(false)&#125; modalVisible=&#123;createModalVisible&#125;&gt;</span></span><br><span class="line"><span class="regexp">        &#123;/</span>**嵌套一个ProTable *<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">        &lt;ProTable&lt;TableListItem, TableListItem&gt;</span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/点击提交按钮 发送请求 让外部的ProTable刷新表格</span></span><br><span class="line"><span class="regexp">          onSubmit=&#123;async (value) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">            const success = await handleAdd(value);</span></span><br><span class="line"><span class="regexp">            if (success) &#123;</span></span><br><span class="line"><span class="regexp">              handleModalVisible(false);</span></span><br><span class="line"><span class="regexp">              if (actionRef.current) &#123;</span></span><br><span class="line"><span class="regexp">                actionRef.current.reload();</span></span><br><span class="line"><span class="regexp">              &#125;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">          &#125;&#125;</span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/每一行的索引</span></span><br><span class="line"><span class="regexp">          rowKey="key"</span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/表格的类型</span></span><br><span class="line"><span class="regexp">          type="form"</span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/指定表格的列  此时columns中配置的hideInForm生效了</span></span><br><span class="line"><span class="regexp">          columns=&#123;columns&#125;</span></span><br><span class="line"><span class="regexp">        /</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/CreateForm&gt;</span></span><br></pre></td></tr></table></figure><h4 id="c-规则更新"><a href="#c-规则更新" class="headerlink" title="c) 规则更新"></a>c) 规则更新</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.点击配置按钮，让配置表单可见，并设置配置表单的数据</span></span><br><span class="line">handleUpdateModalVisible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//点击配置按钮设置更新表单的数据</span></span><br><span class="line">setStepFormValues(record);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.点击配置表单的提交按钮，发送请求，然后让配置表单不可见，然后让外边的表单刷新页面</span></span><br><span class="line">&lt;UpdateForm</span><br><span class="line">          <span class="comment">//提交表单 发送请求 让外部的ProTable刷新表格</span></span><br><span class="line">          onSubmit=&#123;<span class="keyword">async</span> (value) =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> success = <span class="keyword">await</span> handleUpdate(value);</span><br><span class="line">            <span class="keyword">if</span> (success) &#123;</span><br><span class="line">              handleUpdateModalVisible(<span class="literal">false</span>);</span><br><span class="line">              setStepFormValues(&#123;&#125;);</span><br><span class="line">              <span class="keyword">if</span> (actionRef.current) &#123;</span><br><span class="line">                actionRef.current.reload();</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;&#125;</span><br><span class="line">          <span class="comment">//取消更新表单</span></span><br><span class="line">          onCancel=&#123;<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            handleUpdateModalVisible(<span class="literal">false</span>);</span><br><span class="line">            setStepFormValues(&#123;&#125;);</span><br><span class="line">          &#125;&#125;</span><br><span class="line">          <span class="comment">//更新表单的显示隐藏状态</span></span><br><span class="line">          updateModalVisible=&#123;updateModalVisible&#125;</span><br><span class="line">          <span class="comment">//更新表单的数据</span></span><br><span class="line">          values=&#123;stepFormValues&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h4 id="d-规则选中"><a href="#d-规则选中" class="headerlink" title="d) 规则选中"></a>d) 规则选中</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.选中规则，保存选中的数据到selectedRows数组</span></span><br><span class="line">rowSelection=&#123;&#123;</span><br><span class="line">    onChange: <span class="function">(<span class="params">_, selectedRows</span>) =&gt;</span> setSelectedRows(selectedRows),</span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.如果选中行的长度&gt;0，则让底部FooterToolbar显示出来</span></span><br><span class="line"><span class="comment">//点击批量删除，发送请求，设置选中的selectedRows数组为空(让FooterToolbar不可见)，同时让外边的表单刷新页面</span></span><br><span class="line">&#123;selectedRowsState?.length &gt; <span class="number">0</span> &amp;&amp; (</span><br><span class="line">        &lt;FooterToolbar</span><br><span class="line">          extra=&#123;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">              已选择 &lt;a style=&#123;&#123; fontWeight: <span class="number">600</span> &#125;&#125;&gt;&#123;selectedRowsState.length&#125;&lt;<span class="regexp">/a&gt; 项&amp;nbsp;&amp;nbsp;</span></span><br><span class="line"><span class="regexp">              &lt;span&gt;</span></span><br><span class="line"><span class="regexp">                服务调用次数总计 &#123;selectedRowsState.reduce((pre, item) =&gt; pre + item.callNo, 0)&#125; 万</span></span><br><span class="line"><span class="regexp">              &lt;/</span>span&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">          &#125;</span></span><br><span class="line"><span class="regexp">        &gt;</span></span><br><span class="line"><span class="regexp">          &#123;/</span>**批量删除按钮 *<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">          &lt;Button</span></span><br><span class="line"><span class="regexp">            onClick=&#123;async () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">              await handleRemove(selectedRowsState);</span></span><br><span class="line"><span class="regexp">              setSelectedRows([]);</span></span><br><span class="line"><span class="regexp">              actionRef.current?.reloadAndRest?.();</span></span><br><span class="line"><span class="regexp">            &#125;&#125;</span></span><br><span class="line"><span class="regexp">          &gt;</span></span><br><span class="line"><span class="regexp">            批量删除</span></span><br><span class="line"><span class="regexp">          &lt;/</span>Button&gt;</span><br><span class="line">           &#123;<span class="comment">/**批量审批按钮 */</span>&#125;</span><br><span class="line">          &lt;Button <span class="keyword">type</span>=<span class="string">"primary"</span>&gt;批量审批&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>FooterToolbar&gt;</span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure><h4 id="e-查看规则名称"><a href="#e-查看规则名称" class="headerlink" title="e) 查看规则名称"></a>e) 查看规则名称</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.点击规则名称记录当前点击的规则数据(row)</span></span><br><span class="line">&lt;a onClick=&#123;<span class="function"><span class="params">()</span> =&gt;</span> setRow(entity)&#125;&gt;&#123;dom&#125;&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/2.当前记录的规则有数据的时候，让抽屉可见，并使用ProDescriptions展示数据</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 点击抽屉组件的关闭按钮的时候，让row数据置空(此时Drawer会隐藏)</span></span><br><span class="line"><span class="regexp">&lt;Drawer</span></span><br><span class="line"><span class="regexp">        width=&#123;500&#125;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/当row数据存在的时候让抽屉组件显示</span></span><br><span class="line"><span class="regexp">        visible=&#123;!!row&#125;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/关闭抽屉组件的时候触发的方法</span></span><br><span class="line"><span class="regexp">        onClose=&#123;() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          setRow(undefined);</span></span><br><span class="line"><span class="regexp">        &#125;&#125;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/是否显示抽屉组件的关闭按钮</span></span><br><span class="line"><span class="regexp">        closable=&#123;false&#125;</span></span><br><span class="line"><span class="regexp">      &gt; </span></span><br><span class="line"><span class="regexp">        &#123;/</span>**如果row中有信息则显示规则的详细信息 *<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">        &#123;row?.name &amp;&amp; (</span></span><br><span class="line"><span class="regexp">          &lt;ProDescriptions&lt;TableListItem&gt;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/几列显示</span></span><br><span class="line"><span class="regexp">            column=&#123;2&#125;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/标题 如果row存在则取name，如果row不存在则不取name，避免row不存在的时候报错</span></span><br><span class="line"><span class="regexp">            title=&#123;row?.name&#125;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/设置ProDescriptions的数据</span></span><br><span class="line"><span class="regexp">            request=&#123;async () =&gt; (&#123;</span></span><br><span class="line"><span class="regexp">              data: row || &#123;&#125;,</span></span><br><span class="line"><span class="regexp">            &#125;)&#125;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/传参，参数改变的时候会触发reload</span></span><br><span class="line"><span class="regexp">            params=&#123;&#123;</span></span><br><span class="line"><span class="regexp">              id: row?.name,</span></span><br><span class="line"><span class="regexp">            &#125;&#125;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/设置ProDescriptions的列数据</span></span><br><span class="line"><span class="regexp">            columns=&#123;columns&#125;</span></span><br><span class="line"><span class="regexp">          /</span>&gt;</span><br><span class="line">        )&#125;</span><br><span class="line">&lt;<span class="regexp">/Drawer&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-ant-design-pro区块"><a href="#4-ant-design-pro区块" class="headerlink" title="4. ant design pro区块"></a>4. ant design pro区块</h1><p><a href="https://pro.ant.design/docs/block-cn" target="_blank" rel="noopener">https://pro.ant.design/docs/block-cn</a></p><p>区块是研发资产的一种，它是一系列快速搭建页面的代码片段，它可以帮助你快速的在项目中初始化好一个页面，帮助你更快速的开发代码。当前的区块都是页面级别的区块，你可以理解为它是一些项目中经常会用到的典型页面的模板，使用区块其实相当于从已有的项目中复制一些页面的代码到你当前的项目中。</p><ul><li>以前开发一个页面：创建 JS -&gt; 创建 CSS -&gt; 创建 Model -&gt; 创建 service -&gt; 写页面组件。</li><li>现在开发一个页面：下载区块 -&gt; 基于区块初始化好的页面组件修改代码。</li></ul><p>在 Pro 中资产被分为了两种，区块和模板。区块可以类比为一个组件，而模板代表一个页面。区块现在支持所有 antd 中的 demo，可以更加快速的将 demo 导入到项目中去。</p><h1 id="5-vue-antd-admin"><a href="#5-vue-antd-admin" class="headerlink" title="5.vue-antd-admin"></a>5.vue-antd-admin</h1><p><a href="https://github.com/iczer/vue-antd-admin" target="_blank" rel="noopener">https://github.com/iczer/vue-antd-admin</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Umi&amp;dva</title>
      <link href="/2019/12/23/umi&amp;dva/"/>
      <url>/2019/12/23/umi&amp;dva/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Umi介绍"><a href="#1-Umi介绍" class="headerlink" title="1. Umi介绍"></a>1. Umi介绍</h1><h2 id="1-1-Umi是什么"><a href="#1-1-Umi是什么" class="headerlink" title="1.1 Umi是什么"></a>1.1 Umi是什么</h2><p><a href="https://umijs.org/zh-CN/docs" target="_blank" rel="noopener">https://umijs.org/zh-CN/docs</a>   </p><p>一套可插拔的企业级 react 应用框架，由dva作者 sorrycc 完成，它既是一个框架也是一个工具。</p><p>Umi 以路由为基础的，同时支持配置式路由和约定式路由，保证路由的功能完备，并以此进行功能扩展。然后配以生命周期完善的插件体系，覆盖从源码到构建产物的每个生命周期，支持各种功能扩展和业务需求。</p><p>他在Umi中引入了 UI 工具 antd，打包工具 roadhog，路由 react-router和状态管理器 dva，做到了可插拔机制。通过约定、自动生成和解析代码等方式来辅助开发，减少开发者要写的代码量。</p><blockquote><p><strong>它主要具备以下功能：</strong></p></blockquote><ul><li><strong>可扩展</strong>，Umi 实现了完整的生命周期，并使其插件化，Umi 内部功能也全由插件完成。此外还支持插件和插件集，以满足功能和垂直域的分层需求。</li><li><strong>开箱即用</strong>，Umi 内置了路由、构建、部署、测试等，仅需一个依赖即可上手开发。并且还提供针对 React 的集成插件集，内涵丰富的功能，可满足日常 80% 的开发需求。</li><li><strong>企业级</strong>，经蚂蚁内部 3000+ 项目以及阿里、优酷、网易、飞猪、口碑等公司项目的验证，值得信赖。</li><li><strong>大量自研</strong>，包含微前端、组件打包、文档工具、请求库、hooks 库、数据流等，满足日常项目的周边需求。</li><li><strong>完备路由</strong>，同时支持配置式路由和约定式路由，同时保持功能的完备性，比如动态路由、嵌套路由、权限路由等等。</li><li><strong>面向未来</strong>，在满足需求的同时，我们也不会停止对新技术的探索。比如 dll 提速、modern mode、webpack@5、自动化 external、bundler less 等等。</li></ul><blockquote><p><strong>为什么不是？<a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">create-react-app</a></strong></p></blockquote><p>create-react-app 是基于 webpack 的打包层方案，包含 build、dev、lint 等，他在打包层把体验做到了极致，但是不包含路由，不是框架，也不支持配置。所以，如果大家想基于他修改部分配置，或者希望在打包层之外也做技术收敛时，就会遇到困难。</p><blockquote><p><strong>什么时候不用 umi？</strong></p></blockquote><p>如果你，</p><ul><li>需要支持 IE 8 或更低版本的浏览器</li><li>需要支持 React 16.8.0 以下的 React</li><li>需要跑在 Node 10 以下的环境中</li><li>有很强的 webpack 自定义需求和主观意愿</li><li>需要选择不同的路由方案</li></ul><p>Umi 可能不适合你。</p><h2 id="1-2-Umi-如何工作"><a href="#1-2-Umi-如何工作" class="headerlink" title="1.2 Umi 如何工作"></a>1.2 Umi 如何工作</h2><p>写写 Umi 背后的思考和重要概念。</p><h3 id="1-2-1-技术收敛"><a href="#1-2-1-技术收敛" class="headerlink" title="1.2.1 技术收敛"></a>1.2.1 技术收敛</h3><p><img src= "/img/loading.gif" data-src="D:%5C%E5%89%8D%E7%AB%AF%E5%A4%87%E8%AF%BE%5C17.REACT%5Creadme%5Cassets%5C1601014995473.png" alt="1601014995473"></p><p>这张图是给内部框架 Bigfish 画的，套到 Umi 上同样合适。他把大家常用的技术栈进行整理，收敛到一起，让大家只用 Umi 就可以完成 80% 的日常工作。</p><h3 id="1-2-2-插件和插件集"><a href="#1-2-2-插件和插件集" class="headerlink" title="1.2.2 插件和插件集"></a>1.2.2 插件和插件集</h3><p><img src= "/img/loading.gif" data-src="D:%5C%E5%89%8D%E7%AB%AF%E5%A4%87%E8%AF%BE%5C17.REACT%5Creadme%5Cassets%5C1601015019180.png" alt="1601015019180"></p><p>Umi 支持插件和插件集，通过这张图应该很好理解到他们的关系，通过插件集我们把插件收敛依赖然后支持不同的业务类型。</p><p>比如@umijs/preset-react就是一个Umi的插件集，里面整合了一些常用功能。</p><ul><li><a href="https://umijs.org/zh-CN/plugins/plugin-access" target="_blank" rel="noopener">plugin-access</a>，权限管理</li><li><a href="https://umijs.org/zh-CN/plugins/plugin-analytics" target="_blank" rel="noopener">plugin-analytics</a>，统计管理</li><li><a href="https://umijs.org/zh-CN/plugins/plugin-antd" target="_blank" rel="noopener">plugin-antd</a>，整合 antd UI 组件</li><li><a href="https://umijs.org/zh-CN/plugins/plugin-crossorigin" target="_blank" rel="noopener">plugin-crossorigin</a>，通常用于 JS 出错统计</li><li><a href="https://umijs.org/zh-CN/plugins/plugin-dva" target="_blank" rel="noopener">plugin-dva</a>，整合 dva</li><li><a href="https://umijs.org/zh-CN/plugins/plugin-helmet" target="_blank" rel="noopener">plugin-helmet</a>，整合 <a href="https://github.com/nfl/react-helmet" target="_blank" rel="noopener">react-helmet</a>，管理 HTML 文档标签（如标题、描述等）</li><li><a href="https://umijs.org/zh-CN/plugins/plugin-initial-state" target="_blank" rel="noopener">plugin-initial-state</a>，初始化数据管理</li><li><a href="https://umijs.org/zh-CN/plugins/plugin-layout" target="_blank" rel="noopener">plugin-layout</a>，配置启用 ant-design-pro 的布局</li><li><a href="https://umijs.org/zh-CN/plugins/plugin-locale" target="_blank" rel="noopener">plugin-locale</a>，国际化能力</li><li><a href="https://umijs.org/zh-CN/plugins/plugin-model" target="_blank" rel="noopener">plugin-model</a>，基于 hooks 的简易数据流</li><li><a href="https://umijs.org/zh-CN/plugins/plugin-request" target="_blank" rel="noopener">plugin-request</a>，基于 umi-request 和 umi-hooks 的请求方案&gt;</li></ul><h3 id="1-2-3-配置式路由和约定式路由"><a href="#1-2-3-配置式路由和约定式路由" class="headerlink" title="1.2.3 配置式路由和约定式路由"></a>1.2.3 配置式路由和约定式路由</h3><p>Umi 的路由既支持配置式，又支持约定式。配置式是对于现实的低头，也是大部分用户在用的，因为他功能强大；约定式是我们希望走去的方向，因为他简洁优雅。</p><h3 id="1-2-4-umi-临时文件"><a href="#1-2-4-umi-临时文件" class="headerlink" title="1.2.4 .umi 临时文件"></a>1.2.4 .umi 临时文件</h3><p>.umi 临时目录是整个 Umi 项目的发动机，你的入口文件、路由等等都在这里，这些是由 </p><p>umi 内部插件及三方插件生成的。</p><p>你通常会在 .umi 下看到以下目录，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+ .umi</span><br><span class="line">  + core     # 内部插件生成</span><br><span class="line">  + pluginA  # 外部插件生成</span><br><span class="line">  + presetB  # 外部插件生成</span><br><span class="line">  + umi.ts   # 入口文件</span><br></pre></td></tr></table></figure><p>临时文件是 Umi 框架中非常重要的一部分，框架或插件会根据你的代码生成临时文件，这些原来需要放在项目里的脏乱差的部分都被藏在了这里。</p><p>你可以在这里调试代码，但不要在 .git 仓库里提交他，因为他的临时性，每次启动 umi 时都会被删除并重新生成。</p><h1 id="2-Umi3的使用"><a href="#2-Umi3的使用" class="headerlink" title="2. Umi3的使用"></a>2. Umi3的使用</h1><h2 id="2-1-安装Umi创建项目"><a href="#2-1-安装Umi创建项目" class="headerlink" title="2.1  安装Umi创建项目"></a>2.1  安装Umi创建项目</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yarn global add umi</span><br><span class="line">$ umi -v</span><br><span class="line"><span class="number">3.2</span><span class="number">.22</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir myapp &amp;&amp; cd myapp</span><br><span class="line">$ yarn create umi</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="assets%5C1573453772780.png" alt="1573453772780"></p><p><img src= "/img/loading.gif" data-src="assets%5C1573453795170.png" alt="1573453795170"></p><p><img src= "/img/loading.gif" data-src="D:%5C%E5%89%8D%E7%AB%AF%E5%A4%87%E8%AF%BE%5C17.REACT%5Creadme%5Cassets%5C1601014079199.png" alt="1601014079199"></p><h2 id="2-2-升级到Umi3"><a href="#2-2-升级到Umi3" class="headerlink" title="2.2 升级到Umi3"></a>2.2 升级到Umi3</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 删除package.json中 dva 和 antd 的依赖 (Umi3中已经包含这两个依赖)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 删除package.json中 umi-plugin-react 依赖，新增umijs/preset-react 依赖</span><br><span class="line">   <span class="string">"@umijs/preset-react"</span>: <span class="string">"^1"</span>,</span><br><span class="line">       </span><br><span class="line"><span class="number">3.</span> 修改package.json中的node环境要求</span><br><span class="line">   <span class="string">"node"</span>: <span class="string">"&gt;=10.13.0"</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> tsconfig.json中的paths新增如下：</span><br><span class="line">   <span class="string">"@@/*"</span>: [<span class="string">"src/.umi/*"</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 修改 .umirc.ts文件</span><br><span class="line">    <span class="comment">//引入umi中的配置文件的类型 ts中要用</span></span><br><span class="line">    <span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">'umi'</span>;</span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ref: https://umijs.org/config/</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">      <span class="comment">//路由配置</span></span><br><span class="line">      routes: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">'/'</span>,</span><br><span class="line">          <span class="comment">//注意：这边文件的路径是相对于src/.mui中来确定的</span></span><br><span class="line">          component: <span class="string">'../layouts/index'</span>,</span><br><span class="line">          routes: [</span><br><span class="line">            &#123; </span><br><span class="line">              path: <span class="string">'/'</span>, </span><br><span class="line">              component: <span class="string">'../pages/index'</span> </span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="comment">//启用antd插件</span></span><br><span class="line">      <span class="comment">//每个插件都会对应一个 id 和一个 key，id 是路径的简写，key 是进一步简化后用于配置的唯一值。</span></span><br><span class="line">      <span class="comment">//比如插件 /node_modules/@umijs/plugin-antd ,id 为 @umijs/plugin-antd，key 为 antd。</span></span><br><span class="line">      antd: &#123; &#125;,</span><br><span class="line">      <span class="comment">//启用dva插件</span></span><br><span class="line">      dva: &#123;</span><br><span class="line">        hmr: <span class="literal">true</span>,  <span class="comment">//启用dva model的热更新</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//启用loacle插件  配置之后才可以使用useIntl </span></span><br><span class="line">      locale: &#123;</span><br><span class="line">        <span class="comment">//默认的语言环境</span></span><br><span class="line">        <span class="keyword">default</span>: <span class="string">'zh-CN'</span>,</span><br><span class="line">        <span class="comment">//antd开启国际化</span></span><br><span class="line">        antd: <span class="literal">true</span>, </span><br><span class="line">        <span class="comment">// default true, when it is true, will use `navigator.language` overwrite default</span></span><br><span class="line">        baseNavigator: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 浏览器兼容</span></span><br><span class="line">      targets: &#123;</span><br><span class="line">        ie: <span class="number">11</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 开启文件hash后缀</span></span><br><span class="line">      hash: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 启用 Hash 路由</span></span><br><span class="line">      history: &#123;</span><br><span class="line">        type: <span class="string">'hash'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// Theme for antd: https://ant.design/docs/react/customize-theme-cn</span></span><br><span class="line">      theme: &#123;</span><br><span class="line">        <span class="comment">// ...darkTheme,</span></span><br><span class="line">        <span class="comment">// 主要颜色,</span></span><br><span class="line">        <span class="string">'font-size-base'</span>: <span class="string">'34px'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//配置按需加载   即是否把构建产物进行拆分，在需要的时候下载额外的 JS 再执行。</span></span><br><span class="line">      dynamicImport: &#123;&#125;,</span><br><span class="line">      <span class="comment">// 指定react-router的base，部署到根目录时需要配置</span></span><br><span class="line">      base:<span class="string">'/'</span>,</span><br><span class="line">      <span class="comment">// 指定webpack的publicPath，指向静态资源文件所在的路径</span></span><br><span class="line">      publicPath:<span class="string">'./'</span>,</span><br><span class="line">      <span class="comment">// DefinePlugin 全局常量定义</span></span><br><span class="line">      define: &#123; &#125;,</span><br><span class="line">      <span class="comment">// 代理配置</span></span><br><span class="line">      proxy: &#123;</span><br><span class="line">        <span class="comment">// '/api': &#123;</span></span><br><span class="line">        <span class="comment">//   target: 'http://127.0.0.1:10000/',</span></span><br><span class="line">        <span class="comment">//   changeOrigin: true,</span></span><br><span class="line">        <span class="comment">//   pathRewrite: &#123; '^/api': '' &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 别名</span></span><br><span class="line">      alias: &#123;</span><br><span class="line">        <span class="string">'@'</span>: path.resolve(__dirname, <span class="string">'src'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> 注释掉 app.ts中的<span class="keyword">const</span> dva 代码</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    export const dva = &#123;</span></span><br><span class="line"><span class="comment">      config: &#123;</span></span><br><span class="line"><span class="comment">        onError(err: ErrorEvent) &#123;</span></span><br><span class="line"><span class="comment">          err.preventDefault();</span></span><br><span class="line"><span class="comment">          console.error(err.message);</span></span><br><span class="line"><span class="comment">        &#125;,</span></span><br><span class="line"><span class="comment">      &#125;,</span></span><br><span class="line"><span class="comment">    &#125;;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> 修改pages/index.tsx</span><br><span class="line">    <span class="comment">//useIntl 国际化的api</span></span><br><span class="line">    <span class="keyword">import</span> &#123; useIntl &#125; <span class="keyword">from</span> <span class="string">'umi'</span>;</span><br><span class="line"></span><br><span class="line">    &lt;a href=<span class="string">"https://umijs.org/guide/getting-started.html"</span>&gt;</span><br><span class="line">        &#123;useIntl().formatMessage(&#123; <span class="attr">id</span>: <span class="string">'index.start'</span> &#125;)&#125;</span><br><span class="line">    &lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-运行项目"><a href="#2-3-运行项目" class="headerlink" title="2.3 运行项目"></a>2.3 运行项目</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//然后安装依赖</span></span><br><span class="line">$ yarn</span><br><span class="line"></span><br><span class="line"><span class="comment">//然后启动应用</span></span><br><span class="line">$ yarn start</span><br></pre></td></tr></table></figure><p>几秒钟后，你会看到以下输出，</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DONE  Compiled successfully <span class="keyword">in</span> <span class="number">212</span>ms</span><br><span class="line"></span><br><span class="line"> App running at:</span><br><span class="line"> - Local:   http:<span class="comment">//localhost:8000/</span></span><br><span class="line"> - Network: http:<span class="comment">//&#123;&#123; YourIP &#125;&#125;:8000/</span></span><br></pre></td></tr></table></figure><p>在浏览器里打开 <a href="http://localhost:8000/" target="_blank" rel="noopener">http://localhost:8000</a>，你会看到 umi 的欢迎界面。</p><p><img src= "/img/loading.gif" data-src="assets%5C1573453872519.png" alt="img"></p><h2 id="2-4-目录结构介绍"><a href="#2-4-目录结构介绍" class="headerlink" title="2.4 目录结构介绍"></a>2.4 目录结构介绍</h2><p><img src= "/img/loading.gif" data-src="D:%5C%E5%89%8D%E7%AB%AF%E5%A4%87%E8%AF%BE%5C17.REACT%5Creadme%5Cassets%5C1601020141915.png" alt="1601020141915"></p><h2 id="2-5-配置文件介绍"><a href="#2-5-配置文件介绍" class="headerlink" title="2.5 配置文件介绍"></a>2.5 配置文件介绍</h2><h3 id="2-5-1-editorconfig"><a href="#2-5-1-editorconfig" class="headerlink" title="2.5.1 .editorconfig"></a>2.5.1 .editorconfig</h3><p>该文件是配置编辑器的一些设置，这里我修改了一个缩进，indent_size = 4。因为个人比较喜欢4个缩进，看着舒服。</p><h3 id="2-5-2-env"><a href="#2-5-2-env" class="headerlink" title="2.5.2 .env"></a>2.5.2 .env</h3><p>该文件是项目环境配置文件，默认的是BROWSER=none，这时候项目启动后，浏览器不会自动打开。</p><h3 id="2-5-3-eslintrc"><a href="#2-5-3-eslintrc" class="headerlink" title="2.5.3 .eslintrc"></a>2.5.3 .eslintrc</h3><p>多人开发时候，一套良好的代码规范是非常必要的。这里配置了一份基础eslint文件，供参考。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"env"</span>: &#123;</span><br><span class="line">    <span class="string">"es6"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"node"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"browser"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"mocha"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"extends"</span>: [</span><br><span class="line">    <span class="string">"eslint:recommended"</span>,</span><br><span class="line">    <span class="string">"react-app"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"rules"</span>: &#123;</span><br><span class="line">    <span class="string">"strict"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="comment">//"indent": ["error", 4, &#123; "SwitchCase": 1 &#125;],</span></span><br><span class="line">    <span class="string">"eqeqeq"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"no-lone-blocks"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"no-lonely-if"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"no-multi-spaces"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"no-multiple-empty-lines"</span>: [</span><br><span class="line">      <span class="string">"error"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"max"</span>: <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"no-param-reassign"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"no-spaced-func"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"no-use-before-define"</span>: <span class="string">"warn"</span>,</span><br><span class="line">    <span class="string">"no-unused-vars"</span>: <span class="string">"warn"</span>,</span><br><span class="line">    <span class="string">"no-with"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"default-case"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"key-spacing"</span>: [</span><br><span class="line">      <span class="string">"error"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"beforeColon"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"afterColon"</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"comma-spacing"</span>: [</span><br><span class="line">      <span class="string">"error"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"before"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"after"</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"generator-star-spacing"</span>: [</span><br><span class="line">      <span class="string">"error"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"before"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"after"</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"semi"</span>: [</span><br><span class="line">      <span class="string">"warn"</span>,</span><br><span class="line">      <span class="string">"always"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"omitLastInOneLineBlock"</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"no-restricted-globals"</span>: <span class="string">"off"</span>,</span><br><span class="line">    <span class="string">"array-callback-return"</span>: <span class="string">"off"</span>,</span><br><span class="line">    <span class="string">"no-console"</span>: [</span><br><span class="line">      <span class="string">"warn"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"allow"</span>: [</span><br><span class="line">          <span class="string">"info"</span>,</span><br><span class="line">          <span class="string">"warn"</span>,</span><br><span class="line">          <span class="string">"error"</span>,</span><br><span class="line">          <span class="string">"time"</span>,</span><br><span class="line">          <span class="string">"timeEnd"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"react/react-in-jsx-scope"</span>: <span class="string">"warn"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-3-umirc"><a href="#2-5-3-umirc" class="headerlink" title="2.5.3 .umirc"></a>2.5.3 .umirc</h3><p>.umirc为Umi项目的配置文件，.umirc.js 和 config/config.js二选一</p><h3 id="2-5-4-tsconfig-json"><a href="#2-5-4-tsconfig-json" class="headerlink" title="2.5.4 tsconfig.json"></a>2.5.4 tsconfig.json</h3><p>typescript的配置文件，可以配置ts编译的一些特征</p><p><a href="https://www.jianshu.com/p/78dcb09dac2c" target="_blank" rel="noopener">https://www.jianshu.com/p/78dcb09dac2c</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tsconfig.json 对象类型的索引签名隐式具有"any"类型 报错</span></span><br><span class="line"><span class="string">"suppressImplicitAnyIndexErrors"</span>:<span class="literal">true</span>,</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="comment">/* Basic Options */</span></span><br><span class="line">    <span class="string">"target"</span>: <span class="string">"es5"</span> <span class="comment">/* target用于指定编译之后的版本目标: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. */</span>,</span><br><span class="line">    <span class="string">"module"</span>: <span class="string">"commonjs"</span> <span class="comment">/* 用来指定要使用的模块标准: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */</span>,</span><br><span class="line">    <span class="string">"lib"</span>: [<span class="string">"es6"</span>, <span class="string">"dom"</span>] <span class="comment">/* lib用于指定要包含在编译中的库文件 */</span>,</span><br><span class="line">    <span class="string">"allowJs"</span>: <span class="literal">true</span>,                       <span class="comment">/* allowJs设置的值为true或false，用来指定是否允许编译js文件，默认是false，即不编译js文件 */</span></span><br><span class="line">    <span class="string">"checkJs"</span>: <span class="literal">true</span>,                       <span class="comment">/* checkJs的值为true或false，用来指定是否检查和报告js文件中的错误，默认是false */</span></span><br><span class="line">    <span class="string">"jsx"</span>: <span class="string">"preserve"</span>,                     <span class="comment">/* 指定jsx代码用于的开发环境: 'preserve', 'react-native', or 'react'. */</span></span><br><span class="line">    <span class="string">"declaration"</span>: <span class="literal">true</span>,                   <span class="comment">/* declaration的值为true或false，用来指定是否在编译的时候生成相应的".d.ts"声明文件。如果设为true，编译每个ts文件之后会生成一个js文件和一个声明文件。但是declaration和allowJs不能同时设为true */</span></span><br><span class="line">    <span class="string">"declarationMap"</span>: <span class="literal">true</span>,                <span class="comment">/* 值为true或false，指定是否为声明文件.d.ts生成map文件 */</span></span><br><span class="line">    <span class="string">"sourceMap"</span>: <span class="literal">true</span>,                     <span class="comment">/* sourceMap的值为true或false，用来指定编译时是否生成.map文件 */</span></span><br><span class="line">    <span class="string">"outFile"</span>: <span class="string">"./"</span>,                       <span class="comment">/* outFile用于指定将输出文件合并为一个文件，它的值为一个文件路径名。比如设置为"./dist/main.js"，则输出的文件为一个main.js文件。但是要注意，只有设置module的值为amd和system模块时才支持这个配置 */</span></span><br><span class="line">    <span class="string">"outDir"</span>: <span class="string">"./"</span>,                        <span class="comment">/* outDir用来指定输出文件夹，值为一个文件夹路径字符串，输出的文件都将放置在这个文件夹 */</span></span><br><span class="line">    <span class="string">"rootDir"</span>: <span class="string">"./"</span>,                       <span class="comment">/* 用来指定编译文件的根目录，编译器会在根目录查找入口文件，如果编译器发现以rootDir的值作为根目录查找入口文件并不会把所有文件加载进去的话会报错，但是不会停止编译 */</span></span><br><span class="line">    <span class="string">"composite"</span>: <span class="literal">true</span>,                     <span class="comment">/* 是否编译构建引用项目  */</span></span><br><span class="line">    <span class="string">"incremental"</span>: <span class="literal">true</span>,                   <span class="comment">/* Enable incremental compilation */</span></span><br><span class="line">    <span class="string">"tsBuildInfoFile"</span>: <span class="string">"./"</span>,               <span class="comment">/* Specify file to store incremental compilation information */</span></span><br><span class="line">    <span class="string">"removeComments"</span>: <span class="literal">true</span>,                <span class="comment">/* removeComments的值为true或false，用于指定是否将编译后的文件中的注释删掉，设为true的话即删掉注释，默认为false */</span></span><br><span class="line">    <span class="string">"noEmit"</span>: <span class="literal">true</span>,                        <span class="comment">/* 不生成编译文件，这个一般比较少用 */</span></span><br><span class="line">    <span class="string">"importHelpers"</span>: <span class="literal">true</span>,                 <span class="comment">/* importHelpers的值为true或false，指定是否引入tslib里的辅助工具函数，默认为false */</span></span><br><span class="line">    <span class="string">"downlevelIteration"</span>: <span class="literal">true</span>,            <span class="comment">/* 当target为'ES5' or 'ES3'时，为'for-of', spread, and destructuring'中的迭代器提供完全支持 */</span></span><br><span class="line">    <span class="string">"isolatedModules"</span>: <span class="literal">true</span>,               <span class="comment">/* isolatedModules的值为true或false，指定是否将每个文件作为单独的模块，默认为true，它不可以和declaration同时设定 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Strict Type-Checking Options */</span></span><br><span class="line">    <span class="string">"strict"</span>: <span class="literal">true</span> <span class="comment">/* strict的值为true或false，用于指定是否启动所有类型检查，如果设为true则会同时开启下面这几个严格类型检查，默认为false */</span>,</span><br><span class="line">    <span class="string">"noImplicitAny"</span>: <span class="literal">true</span>,                 <span class="comment">/* noImplicitAny的值为true或false，如果我们没有为一些值设置明确的类型，编译器会默认认为这个值为any，如果noImplicitAny的值为true的话。则没有明确的类型会报错。默认值为false */</span></span><br><span class="line">    <span class="string">"strictNullChecks"</span>: <span class="literal">true</span>,              <span class="comment">/* strictNullChecks为true时，null和undefined值不能赋给非这两种类型的值，别的类型也不能赋给他们，除了any类型。还有个例外就是undefined可以赋值给void类型 */</span></span><br><span class="line">    <span class="string">"strictFunctionTypes"</span>: <span class="literal">true</span>,           <span class="comment">/* strictFunctionTypes的值为true或false，用于指定是否使用函数参数双向协变检查 */</span></span><br><span class="line">    <span class="string">"strictBindCallApply"</span>: <span class="literal">true</span>,           <span class="comment">/* 设为true后会对bind、call和apply绑定的方法的参数的检测是严格检测的 */</span></span><br><span class="line">    <span class="string">"strictPropertyInitialization"</span>: <span class="literal">true</span>,  <span class="comment">/* 设为true后会检查类的非undefined属性是否已经在构造函数里初始化，如果要开启这项，需要同时开启strictNullChecks，默认为false */</span></span><br><span class="line">   <span class="string">"noImplicitThis"</span>: <span class="literal">true</span>,                <span class="comment">/* 当this表达式的值为any类型的时候，生成一个错误 */</span></span><br><span class="line">    <span class="string">"alwaysStrict"</span>: <span class="literal">true</span>,                  <span class="comment">/* alwaysStrict的值为true或false，指定始终以严格模式检查每个模块，并且在编译之后的js文件中加入"use strict"字符串，用来告诉浏览器该js为严格模式 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Additional Checks */</span></span><br><span class="line">    <span class="string">"noUnusedLocals"</span>: <span class="literal">true</span>,                <span class="comment">/* 用于检查是否有定义了但是没有使用的变量，对于这一点的检测，使用eslint可以在你书写代码的时候做提示，你可以配合使用。它的默认值为false */</span></span><br><span class="line">    <span class="string">"noUnusedParameters"</span>: <span class="literal">true</span>,            <span class="comment">/* 用于检查是否有在函数体中没有使用的参数，这个也可以配合eslint来做检查，默认为false */</span></span><br><span class="line">    <span class="string">"noImplicitReturns"</span>: <span class="literal">true</span>,             <span class="comment">/* 用于检查函数是否有返回值，设为true后，如果函数没有返回值则会提示，默认为false */</span></span><br><span class="line">    <span class="string">"noFallthroughCasesInSwitch"</span>: <span class="literal">true</span>,    <span class="comment">/* 用于检查switch中是否有case没有使用break跳出switch，默认为false */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Module Resolution Options */</span></span><br><span class="line">    <span class="string">"moduleResolution"</span>: <span class="string">"node"</span>,            <span class="comment">/* 用于选择模块解析策略，有'node'和'classic'两种类型' */</span></span><br><span class="line">    <span class="string">"baseUrl"</span>: <span class="string">"./"</span>,                       <span class="comment">/* baseUrl用于设置解析非相对模块名称的基本目录，相对模块不会受baseUrl的影响 */</span></span><br><span class="line">    <span class="string">"paths"</span>: &#123;&#125;,                           <span class="comment">/* 用于设置模块名称到基于baseUrl的路径映射 */</span></span><br><span class="line">    <span class="string">"rootDirs"</span>: [],                        <span class="comment">/* rootDirs可以指定一个路径列表，在构建时编译器会将这个路径列表中的路径的内容都放到一个文件夹中 */</span></span><br><span class="line">    <span class="string">"typeRoots"</span>: [],                       <span class="comment">/* typeRoots用来指定声明文件或文件夹的路径列表，如果指定了此项，则只有在这里列出的声明文件才会被加载 */</span></span><br><span class="line">    <span class="string">"types"</span>: [],                           <span class="comment">/* types用来指定需要包含的模块，只有在这里列出的模块的声明文件才会被加载进来 */</span></span><br><span class="line">    <span class="string">"allowSyntheticDefaultImports"</span>: <span class="literal">true</span>,  <span class="comment">/* 用来指定允许从没有默认导出的模块中默认导入 */</span></span><br><span class="line">    <span class="string">"esModuleInterop"</span>: <span class="literal">true</span> <span class="comment">/* 通过为导入内容创建命名空间，实现CommonJS和ES模块之间的互操作性 */</span>,</span><br><span class="line">    <span class="string">"preserveSymlinks"</span>: <span class="literal">true</span>,              <span class="comment">/* 不把符号链接解析为其真实路径，具体可以了解下webpack和nodejs的symlink相关知识 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Source Map Options */</span></span><br><span class="line">    <span class="string">"sourceRoot"</span>: <span class="string">""</span>,                      <span class="comment">/* sourceRoot用于指定调试器应该找到TypeScript文件而不是源文件位置，这个值会被写进.map文件里 */</span></span><br><span class="line">    <span class="string">"mapRoot"</span>: <span class="string">""</span>,                         <span class="comment">/* mapRoot用于指定调试器找到映射文件而非生成文件的位置，指定map文件的根路径，该选项会影响.map文件中的sources属性 */</span></span><br><span class="line">    <span class="string">"inlineSourceMap"</span>: <span class="literal">true</span>,               <span class="comment">/* 指定是否将map文件的内容和js文件编译在同一个js文件中，如果设为true，则map的内容会以//# sourceMappingURL=然后拼接base64字符串的形式插入在js文件底部 */</span></span><br><span class="line">    <span class="string">"inlineSources"</span>: <span class="literal">true</span>,                 <span class="comment">/* 用于指定是否进一步将.ts文件的内容也包含到输入文件中 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Experimental Options */</span></span><br><span class="line">    <span class="string">"experimentalDecorators"</span>: <span class="literal">true</span> <span class="comment">/* 用于指定是否启用实验性的装饰器特性 */</span></span><br><span class="line">    <span class="string">"emitDecoratorMetadata"</span>: <span class="literal">true</span>,         <span class="comment">/* 用于指定是否为装饰器提供元数据支持，关于元数据，也是ES6的新标准，可以通过Reflect提供的静态方法获取元数据，如果需要使用Reflect的一些方法，需要引入ES2015.Reflect这个库 */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="string">"files"</span>: [], <span class="comment">// files可以配置一个数组列表，里面包含指定文件的相对或绝对路径，编译器在编译的时候只会编译包含在files中列出的文件，如果不指定，则取决于有没有设置include选项，如果没有include选项，则默认会编译根目录以及所有子目录中的文件。这里列出的路径必须是指定文件，而不是某个文件夹，而且不能使用* ? **/ 等通配符</span></span><br><span class="line">  <span class="string">"include"</span>: [],  <span class="comment">// include也可以指定要编译的路径列表，但是和files的区别在于，这里的路径可以是文件夹，也可以是文件，可以使用相对和绝对路径，而且可以使用通配符，比如"./src"即表示要编译src文件夹下的所有文件以及子文件夹的文件</span></span><br><span class="line">  <span class="string">"exclude"</span>: [],  <span class="comment">// exclude表示要排除的、不编译的文件，它也可以指定一个列表，规则和include一样，可以是文件或文件夹，可以是相对路径或绝对路径，可以使用通配符</span></span><br><span class="line">  <span class="string">"extends"</span>: <span class="string">""</span>,   <span class="comment">// extends可以通过指定一个其他的tsconfig.json文件路径，来继承这个配置文件里的配置，继承来的文件的配置会覆盖当前文件定义的配置。TS在3.2版本开始，支持继承一个来自Node.js包的tsconfig.json配置文件</span></span><br><span class="line">  <span class="string">"compileOnSave"</span>: <span class="literal">true</span>,  <span class="comment">// compileOnSave的值是true或false，如果设为true，在我们编辑了项目中的文件保存的时候，编辑器会根据tsconfig.json中的配置重新生成文件，不过这个要编辑器支持</span></span><br><span class="line">  <span class="string">"references"</span>: [],  <span class="comment">// 一个对象数组，指定要引用的项目</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-路由和页面跳转"><a href="#2-6-路由和页面跳转" class="headerlink" title="2.6 路由和页面跳转"></a>2.6 路由和页面跳转</h2><h3 id="2-6-1-新建路由"><a href="#2-6-1-新建路由" class="headerlink" title="2.6.1 新建路由"></a>2.6.1 新建路由</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.敲入命令如下</span></span><br><span class="line">$   umi g page product/index --typescript --less</span><br><span class="line"></span><br><span class="line">   create src/pages/product/index.js</span><br><span class="line">   create src/pages/product/index.css</span><br><span class="line">✔  success</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.修改 .umirc.ts文件中路由配置</span></span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      <span class="comment">//注意：这边文件的路径是相对于src/.mui中来确定的</span></span><br><span class="line">      component: <span class="string">'../layouts/index'</span>,</span><br><span class="line">      routes: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">'/product/index'</span>,</span><br><span class="line">          component: <span class="string">'../pages/product/index'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; </span><br><span class="line">          path: <span class="string">'/'</span>, </span><br><span class="line">          component: <span class="string">'../pages/index'</span> </span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.在src目录下创建typings.d.ts 文件 </span></span><br><span class="line"><span class="comment">//模块声明文件：不写在引入less的时候ts会警告</span></span><br><span class="line">declare <span class="built_in">module</span> <span class="string">'slash2'</span>;</span><br><span class="line">declare <span class="built_in">module</span> <span class="string">'*.css'</span>;</span><br><span class="line">declare <span class="built_in">module</span> <span class="string">'*.less'</span>;</span><br><span class="line">declare <span class="built_in">module</span> <span class="string">'*.scss'</span>;</span><br><span class="line">declare <span class="built_in">module</span> <span class="string">'*.sass'</span>;</span><br><span class="line">declare <span class="built_in">module</span> <span class="string">'*.svg'</span>;</span><br><span class="line">declare <span class="built_in">module</span> <span class="string">'*.png'</span>;</span><br><span class="line">declare <span class="built_in">module</span> <span class="string">'*.jpg'</span>;</span><br><span class="line">declare <span class="built_in">module</span> <span class="string">'*.jpeg'</span>;</span><br><span class="line">declare <span class="built_in">module</span> <span class="string">'*.gif'</span>;</span><br><span class="line">declare <span class="built_in">module</span> <span class="string">'*.bmp'</span>;</span><br><span class="line">declare <span class="built_in">module</span> <span class="string">'*.tiff'</span>;</span><br><span class="line">declare <span class="built_in">module</span> <span class="string">'omit.js'</span>;</span><br></pre></td></tr></table></figure><h3 id="2-6-2-约定式路由"><a href="#2-6-2-约定式路由" class="headerlink" title="2.6.2 约定式路由"></a>2.6.2 约定式路由</h3><p>除配置式路由外，Umi 也支持约定式路由。约定式路由也叫文件路由，就是不需要手写配置，文件系统即路由，通过目录和文件及其命名分析出路由配置。</p><p><strong>如果没有 routes 配置，Umi 会进入约定式路由模式</strong>，然后分析 <code>src/pages</code> 目录拿到路由配置。</p><p>比如以下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">  └── pages</span><br><span class="line">    ├── index.tsx</span><br><span class="line">    └── users.tsx</span><br></pre></td></tr></table></figure><p>会得到以下路由配置，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123; exact: true, path: &#39;&#x2F;&#39;, component: &#39;@&#x2F;pages&#x2F;index&#39; &#125;,</span><br><span class="line">  &#123; exact: true, path: &#39;&#x2F;users&#39;, component: &#39;@&#x2F;pages&#x2F;users&#39; &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>需要注意的是，满足以下任意规则的文件不会被注册为路由，</p><ul><li>以 <code>.</code> 或 <code>_</code> 开头的文件或目录</li><li>以 <code>d.ts</code> 结尾的类型定义文件</li><li>以 <code>test.ts</code>、<code>spec.ts</code>、<code>e2e.ts</code> 结尾的测试文件（适用于 <code>.js</code>、<code>.jsx</code> 和 <code>.tsx</code> 文件）</li><li><code>components</code> 和 <code>component</code> 目录</li><li><code>utils</code> 和 <code>util</code> 目录</li><li>不是 <code>.js</code>、<code>.jsx</code>、<code>.ts</code> 或 <code>.tsx</code> 文件</li><li>文件内容不包含 JSX 元素</li></ul><p><strong>所以当我们把.umirc.js中的routes配置注释掉的时候，访问路径<a href="http://localhost:8000/#/product" target="_blank" rel="noopener">http://localhost:8000/#/product</a>能够正常展示页面。</strong></p><h3 id="2-6-3-路由配置"><a href="#2-6-3-路由配置" class="headerlink" title="2.6.3 路由配置"></a>2.6.3 路由配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">component: <span class="string">'@/layouts/index'</span>         <span class="comment">//配置页面模板，不同的路由可以配置不同的layout</span></span><br><span class="line">&#123; <span class="attr">path</span>: <span class="string">'/one'</span>, <span class="attr">exact</span>: <span class="literal">true</span> &#125;        <span class="comment">//严格匹配，location 是否和 path 完全对应上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置子路由</span></span><br><span class="line">routes: [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">'/list'</span>, <span class="attr">component</span>: <span class="string">'list'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">'/admin'</span>, <span class="attr">component</span>: <span class="string">'admin'</span> &#125;,</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line"><span class="comment">//重定向</span></span><br><span class="line">&#123; <span class="attr">exact</span>: <span class="literal">true</span>, <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">redirect</span>: <span class="string">'/list'</span> &#125;,</span><br></pre></td></tr></table></figure><h3 id="2-6-4-路由跳转和传参"><a href="#2-6-4-路由跳转和传参" class="headerlink" title="2.6.4 路由跳转和传参"></a>2.6.4 路由跳转和传参</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">'umi'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Link to=<span class="string">"/users"</span>&gt;Users Page&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; history &#125; <span class="keyword">from</span> <span class="string">'umi'</span>;</span><br><span class="line"><span class="comment">// 跳转到指定路由</span></span><br><span class="line">history.push(<span class="string">'/list'</span>);</span><br><span class="line"><span class="comment">// 带参数跳转到指定路由</span></span><br><span class="line">history.push(<span class="string">'/list?a=b'</span>);</span><br><span class="line">history.push(&#123;</span><br><span class="line">  pathname: <span class="string">'/list'</span>,</span><br><span class="line">  query: &#123;</span><br><span class="line">    a: <span class="string">'b'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 跳转到上一个路由</span></span><br><span class="line">history.goBack();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//路由组件可通过 props 获取到以下属性，</span></span><br><span class="line"></span><br><span class="line">match，当前路由和 url match 后的对象，包含 params、path、url 和 isExact 属性</span><br><span class="line">location，表示应用当前出于哪个位置，包含 pathname、search、query 等属性</span><br><span class="line">history，同 api history 接口</span><br><span class="line">route，当前路由配置，包含 path、exact、component、routes 等</span><br><span class="line">routes，全部路由信息</span><br></pre></td></tr></table></figure><h3 id="2-6-5-动态路由参数"><a href="#2-6-5-动态路由参数" class="headerlink" title="2.6.5 动态路由参数"></a>2.6.5 动态路由参数</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.新建productDetail/index/[id].tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./productDetail.less'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//要从props中获取location history match等参数，需要引入RouteComponentProps类型</span></span><br><span class="line"><span class="keyword">import</span> &#123; RouteComponentProps &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> RouterInfo &#123;</span><br><span class="line">  id: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (props: RouteComponentProps&lt;RouterInfo&gt;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1 className=&#123;styles.title&#125;&gt;Page productDetail/index ---&#123;props.match.params.id&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.修改.umirc.ts</span></span><br><span class="line">routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      <span class="comment">//注意：这边文件的路径是相对于src/.mui中来确定的</span></span><br><span class="line">      component: <span class="string">'../layouts/index'</span>,</span><br><span class="line">      routes: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">'/product/index'</span>,</span><br><span class="line">          component: <span class="string">'../pages/product/index'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; </span><br><span class="line">          path: <span class="string">'/productDetail/:id'</span>, </span><br><span class="line">          component: <span class="string">'../pages/productDetail/index/[id]'</span> </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; </span><br><span class="line">          path: <span class="string">'/'</span>, </span><br><span class="line">          component: <span class="string">'../pages/index'</span> </span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><h2 id="2-7-样式和资源文件"><a href="#2-7-样式和资源文件" class="headerlink" title="2.7 样式和资源文件"></a>2.7 样式和资源文件</h2><h3 id="2-7-1-全局样式"><a href="#2-7-1-全局样式" class="headerlink" title="2.7.1 全局样式"></a>2.7.1 全局样式</h3><p>Umi 中约定 <code>src/global.css</code> 为全局样式，如果存在此文件，会被自动引入到入口文件最前面。</p><p>比如用于覆盖样式，</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ant-select-selection</span> &#123;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">51px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-7-2-CSS-Modules"><a href="#2-7-2-CSS-Modules" class="headerlink" title="2.7.2 CSS Modules"></a>2.7.2 CSS Modules</h3><p>Umi 会自动识别 CSS Modules 的使用，你把他当做 CSS Modules 用时才是 CSS Modules。</p><p>比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CSS Modules</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./foo.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非 CSS Modules</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./foo.css'</span>;</span><br></pre></td></tr></table></figure><h3 id="2-7-3-CSS-预处理器"><a href="#2-7-3-CSS-预处理器" class="headerlink" title="2.7.3 CSS 预处理器"></a>2.7.3 CSS 预处理器</h3><p>Umi 内置支持 less，不支持 sass 和 stylus，但如果有需求，可以通过 chainWebpack 配置或者 Umi 插件的形式支持。</p><h3 id="2-7-4-ts中使用图片"><a href="#2-7-4-ts中使用图片" class="headerlink" title="2.7.4 ts中使用图片"></a>2.7.4 ts中使用图片</h3><p>通过 require 引用相对路径的图片。</p><p>比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;require(</span>'<span class="attr">.</span>/<span class="attr">foo.png</span>')&#125; /&gt;</span></span></span><br></pre></td></tr></table></figure><p>支持别名，比如通过 <code>@</code> 指向 src 目录：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;require(</span>'@/<span class="attr">foo.png</span>')&#125; /&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="2-7-5-CSS-里使用图片"><a href="#2-7-5-CSS-里使用图片" class="headerlink" title="2.7.5 CSS 里使用图片"></a>2.7.5 CSS 里使用图片</h3><p>通过相对路径引用。</p><p>比如，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.logo &#123;</span><br><span class="line">  background: url(./foo.png);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CSS 里也支持别名，但需要在前面加 <code>~</code> 前缀，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.logo &#123;</span><br><span class="line">  background: url(~@/foo.png);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>这是 webpack 的规则，如果切到其他打包工具，可能会有变化</li><li>less 中同样适用</li></ol><h3 id="2-7-6-Base64-编译"><a href="#2-7-6-Base64-编译" class="headerlink" title="2.7.6 Base64 编译"></a>2.7.6 Base64 编译</h3><p>通过相对路径引入图片的时候，如果图片小于 10K，会被编译为 Base64，否则会被构建为独立的图片文件。</p><p>10K 这个阈值可以通过 <a href="https://umijs.org/zh-CN/config#inlinelimit" target="_blank" rel="noopener">inlineLimit 配置</a>修改。</p><h2 id="2-8-国际化"><a href="#2-8-国际化" class="headerlink" title="2.8 国际化"></a>2.8 国际化</h2><p>@umijs/plugin-locale是umi中的一个国际化插件，用于解决 i18n 问题。</p><h3 id="2-8-1-开启国际化"><a href="#2-8-1-开启国际化" class="headerlink" title="2.8.1 开启国际化"></a>2.8.1 开启国际化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在.umirc.ts中配置locale之后即开启该插件</span></span><br><span class="line">  locale: &#123;</span><br><span class="line">    <span class="comment">//默认的语言环境</span></span><br><span class="line">    <span class="keyword">default</span>: <span class="string">'zh-CN'</span>,</span><br><span class="line">    <span class="comment">//antd开启国际化</span></span><br><span class="line">    antd: <span class="literal">true</span>, </span><br><span class="line">    <span class="comment">// default true, when it is true, will use `navigator.language` overwrite default</span></span><br><span class="line">    baseNavigator: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="2-8-2-约定式多语言支持"><a href="#2-8-2-约定式多语言支持" class="headerlink" title="2.8.2 约定式多语言支持"></a>2.8.2 约定式多语言支持</h3><p>比如以下目录，项目就拥有了 <code>zh-CN</code> 与 <code>en-US</code> 国际化语言切换(文件名必须要符合规范)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+ src</span><br><span class="line">  + locales</span><br><span class="line">    - zh-CN.ts</span><br><span class="line">    - en-US.ts</span><br><span class="line">  + pages</span><br></pre></td></tr></table></figure><h3 id="2-8-3-主要API"><a href="#2-8-3-主要API" class="headerlink" title="2.8.3 主要API"></a>2.8.3 主要API</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># getAllLocales 获取当前获得所有国际化文件的列表，默认会在 locales 文件夹下寻找类似 en-US.(js|json|ts) 文件。</span><br><span class="line"><span class="keyword">import</span> &#123; getAllLocales &#125; <span class="keyword">from</span> <span class="string">'umi'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(getAllLocales()); <span class="comment">// [en-US,zh-CN,...]</span></span><br><span class="line"></span><br><span class="line"># getLocale 将获得当前选择的语言。</span><br><span class="line"><span class="keyword">import</span> &#123; getLocale &#125; <span class="keyword">from</span> <span class="string">'umi'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(getLocale()); <span class="comment">// en-US | zh-CN</span></span><br><span class="line"></span><br><span class="line"># useIntl 是最常用的 api,它可以获得 formatMessage 等 api 来进行具体的值绑定。</span><br><span class="line"><span class="keyword">import</span> &#123; useIntl &#125; <span class="keyword">from</span> <span class="string">'umi'</span>;</span><br><span class="line">&lt;a&gt;</span><br><span class="line">&#123;useIntl().formatMessage(&#123; id: <span class="string">'index.start'</span> &#125;)&#125;</span><br><span class="line">&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"># setLocale 设置切换语言，默认会刷新页面，可以通过设置第二个参数为 false ，来实现无刷新动态切换。</span></span><br><span class="line"><span class="regexp">import &#123; setLocale &#125; from 'umi';</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 刷新页面</span></span><br><span class="line"><span class="regexp">setLocale('zh-TW', true);</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 不刷新页面</span></span><br><span class="line"><span class="regexp">setLocale('zh-TW', false);</span></span><br></pre></td></tr></table></figure><h1 id="3-flux和redux"><a href="#3-flux和redux" class="headerlink" title="3.flux和redux"></a>3.flux和redux</h1><h2 id="3-1-Flux"><a href="#3-1-Flux" class="headerlink" title="3.1 Flux"></a>3.1 Flux</h2><p>Flux 是一种架构思想，专门解决软件的结构问题。它跟<a href="http://www.ruanyifeng.com/blog/2007/11/mvc.html" target="_blank" rel="noopener">MVC 架构</a>是同一类东西，但是更加<a href="http://www.infoq.com/news/2014/05/facebook-mvc-flux" target="_blank" rel="noopener">简单和清晰</a>。</p><p>首先，Flux将一个应用分成四个部分。</p><blockquote><ul><li><strong>View</strong>： 视图层</li><li><strong>Action</strong>（动作）：表示数据从应用程序发送到store的有效信息负载。它是 store 数据的<strong>唯一</strong>来源。一般来说你会通过 Dispatcher派发器将 action 传到 store。</li><li><strong>Dispatcher</strong>（派发器）：用来接收Actions、执行回调函数</li><li><strong>Store</strong>（数据层）：用来存放应用的状态，一旦发生变动，就提醒Views要更新页面</li></ul></blockquote><p><strong>Flux 的最大特点，就是数据的”单向流动”。</strong></p><blockquote><ol><li>用户访问 View</li><li>用户在View中Dispatcher一个Action，要求 Store 进行相应的更新</li><li>Store 更新后，发出一个”change”事件</li><li>View 收到”change”事件后，更新页面</li></ol></blockquote><p><img src= "/img/loading.gif" data-src="D:/%E5%89%8D%E7%AB%AF%E5%A4%87%E8%AF%BE/17.REACT/readme/assets/1553222968163.png" alt="1553222968163"></p><p><img src= "/img/loading.gif" data-src="D:/%E5%89%8D%E7%AB%AF%E5%A4%87%E8%AF%BE/17.REACT/readme/assets/1553223019430.png" alt="1553223019430"></p><h2 id="3-2-Redux"><a href="#3-2-Redux" class="headerlink" title="3.2 Redux"></a>3.2 Redux</h2><p><a href="http://cn.redux.js.org/" target="_blank" rel="noopener">http://cn.redux.js.org/</a></p><p>我们把Flux看做一个框架的理念的话，Redux是Flux的一种实现。Redux是SPA单页面应用程序中多个组件之间共享数据的一种方式。</p><p>Flux的基本原则是“单向数据流”，Redux在此基础上强调三个基本原则：</p><blockquote><p>1.唯一数据源 ：唯一数据源指的是应用的状态数据应该只存储在唯一的一个Store上。<br>2.保持状态只读 ： 保持状态只读，就是说不能去直接修改状态，要修改Store的状态，必须要通过派发一个action对象完成。<br>3.数据改变只能通过纯函数完成 ：这里所说的纯函数就是把Reducer，Reducer描述了state状态如何修改。Redux这个名字的前三个字母Red代表的就是Reducer，其实Redux名字的含义就是Reducer+Flux。</p></blockquote><p><img src= "/img/loading.gif" data-src="D:%5C%E5%89%8D%E7%AB%AF%E5%A4%87%E8%AF%BE%5C17.REACT%5Creadme%5Cassets/u=241910270,3281944895&fm=26&gp=0.png" alt="u=241910270,3281944895&amp;fm=26&amp;gp=0"></p><h2 id="3-3-dva"><a href="#3-3-dva" class="headerlink" title="3.3 dva"></a>3.3 dva</h2><h3 id="3-3-1-dva介绍"><a href="#3-3-1-dva介绍" class="headerlink" title="3.3.1 dva介绍"></a>3.3.1 dva介绍</h3><p>dva由阿里架构师 sorrycc 带领 team 完成的一套前端框架，dva 是一个基于 <a href="https://github.com/reduxjs/redux" target="_blank" rel="noopener">redux</a> 和 <a href="https://github.com/redux-saga/redux-saga" target="_blank" rel="noopener">redux-saga</a> (异步处理)的数据流方案，然后为了简化开发体验，dva 还额外内置了 <a href="https://github.com/ReactTraining/react-router" target="_blank" rel="noopener">react-router</a> 和 <a href="https://github.com/github/fetch" target="_blank" rel="noopener">fetch</a>，所以也可以理解为一个轻量级的应用框架。</p><blockquote><p><strong>特性</strong></p></blockquote><ul><li><strong>易学易用</strong>，仅有 6 个 api，对 redux 用户尤其友好，<a href="https://umijs.org/guide/with-dva.html" target="_blank" rel="noopener">配合 umi 使用</a>后更是降低为 0 API</li><li><strong>elm 概念</strong>，通过 reducers, effects 和 subscriptions 组织 model。elm是专注web前端的纯函数式语言。</li><li><strong>插件机制</strong>，比如 <a href="https://github.com/dvajs/dva/tree/master/packages/dva-loading" target="_blank" rel="noopener">dva-loading</a> 可以自动处理 loading 状态，不用一遍遍地写 showLoading 和 hideLoading</li><li><strong>支持 HMR</strong>，基于 <a href="https://github.com/dvajs/babel-plugin-dva-hmr" target="_blank" rel="noopener">babel-plugin-dva-hmr</a> 实现 components、routes 和 models 的 HMR</li></ul><h3 id="3-3-2-dva的数据流"><a href="#3-3-2-dva的数据流" class="headerlink" title="3.3.2 dva的数据流"></a>3.3.2 dva的数据流</h3><p><img src= "/img/loading.gif" data-src="D:%5C%E5%89%8D%E7%AB%AF%E5%A4%87%E8%AF%BE%5C17.REACT%5Creadme%5Cassets%5C1601034916207.png" alt="1601034916207"></p><p>用户在 <strong>视图层</strong> 会触发(dispatch)一些动作(action)，这些动作会传递到我们的Model.js 这个文件当中，根据action的名字，找到对用的方法(effect 或者 reducer) ，然后更新state，视图重新渲染。</p><h3 id="3-3-3-dva核心概念"><a href="#3-3-3-dva核心概念" class="headerlink" title="3.3.3 dva核心概念"></a>3.3.3 dva核心概念</h3><h4 id="a-model"><a href="#a-model" class="headerlink" title="a) model"></a>a) model</h4><p>其中，model 是 DVA 中最重要的概念，基本的属性如下：</p><ul><li>namespace：model 的命名空间，只能用字符串。一个大型应用可能包含多个 model，通过namespace区分。</li><li>state：当前 model 状态的初始值，表示当前状态。</li><li>reducers：用于处理同步操作，可以修改 state，由 action 触发。</li><li>effects：用于处理异步操作（例如：与服务端交互）和业务逻辑，也是由 action 触发。但是，它不可以修改 state，要通过触发 action 调用 reducer 实现对 state 的间接操作。</li></ul><h4 id="b-connect"><a href="#b-connect" class="headerlink" title="b) connect"></a>b) connect</h4><p>连接dva model和react组件，目的是为了让组件获取model中的数据和驱动model改变的方法。</p><h4 id="c-dispatch"><a href="#c-dispatch" class="headerlink" title="c) dispatch"></a>c) dispatch</h4><p>dispatch 函数就是和 dva model 打交道的唯一途径， dispatch 函数接受一个 action对象 作为入参。action对象需要有type字段</p><h4 id="d-action"><a href="#d-action" class="headerlink" title="d) action"></a>d) action</h4><p>action：一个对象，是 reducers 及 effects 的触发器，通过dispatch来触发，action对象需要有type字段</p><h2 id="3-4-dva实战"><a href="#3-4-dva实战" class="headerlink" title="3.4 dva实战"></a>3.4 dva实战</h2><h3 id="3-4-1-改造项目结构"><a href="#3-4-1-改造项目结构" class="headerlink" title="3.4.1 改造项目结构"></a>3.4.1 改造项目结构</h3><p><img src= "/img/loading.gif" data-src="D:%5C%E5%89%8D%E7%AB%AF%E5%A4%87%E8%AF%BE%5C17.REACT%5Creadme%5Cassets%5C1601195437274.png" alt="1601195437274"></p><h3 id="3-4-2-mock"><a href="#3-4-2-mock" class="headerlink" title="3.4.2 mock"></a>3.4.2 mock</h3><h4 id="a-mock介绍"><a href="#a-mock介绍" class="headerlink" title="a) mock介绍"></a>a) mock介绍</h4><p>Mock 是高效、易用、功能强大的 api 管理平台,旨在为开发、产品、测试人员提供更优雅的接口管理服务。可以帮助开发者轻松创建、发布、维护 API。主要用于项目的开发测试阶段。</p><p><a href="https://github.com/nuysoft/Mock/wiki" target="_blank" rel="noopener">https://github.com/nuysoft/Mock/wiki</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#1. 安装mockjs</span><br><span class="line">yarn add mockjs --dev</span><br><span class="line"></span><br><span class="line">#2. 修改.umirc.ts  开启mock</span><br><span class="line">  mock: &#123;&#125;</span><br><span class="line"></span><br><span class="line">#3. mock基本使用  </span><br><span class="line"><span class="comment">// 在项目mock文件夹下新建user.ts  代码如下</span></span><br><span class="line"><span class="keyword">import</span> &#123; Request, Response &#125; <span class="keyword">from</span> <span class="string">'express'</span>;</span><br><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">'mockjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">//测试mock   mock语法介绍 todos.....</span></span><br><span class="line">  <span class="string">'/api/test'</span>: &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">username</span>: <span class="string">'kenny'</span>, <span class="attr">sex</span>: <span class="number">6</span> &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="string">'GET /api/hi'</span>: <span class="function">(<span class="params">req: Request, res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">      id: <span class="number">1</span>,</span><br><span class="line">      username: <span class="string">'jaja'</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">    </span><br><span class="line">  <span class="string">'GET /api/mock'</span>: Mock.mock(&#123;</span><br><span class="line">    success: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">//随机生成一段中文</span></span><br><span class="line">    message: <span class="string">'@cparagraph'</span>,</span><br><span class="line">    <span class="comment">// 属性 list 的值是一个数组，其中含有 1 到 5 个元素</span></span><br><span class="line">    <span class="string">'list|1-5'</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 属性 sid 是一个自增数，起始值为 1，每次增 1</span></span><br><span class="line">        <span class="string">'sid|+1'</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="comment">// 属性 userId 是一个5位的随机码</span></span><br><span class="line">        <span class="string">'userId|5'</span>: <span class="string">''</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="b-mock-user-js使用mock提供接口数据"><a href="#b-mock-user-js使用mock提供接口数据" class="headerlink" title="b) mock/user.js使用mock提供接口数据"></a>b) mock/user.js使用mock提供接口数据</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Request, Response &#125; <span class="keyword">from</span> <span class="string">'express'</span>;</span><br><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">'mockjs'</span>;</span><br><span class="line"></span><br><span class="line">interface UserType &#123;</span><br><span class="line">  id: number;</span><br><span class="line">  name: string;</span><br><span class="line">  email: string;</span><br><span class="line">  website: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> users: UserType[] = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'zhangsan'</span>, <span class="attr">email</span>: <span class="string">'zhangsan@qq.com'</span>, <span class="attr">website</span>: <span class="string">'xx.com'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'lisi'</span>, <span class="attr">email</span>: <span class="string">'lisi@qq.com'</span>, <span class="attr">website</span>: <span class="string">'ll.com'</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">//查询所有用户</span></span><br><span class="line">  <span class="string">'GET /api/users'</span>: <span class="function">(<span class="params">req: Request, res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取参数信息</span></span><br><span class="line">    <span class="keyword">var</span> page = req.query.page;</span><br><span class="line">    <span class="keyword">var</span> data = &#123; <span class="attr">list</span>: users, <span class="attr">total</span>: <span class="number">105</span>, <span class="attr">page</span>: page &#125;;</span><br><span class="line">    res.json(data);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// GET POST 可省略</span></span><br><span class="line">  <span class="string">'/api/users/:id'</span>: <span class="function">(<span class="params">req: Request, res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="built_in">parseInt</span>(req.params.id);</span><br><span class="line">    <span class="keyword">const</span> u = users.find(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.id === id) &#123;</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    res.json(u);</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//根据id删除用户</span></span><br><span class="line">  <span class="string">'/api/users/delete/:id'</span>: <span class="function">(<span class="params">req: Request, res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="built_in">parseInt</span>(req.params.id);</span><br><span class="line">    <span class="keyword">const</span> index = users.findIndex(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.id == id) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    users.splice(index, <span class="number">1</span>);</span><br><span class="line">    res.json(&#123;</span><br><span class="line">      status: <span class="number">200</span>,</span><br><span class="line">      message: <span class="string">'删除成功'</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 支持自定义函数，API 参考 express@4</span></span><br><span class="line">  <span class="string">'POST /api/users/create'</span>: <span class="function">(<span class="params">req: Request, res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">    res.end(<span class="string">'OK'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-4-3-请求的封装"><a href="#3-4-3-请求的封装" class="headerlink" title="3.4.3 请求的封装"></a>3.4.3 请求的封装</h3><h4 id="a-fetch和umi-request"><a href="#a-fetch和umi-request" class="headerlink" title="a) fetch和umi-request"></a>a) fetch和umi-request</h4><p><strong>fetch</strong>是es6中推出的一种可替代ajax获取/提交数据的技术，有些高级浏览器已经可以使用window.fecth使用了。相比于使用jQuery.ajax更轻量，而且它支持Promise，更加符合现在的编程习惯。但是，一定记住fetch不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象。</p><p><strong><a href="https://link.zhihu.com/?target=https%3A//github.com/umijs/umi-request">umi-request</a></strong> 是基于 fetch 封装的开源 http 请求库，旨在为开发者提供一个统一的 API 调用方式，同时简化使用方式，提供了请求层常用的功能：</p><ul><li>URL 参数自动序列化</li><li>POST 数据提交方式简化</li><li>Response 返回处理简化</li><li>请求超时处理</li><li>请求缓存支持</li><li>GBK 编码处理</li><li>统一的错误处理方式</li><li>请求取消支持</li><li>Node 环境 http 请求</li><li>拦截器机制</li><li>洋葱中间件机制</li></ul><p><strong>umi-request和fetch和axios区别</strong></p><p><img src= "/img/loading.gif" data-src="D:%5C%E5%89%8D%E7%AB%AF%E5%A4%87%E8%AF%BE%5C17.REACT%5Creadme%5Cassets/Snipaste_2020-09-27_10-41-42.png" alt="Snipaste_2020-09-27_10-41-42"></p><h4 id="b-app-ts运行时配置"><a href="#b-app-ts运行时配置" class="headerlink" title="b) app.ts运行时配置"></a>b) app.ts运行时配置</h4><p>运行时配置文件，可以在这里扩展运行时的能力，比如修改路由、修改 render 方法等。</p><p>Umi约定 <code>src/app.tsx</code> 为运行时配置。比如我们可以再在 <code>src/app.ts</code> 中配置一些运行时的配置项来实现部分自定义需求。示例配置如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通知组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; notification &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="comment">//RequestConfig 请求的配置类型</span></span><br><span class="line"><span class="keyword">import</span> &#123; RequestConfig &#125; <span class="keyword">from</span> <span class="string">'umi'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ResponseError &#125; <span class="keyword">from</span> <span class="string">'umi-request'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求出错后的异常处理程序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> errorHandler = <span class="function">(<span class="params">error: ResponseError</span>) =&gt;</span> &#123;</span><br><span class="line">  notification.error(&#123;</span><br><span class="line">    description: <span class="string">'您的网络发生异常，无法连接服务器'</span>,</span><br><span class="line">    message: <span class="string">'网络异常'</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">throw</span> error;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出请求对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> request: RequestConfig = &#123;</span><br><span class="line">  errorHandler,</span><br><span class="line">  requestInterceptors: [</span><br><span class="line">    (url, options) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'请求拦截器'</span>);</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        url,</span><br><span class="line">        options,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  responseInterceptors: [</span><br><span class="line">    (response, options) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'响应拦截器'</span>)</span><br><span class="line">      <span class="keyword">return</span> response;</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="c-封装service"><a href="#c-封装service" class="headerlink" title="c) 封装service"></a>c) 封装service</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pages/user/services/index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">'umi'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">queryUserList</span>(<span class="params">&#123; page = <span class="number">1</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(<span class="string">`/api/users?page=<span class="subst">$&#123;page&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-4-新建页面-发送请求"><a href="#3-4-4-新建页面-发送请求" class="headerlink" title="3.4.4 新建页面 发送请求"></a>3.4.4 新建页面 发送请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建页面</span></span><br><span class="line">umi g page user/index --typescript --less</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.配置路由  .umirc.ts</span></span><br><span class="line">routes: [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/'</span>,</span><br><span class="line">        <span class="comment">//注意：这边文件的路径是相对于src/.mui中来确定的</span></span><br><span class="line">        component: <span class="string">'../layouts/index'</span>,</span><br><span class="line">        routes: [</span><br><span class="line">            &#123; </span><br><span class="line">                path: <span class="string">'/'</span>, </span><br><span class="line">                component: <span class="string">'../pages/index'</span> </span><br><span class="line">            &#125;,</span><br><span class="line">            &#123; </span><br><span class="line">                path: <span class="string">'/user'</span>, </span><br><span class="line">                component: <span class="string">'../pages/user/index'</span> </span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.pages/user/index.tsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./index.less'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; queryUserList &#125; <span class="keyword">from</span> <span class="string">'./services'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">//componentDidMount</span></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    getUsers();</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//发送请求获取数据</span></span><br><span class="line">  <span class="keyword">const</span> getUsers = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> queryUserList(&#123; <span class="attr">page</span>: <span class="number">1</span> &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1 className=&#123;styles.title&#125;&gt;Page user/index&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-4-5-编写dva-model"><a href="#3-4-5-编写dva-model" class="headerlink" title="3.4.5 编写dva model"></a>3.4.5 编写dva model</h3><p>dva 通过 <code>model</code> 的概念把一个领域的模型管理起来，包含同步更新 state 的 reducers，处理异步逻辑的 effects，订阅数据源的 subscriptions 。</p><p>好处在于可以统一管理模型数据和把模型数据共享到组件中。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user/models/index.ts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Effect 异步操作     Reducer  纯函数      Subscription 订阅更新</span></span><br><span class="line"><span class="keyword">import</span> &#123; Effect, Reducer, Subscription, Action &#125; <span class="keyword">from</span> <span class="string">'umi'</span>;</span><br><span class="line"><span class="comment">//查询用户的接口</span></span><br><span class="line"><span class="keyword">import</span> &#123; queryUserList &#125; <span class="keyword">from</span> <span class="string">'../services'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> interface UserItem &#123;</span><br><span class="line">  id: number;</span><br><span class="line">  name: string;</span><br><span class="line">  email: string;</span><br><span class="line">  website: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明用户模块state的数据类型  ?表示可有可无</span></span><br><span class="line"><span class="keyword">export</span> interface UserModelState &#123;</span><br><span class="line">  list?: UserItem[];</span><br><span class="line">  total?: number;</span><br><span class="line">  page?: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明用户model的数据类型</span></span><br><span class="line"><span class="keyword">export</span> interface UserModelType &#123;</span><br><span class="line">  <span class="comment">//名称空间</span></span><br><span class="line">  namespace: <span class="string">'user'</span>;</span><br><span class="line">  <span class="comment">//state数据</span></span><br><span class="line">  state: UserModelState;</span><br><span class="line">  <span class="comment">//异步方法</span></span><br><span class="line">  effects: &#123;</span><br><span class="line">    fetchUserList: Effect;</span><br><span class="line">    removeUserById?: Effect;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//纯函数</span></span><br><span class="line">  reducers: &#123;</span><br><span class="line">    save: Reducer&lt;UserModelState&gt;;</span><br><span class="line">    removeById?: Reducer&lt;UserModelState&gt;;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//订阅更新</span></span><br><span class="line">  subscriptions?: &#123; <span class="attr">setup</span>: Subscription &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明UserModel</span></span><br><span class="line"><span class="keyword">const</span> UserModel: UserModelType = &#123;</span><br><span class="line">  namespace: <span class="string">'user'</span>,</span><br><span class="line">  state: &#123;</span><br><span class="line">    list: [], <span class="comment">//所有用户信息的数组</span></span><br><span class="line">    total: <span class="number">0</span>, <span class="comment">//总用户个数</span></span><br><span class="line">    page: <span class="number">0</span>, <span class="comment">//当前页码</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//纯函数  操作state</span></span><br><span class="line">  reducers: &#123;</span><br><span class="line">    save(state, &#123; payload &#125;) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; list, total, page &#125; = payload;</span><br><span class="line">      <span class="comment">// 复制数组，将list, total, page内容放到到state</span></span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, list, total, page &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//用于处理异步操作和业务逻辑，不直接修改 state，简单的来说，就是获取从服务端获取数据，并且发起一个 action 交给 reducer。其中它用到了redux-saga，里面有几个常用的函数</span></span><br><span class="line">  effects: &#123;</span><br><span class="line">    <span class="comment">// * 表示生成器函数，该函数会返回一个迭代器</span></span><br><span class="line">    <span class="comment">// 参数 payload 表示有效负载的数据，在外部通过dispatch传递</span></span><br><span class="line">    <span class="comment">// put:  用于触发action  yield put(&#123; type: 'todos/add', payload: 'Learn Dva'&#125;);</span></span><br><span class="line">    <span class="comment">// call:用于调用异步逻辑，支持Promise，第一个参数是你要调用的函数，第二个参数开始是你要传递的参。const result = yield call(fetch, '/todos');</span></span><br><span class="line">    <span class="comment">// select:用于从state里获取数据。const todos = yield select(state =&gt; state.todos);</span></span><br><span class="line">    *fetchUserList(&#123; <span class="attr">payload</span>: &#123; page = <span class="number">1</span> &#125; &#125;, &#123; call, put &#125;) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; list, total &#125; = <span class="keyword">yield</span> call(queryUserList, &#123; page &#125;);</span><br><span class="line">      <span class="keyword">yield</span> put(&#123;</span><br><span class="line">        type: <span class="string">'save'</span>,</span><br><span class="line">        payload: &#123;</span><br><span class="line">          list: list,</span><br><span class="line">          total: <span class="built_in">parseInt</span>(total, <span class="number">10</span>),</span><br><span class="line">          page: <span class="built_in">parseInt</span>(page, <span class="number">10</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> UserModel;</span><br></pre></td></tr></table></figure><h3 id="3-4-6-编写页面"><a href="#3-4-6-编写页面" class="headerlink" title="3.4.6 编写页面"></a>3.4.6 编写页面</h3><p>到这里，我们已经单独完成了 model 和 页面，那么他们如何串联起来呢?</p><p>dva 提供了 <code>connect</code> 方法。如果你熟悉 redux，这个 connect 来自 react-redux。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pages/user/index.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; FC, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ConnectProps connect高阶函数的属性类型</span></span><br><span class="line"><span class="comment">//Loading 数据加载状态类型</span></span><br><span class="line"><span class="comment">//connect 高阶函数，主要作用将model和当前组件连接起来</span></span><br><span class="line"><span class="keyword">import</span> &#123; ConnectProps, Loading, connect &#125; <span class="keyword">from</span> <span class="string">'umi'</span>;</span><br><span class="line"><span class="comment">//users这个namespace的数据类型</span></span><br><span class="line"><span class="keyword">import</span> &#123; UserModelState &#125; <span class="keyword">from</span> <span class="string">'./models'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明当前页面的属性类型</span></span><br><span class="line"><span class="keyword">interface</span> PageProps <span class="keyword">extends</span> ConnectProps &#123;</span><br><span class="line">  user: UserModelState;</span><br><span class="line">  loading: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当前组件对象</span></span><br><span class="line"><span class="comment">//参数users表示模型层数据</span></span><br><span class="line"><span class="comment">//参数dispatch表示redux派发器</span></span><br><span class="line"><span class="comment">//参数loading表示数据加载状态</span></span><br><span class="line"><span class="keyword">const</span> UserPage: FC&lt;PageProps&gt; = <span class="function">(<span class="params">&#123; user, dispatch, loading &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; list,total &#125; = user;</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//dispatch一个action来触发对应的reducer</span></span><br><span class="line">    dispatch &amp;&amp;</span><br><span class="line">      dispatch(&#123;</span><br><span class="line">        <span class="keyword">type</span>: <span class="string">'user/fetchUserList'</span>,</span><br><span class="line">        <span class="comment">//payload 有效负载 ，dispatch传递参数的时候</span></span><br><span class="line">        payload: &#123;</span><br><span class="line">          page: <span class="number">1</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">return</span> &lt;div&gt;Hello &#123;<span class="built_in">JSON</span>.stringify(list)&#125;&lt;<span class="regexp">/div&gt;;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/connect 作用：将model和当前组件连接起来</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/参数 users 表示users这个namespace中的数据</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/参数 loading 表示users namespace中的数据是否加载完毕</span></span><br><span class="line"><span class="regexp">export default connect((&#123; user, loading &#125;: &#123; user: UserModelState; loading: Loading &#125;) =&gt; (&#123;</span></span><br><span class="line"><span class="regexp">  user,</span></span><br><span class="line"><span class="regexp">  loading: loading.models.user, /</span><span class="regexp">/表示users这个namespace的数据是否已经加载完毕</span></span><br><span class="line"><span class="regexp">&#125;))(UserPage);</span></span><br></pre></td></tr></table></figure><h3 id="3-4-7-使用订阅更新设置dva数据"><a href="#3-4-7-使用订阅更新设置dva数据" class="headerlink" title="3.4.7 使用订阅更新设置dva数据"></a>3.4.7 使用订阅更新设置dva数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pages/user/models/index.ts</span></span><br><span class="line"></span><br><span class="line">.........</span><br><span class="line"><span class="comment">//订阅更新</span></span><br><span class="line">subscriptions: &#123;</span><br><span class="line">    setup(&#123; dispatch, history &#125;) &#123;</span><br><span class="line">        <span class="comment">//监听url的变化，当访问路径是/user的时候触发fetchUserList这个effects</span></span><br><span class="line">        <span class="keyword">return</span> history.listen(<span class="function">(<span class="params">&#123; pathname &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (pathname === <span class="string">'/user'</span>) &#123;</span><br><span class="line">                dispatch(&#123;</span><br><span class="line">                    type: <span class="string">'fetchUserList'</span>,</span><br><span class="line">                    payload: &#123;</span><br><span class="line">                        page: <span class="number">1</span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注释掉pages/user/index.tsx    发送请求的代码</span></span><br></pre></td></tr></table></figure><h3 id="3-4-8-使用ant-design编写页面"><a href="#3-4-8-使用ant-design编写页面" class="headerlink" title="3.4.8 使用ant design编写页面"></a>3.4.8 使用ant design编写页面</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; FC,useEffect,useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Table, Pagination, Popconfirm, Button &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ConnectProps, Loading, connect &#125; <span class="keyword">from</span> <span class="string">'umi'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; UserModelState,UserItem &#125; <span class="keyword">from</span> <span class="string">'./models'</span>;</span><br><span class="line"></span><br><span class="line">interface PageProps extends ConnectProps &#123;</span><br><span class="line">  user: UserModelState;</span><br><span class="line">  loading: boolean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UserPage: FC&lt;PageProps&gt; = <span class="function">(<span class="params">&#123; user, dispatch, loading &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; list, total, page &#125; = user;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onChangeUserPagination</span>(<span class="params">page: number</span>) </span>&#123;</span><br><span class="line">    dispatch &amp;&amp;</span><br><span class="line">      dispatch(&#123;</span><br><span class="line">        type: <span class="string">'user/fetchUserList'</span>,</span><br><span class="line">        payload: &#123;</span><br><span class="line">          page: page,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//dispatch一个action来触发对应的reducer</span></span><br><span class="line">    dispatch &amp;&amp;</span><br><span class="line">      dispatch(&#123;</span><br><span class="line">        type: <span class="string">'user/fetchUserList'</span>,</span><br><span class="line">        <span class="comment">//payload 有效负载 ，dispatch传递参数的时候</span></span><br><span class="line">        payload: &#123;</span><br><span class="line">          page: <span class="number">1</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> toggle = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    setPopShow(<span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> columns = [</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">'用户名'</span>,</span><br><span class="line">      dataIndex: <span class="string">'name'</span>,</span><br><span class="line">      key: <span class="string">'name'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">'电子邮件'</span>,</span><br><span class="line">      dataIndex: <span class="string">'email'</span>,</span><br><span class="line">      key: <span class="string">'email'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">'个人网站'</span>,</span><br><span class="line">      dataIndex: <span class="string">'website'</span>,</span><br><span class="line">      key: <span class="string">'website'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">'操作'</span>,</span><br><span class="line">      key: <span class="string">'operation'</span>,</span><br><span class="line">      render: <span class="function">(<span class="params">item: UserItem</span>) =&gt;</span> (</span><br><span class="line">        &lt;span&gt;</span><br><span class="line">          &lt;Button&gt;编辑&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Popconfirm visible=&#123;popShow&#125; title="Confirm to delete?"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Button&gt;删除&lt;/</span>Button&gt;</span><br><span class="line">          &lt;<span class="regexp">/Popconfirm&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>span&gt;</span><br><span class="line">      ),</span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Table</span><br><span class="line">          loading=&#123;loading&#125;  <span class="comment">//表格的加载状态</span></span><br><span class="line">          columns=&#123;columns&#125;  <span class="comment">//表格列信息</span></span><br><span class="line">          dataSource=&#123;list&#125;  <span class="comment">//表格数据源</span></span><br><span class="line">          rowKey=&#123;(record:UserItem) =&gt; record.id&#125;  <span class="comment">//表格每一行数据的key</span></span><br><span class="line">          pagination=&#123;<span class="literal">false</span>&#125;   <span class="comment">//不显示表格默认的分页器</span></span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;Pagination</span><br><span class="line">          className=<span class="string">"ant-table-pagination"</span></span><br><span class="line">          total=&#123;total&#125; <span class="comment">// 数据总数</span></span><br><span class="line">          current=&#123;page&#125; <span class="comment">// 当前页数</span></span><br><span class="line">          onChange=&#123;onChangeUserPagination&#125;  <span class="comment">//改变页码的点击事件</span></span><br><span class="line">          pageSize=&#123;<span class="number">10</span>&#125;   <span class="comment">//每一页的数量</span></span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(<span class="function">(<span class="params">&#123; user, loading &#125;: &#123; user: UserModelState; loading: Loading &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">  user,</span><br><span class="line">  loading: loading.models.user,</span><br><span class="line">&#125;))(UserPage);</span><br></pre></td></tr></table></figure><h3 id="3-4-9-完成删除功能"><a href="#3-4-9-完成删除功能" class="headerlink" title="3.4.9 完成删除功能"></a>3.4.9 完成删除功能</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pages/user/services/index.tsx 新增请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteUserById</span>(<span class="params">id: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(<span class="string">`/api/users/delete/<span class="subst">$&#123;id&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//pages/user/models/index.tsx reducer和effect</span></span><br><span class="line"><span class="keyword">import</span> &#123; queryUserList, deleteUserById &#125; <span class="keyword">from</span> <span class="string">'../services'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//reducer中新增下面方法</span></span><br><span class="line"><span class="comment">//state的list可能是undefined，造成类型不匹配，所以这里要 state = &#123;list:[]&#125; 给list一个默认值</span></span><br><span class="line">removeById(state, &#123; payload &#125;) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; id &#125; = payload;</span><br><span class="line">    <span class="keyword">var</span> filterList =</span><br><span class="line">        state &amp;&amp;</span><br><span class="line">        state.list &amp;&amp;</span><br><span class="line">        state.list.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.id !== id) &#123;</span><br><span class="line">                <span class="keyword">return</span> item;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123; ...state, ...&#123; list: filterList &#125; &#125;;</span><br><span class="line">&#125;,</span><br><span class="line">    </span><br><span class="line"><span class="comment">//action中新增下面方法</span></span><br><span class="line"><span class="comment">//根据id删除指定用户  发送请求</span></span><br><span class="line">*removeUserById(&#123; payload: &#123; id &#125; &#125;, &#123; call, put &#125;) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">yield</span> call(deleteUserById, id);</span><br><span class="line">    <span class="keyword">yield</span> put(&#123;</span><br><span class="line">        <span class="keyword">type</span>: <span class="string">'removeById'</span>,</span><br><span class="line">        payload: &#123;</span><br><span class="line">            id: id,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"># 页面新增删除事件</span><br><span class="line">&lt;Popconfirm visible=&#123;popShow&#125; title=<span class="string">"Confirm to delete?"</span> onConfirm=&#123;<span class="function"><span class="params">()</span>=&gt;</span>deleteHandler(item.id)&#125;&gt;</span><br><span class="line">       &lt;Button onClick=&#123;<span class="function"><span class="params">()</span>=&gt;</span>&#123;toggle()&#125;&#125;&gt;删除&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Popconfirm&gt;</span><br><span class="line">                 </span><br><span class="line"><span class="comment">//控制pop弹框是否显示</span></span><br><span class="line"><span class="keyword">const</span> [popShow,setPopShow] = useState(<span class="literal">false</span>)</span><br><span class="line">   </span><br><span class="line"><span class="comment">//这边点击删除按钮后一定要将pop关闭，否则会报内存泄漏</span></span><br><span class="line"><span class="keyword">const</span> deleteHandler = <span class="function">(<span class="params">id:<span class="built_in">number</span></span>)=&gt;</span>&#123;   </span><br><span class="line">    setPopShow(<span class="literal">false</span>)</span><br><span class="line">    dispatch &amp;&amp;</span><br><span class="line">        dispatch(&#123;</span><br><span class="line">        <span class="keyword">type</span>: <span class="string">'user/removeUserById'</span>,</span><br><span class="line">        payload: &#123;</span><br><span class="line">            id,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> toggle = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    setPopShow(<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Uniapp实现多端开发(ts)</title>
      <link href="/2019/11/29/%E5%88%9D%E5%A7%8Buniapp/"/>
      <url>/2019/11/29/%E5%88%9D%E5%A7%8Buniapp/</url>
      
        <content type="html"><![CDATA[<p>#1.uni-app的基本使用</p><p>课程介绍：</p><p>基础部分：</p><ul><li>环境搭建</li><li>页面外观配置</li><li>数据绑定</li><li>uni-app的生命周期</li><li>组件的使用</li><li>uni-app中样式学习</li><li>在uni-app中使用字体图标和开启scss</li><li>条件注释跨端兼容</li><li>uni中的事件</li><li>导航跳转</li><li>组件创建和通讯，及组件的生命周期</li><li>uni-app中使用uni-ui库</li></ul><p>项目：极客商城项目</p><h2 id="1-1-uni-app介绍-官方网页"><a href="#1-1-uni-app介绍-官方网页" class="headerlink" title="1.1 uni-app介绍 官方网页"></a>1.1 uni-app介绍 <a href="https://uniapp.dcloud.io/resource" target="_blank" rel="noopener">官方网页</a></h2><p><code>uni-app</code> 是一个使用 <a href="https://vuejs.org/" target="_blank" rel="noopener">Vue.js</a> 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉）等多个平台。</p><p>即使不跨端，<code>uni-app</code>同时也是更好的小程序开发框架。</p><p>具有vue和微信小程序的开发经验，可快速上手uni-app</p><p>为什么要去学习uni-app？</p><p>相对开发者来说，减少了学习成本，因为只学会uni-app之后，即可开发出iOS、Android、H5、以及各种小程序的应用，不需要再去学习开发其他应用的框架，相对公司而言，也大大减少了开发成本。</p><h2 id="1-2-环境搭建"><a href="#1-2-环境搭建" class="headerlink" title="1.2 环境搭建"></a>1.2 环境搭建</h2><p>安装编辑器HbuilderX  <a href="https://www.dcloud.io/hbuilderx.html" target="_blank" rel="noopener">下载地址</a></p><p>HBuilderX是通用的前端开发工具，但为<code>uni-app</code>做了特别强化。</p><p>下载App开发版，可开箱即用</p><p>安装微信开发者工具 <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="noopener">下载地址</a></p><h2 id="1-3-利用HbuilderX初始化项目-js"><a href="#1-3-利用HbuilderX初始化项目-js" class="headerlink" title="1.3 利用HbuilderX初始化项目(js)"></a>1.3 利用HbuilderX初始化项目(js)</h2><ul><li><p>点击HbuilderX菜单栏文件&gt;项目&gt;新建</p></li><li><p>选择uni-app,填写项目名称，项目创建的目录</p><p><img src= "/img/loading.gif" data-src="./images/create.jpg" alt=""></p></li></ul><h2 id="1-4-使用vue-cli脚手架创建ts项目"><a href="#1-4-使用vue-cli脚手架创建ts项目" class="headerlink" title="1.4 使用vue/cli脚手架创建ts项目"></a>1.4 使用vue/cli脚手架创建ts项目</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create -p dcloudio/uni-preset-vue my-ts</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="assets%5C1602848342568.png" alt="1602848342568"></p><h2 id="1-5-运行项目"><a href="#1-5-运行项目" class="headerlink" title="1.5 运行项目"></a>1.5 运行项目</h2><p>在菜单栏中点击运行，运行到浏览器，选择浏览器即可运行</p><p>在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到小程序模拟器 -&gt; 微信开发者工具，即可在微信开发者工具里面体验uni-app</p><p>在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到手机或模拟器 -&gt; 选择调式的手机</p><p><strong>注意：</strong></p><ul><li>如果是第一次使用，需要先配置小程序ide的相关路径，才能运行成功</li><li>微信开发者工具在设置中安全设置，服务端口开启</li></ul><h2 id="1-6-介绍项目目录和文件作用"><a href="#1-6-介绍项目目录和文件作用" class="headerlink" title="1.6 介绍项目目录和文件作用"></a>1.6 介绍项目目录和文件作用</h2><p><code>pages.json</code> 文件用来对 uni-app 进行全局配置，决定页面文件的路径、窗口样式、原生的导航栏、底部的原生tabbar 等</p><p><code>manifest.json</code> 文件是应用的配置文件，用于指定应用的名称、图标、权限等。</p><p><code>App.vue</code>是我们的跟组件，所有页面都是在<code>App.vue</code>下进行切换的，是页面入口文件，可以调用应用的生命周期函数。</p><p><code>main.js</code>是我们的项目入口文件，主要作用是初始化<code>vue</code>实例并使用需要的插件。</p><p><code>uni.scss</code>文件的用途是为了方便整体控制应用的风格。比如按钮颜色、边框风格，<code>uni.scss</code>文件里预置了一批scss变量预置。</p><figure class="highlight plain"><figcaption><span>就是打包目录，在这里有各个平台的打包文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;pages&#96;&#96;&#96; 所有的页面存放目录</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;static&#96;&#96;&#96; 静态资源目录，例如图片等</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;components&#96;&#96;&#96; 组件存放目录</span><br><span class="line"></span><br><span class="line">为了实现多端兼容，综合考虑编译速度、运行性能等因素，&#96;uni-app&#96; 约定了如下开发规范：</span><br><span class="line"></span><br><span class="line">- 页面文件遵循 [Vue 单文件组件 (SFC) 规范](https:&#x2F;&#x2F;vue-loader.vuejs.org&#x2F;zh&#x2F;spec.html)</span><br><span class="line">- 组件标签靠近小程序规范，详见[uni-app 组件规范](https:&#x2F;&#x2F;uniapp.dcloud.io&#x2F;component&#x2F;README)</span><br><span class="line">- 接口能力（JS API）靠近微信小程序规范，但需将前缀 &#96;wx&#96; 替换为 &#96;uni&#96;，详见[uni-app接口规范](https:&#x2F;&#x2F;uniapp.dcloud.io&#x2F;api&#x2F;README)</span><br><span class="line">- 数据绑定及事件处理同 &#96;Vue.js&#96; 规范，同时补充了App及页面的生命周期</span><br><span class="line">- 为兼容多端运行，建议使用flex布局进行开发</span><br><span class="line"></span><br><span class="line"># 2.vue ts语法</span><br><span class="line"></span><br><span class="line">## 2.1 基本使用</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;javascript</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">&lt;image class&#x3D;&quot;logo&quot; src&#x3D;&quot;&#x2F;static&#x2F;logo.png&quot;&gt;&lt;&#x2F;image&gt;</span><br><span class="line">&lt;!--属性绑定--&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;text-area&quot;&gt;</span><br><span class="line">&lt;text class&#x3D;&quot;title&quot;&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;text&gt;</span><br><span class="line">&lt;view&gt;&#123;&#123;age&#125;&#125;&lt;&#x2F;view&gt;</span><br><span class="line">&lt;image v-bind:src&#x3D;&quot;img&quot;&gt;&lt;&#x2F;image&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;!--v-if和v-for--&gt;</span><br><span class="line">&lt;view v-for&#x3D;&quot;(item,i) in arr&quot; :key&#x3D;&quot;i&quot;&gt;名字：&#123;&#123;item.name&#125;&#125;---年龄：&#123;&#123;item.age&#125;&#125;&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view v-if&#x3D;&quot;flag&quot;&gt;显示我&lt;&#x2F;view&gt;</span><br><span class="line">&lt;!--点击事件--&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;tapHandle(1,$event)&quot;&gt;点我传参&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button @click.self&#x3D;&quot;printTitle&quot;&gt;点我不传参&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button @click.stop&#x3D;&quot;title &#x3D; &#39;ggg&#39;&quot;&gt;点我修改title&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue,</span><br><span class="line">Watch</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Index extends Vue &#123;</span><br><span class="line">&#x2F;&#x2F;1.响应式属性，对标之前的data函数返回的对象</span><br><span class="line">private title: String &#x3D; &#39;myTitle&#39;;</span><br><span class="line">private num: Number &#x3D; 123;</span><br><span class="line">private img: String &#x3D; &#39;http:&#x2F;&#x2F;destiny001.gitee.io&#x2F;image&#x2F;monkey_02.jpg&#39;</span><br><span class="line">private arr: &#123;&#125; [] &#x3D; [&#123;</span><br><span class="line">name: &#39;刘能&#39;,</span><br><span class="line">age: 29</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: &#39;赵四&#39;,</span><br><span class="line">age: 39</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: &#39;宋小宝&#39;,</span><br><span class="line">age: 49</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: &#39;小沈阳&#39;,</span><br><span class="line">age: 59</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">private flag: Boolean &#x3D; true;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.计算属性</span><br><span class="line">get age(): Number &#123;</span><br><span class="line">return this.num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;3.生命周期</span><br><span class="line">onLoad() &#123;</span><br><span class="line">this.printTitle();</span><br><span class="line">let a: string &#x3D; &#39;123&#39;;</span><br><span class="line">console.log(&quot;onLoad~~~~~~~~~~~~~~~~&quot;)</span><br><span class="line">&#125;</span><br><span class="line">onShow() &#123;</span><br><span class="line">console.log(&quot;onShow~~~~~~~~~~~&quot;)</span><br><span class="line">&#125;</span><br><span class="line">mounted() &#123;</span><br><span class="line">console.log(&quot;mounted~~~~~~~~~~~~~~&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;4.属性监听 此处是监听title的变化</span><br><span class="line">@Watch(&#39;title&#39;)</span><br><span class="line">titleChange(newVal: Number, oldVal: Number) &#123;</span><br><span class="line">console.log(newVal, oldVal);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;5.methods，对标之前methods中写的方法</span><br><span class="line">printTitle(): void &#123; </span><br><span class="line">console.log(&#39;hahahhhaha&#39;)</span><br><span class="line">&#125;</span><br><span class="line">tapHandle(num: number, event: any): void &#123;</span><br><span class="line">console.log(num, event.type)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.content &#123;</span><br><span class="line">display: flex;</span><br><span class="line">flex-direction: column;</span><br><span class="line">align-items: center;</span><br><span class="line">justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.logo &#123;</span><br><span class="line">height: 200rpx;</span><br><span class="line">width: 200rpx;</span><br><span class="line">margin-top: 200rpx;</span><br><span class="line">margin-left: auto;</span><br><span class="line">margin-right: auto;</span><br><span class="line">margin-bottom: 50rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.text-area &#123;</span><br><span class="line">display: flex;</span><br><span class="line">justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.title &#123;</span><br><span class="line">font-size: 36rpx;</span><br><span class="line">color: #8f8f94;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.vue-class-component：强化 Vue 组件，使用 TypeScript/装饰器 增强 Vue 组件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.vue-property-decorator 是在 vue-class-component 上增强了更多的结合 Vue 特性的装饰器，新增了这 7 个装饰器：</span></span><br><span class="line">@Emit  </span><br><span class="line">@Inject    </span><br><span class="line">@Model</span><br><span class="line">@Prop</span><br><span class="line">@Provide</span><br><span class="line">@Watch</span><br><span class="line">@Component (从 vue-<span class="class"><span class="keyword">class</span>-<span class="title">component</span> 继承)</span></span><br></pre></td></tr></table></figure><h2 id="2-2-uni-app中组件的创建"><a href="#2-2-uni-app中组件的创建" class="headerlink" title="2.2 uni-app中组件的创建"></a>2.2 uni-app中组件的创建</h2><p><a href="https://juejin.im/post/6844903741456384014" target="_blank" rel="noopener">https://juejin.im/post/6844903741456384014</a></p><p><a href="https://blog.csdn.net/sllailcp/article/details/102542796/" target="_blank" rel="noopener">https://blog.csdn.net/sllailcp/article/details/102542796/</a></p><p><a href="https://www.jianshu.com/p/d8ed3aa76e9b" target="_blank" rel="noopener">https://www.jianshu.com/p/d8ed3aa76e9b</a></p><p>在uni-app中，可以通过创建一个后缀名为vue的文件，即创建一个组件成功，其他组件可以将该组件通过impot的方式导入，在通过components进行注册即可</p><ul><li><p>创建head组件，在component中创建head.vue文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">这是头部组件</span><br><span class="line">&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">"ts"</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; Component,Vue&#125; <span class="keyword">from</span> <span class="string">"vue-property-decorator"</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Head</span> <span class="keyword">extends</span> <span class="title">Vue</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure></li><li><p>在其他组件中导入该组件并注册</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">"content"</span>&gt;</span><br><span class="line">&lt;Head&gt;&lt;<span class="regexp">/Head&gt;</span></span><br><span class="line"><span class="regexp">&lt;text&gt;</span></span><br><span class="line"><span class="regexp">&#123;&#123;msg|msgFormat('疯狂+1', '123')&#125;&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>text&gt;</span><br><span class="line"></span><br><span class="line">&lt;text v-fontsize=<span class="string">"15"</span>&gt;测试文字&lt;<span class="regexp">/text&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>view&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script lang="ts"&gt;</span></span><br><span class="line"><span class="regexp">import &#123;</span></span><br><span class="line"><span class="regexp">Component,</span></span><br><span class="line"><span class="regexp">Vue</span></span><br><span class="line"><span class="regexp">&#125; from "vue-property-decorator";</span></span><br><span class="line"><span class="regexp">import Head from '@/</span>components/head.vue<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//@Component 装饰器可以接收一个对象作为参数，可以在对象中声明 components ，filters，directives等未提供装饰器的选项，也可以声明computed，watch等</span></span><br><span class="line"><span class="string">@Component(&#123;</span></span><br><span class="line"><span class="string">components: &#123;</span></span><br><span class="line"><span class="string">Head</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">filters: &#123;</span></span><br><span class="line"><span class="string">msgFormat: function(msg: string, arg: string, arg2: string) &#123;</span></span><br><span class="line"><span class="string">return msg.replace(/少年/g, arg + arg2)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">//只在浏览器中有效</span></span><br><span class="line"><span class="string">directives: &#123; </span></span><br><span class="line"><span class="string">   '</span>fontsize<span class="string">': function (el, binding) &#123; </span></span><br><span class="line"><span class="string">        // 注意：这个 function 等同于把代码写到了 bind 和 update 中去</span></span><br><span class="line"><span class="string">        el.style.fontSize = parseInt(binding.value) + '</span>px<span class="string">'</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">export default class Index extends Vue &#123;</span></span><br><span class="line"><span class="string">private msg: String = '</span>曾经，我也是一个单纯的少年，单纯的我，傻傻的问，谁是世界上最单纯的男人<span class="string">'</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Head&gt;&lt;&#x2F;Head&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-3-组件的生命周期函数"><a href="#2-3-组件的生命周期函数" class="headerlink" title="2.3 组件的生命周期函数"></a>2.3 组件的生命周期函数</h2><table><thead><tr><th>beforeCreate</th><th>在实例初始化之后被调用。<a href="https://cn.vuejs.org/v2/api/#beforeCreate" target="_blank" rel="noopener">详见</a></th><th></th><th></th></tr></thead><tbody><tr><td>created</td><td>在实例创建完成后被立即调用。<a href="https://cn.vuejs.org/v2/api/#created" target="_blank" rel="noopener">详见</a></td><td></td><td></td></tr><tr><td>beforeMount</td><td>在挂载开始之前被调用。<a href="https://cn.vuejs.org/v2/api/#beforeMount" target="_blank" rel="noopener">详见</a></td><td></td><td></td></tr><tr><td>mounted</td><td>挂载到实例上去之后调用。<a href="https://cn.vuejs.org/v2/api/#mounted" target="_blank" rel="noopener">详见</a> 注意：此处并不能确定子组件被全部挂载，如果需要子组件完全挂载之后在执行操作可以使用<code>$nextTick</code><a href="https://cn.vuejs.org/v2/api/#Vue-nextTick" target="_blank" rel="noopener">Vue官方文档</a></td><td></td><td></td></tr><tr><td>beforeUpdate</td><td>数据更新时调用，发生在虚拟 DOM 打补丁之前。<a href="https://cn.vuejs.org/v2/api/#beforeUpdate" target="_blank" rel="noopener">详见</a></td><td>仅H5平台支持</td><td></td></tr><tr><td>updated</td><td>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。<a href="https://cn.vuejs.org/v2/api/#updated" target="_blank" rel="noopener">详见</a></td><td>仅H5平台支持</td><td></td></tr><tr><td>beforeDestroy</td><td>实例销毁之前调用。在这一步，实例仍然完全可用。<a href="https://cn.vuejs.org/v2/api/#beforeDestroy" target="_blank" rel="noopener">详见</a></td><td></td><td></td></tr><tr><td>destroyed</td><td>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。<a href="https://cn.vuejs.org/v2/api/#destroyed" target="_blank" rel="noopener">详见</a></td><td></td><td></td></tr></tbody></table><h2 id="2-4-组件的通讯"><a href="#2-4-组件的通讯" class="headerlink" title="2.4 组件的通讯"></a>2.4 组件的通讯</h2><h3 id="2-4-1-父组件给子组件传值"><a href="#2-4-1-父组件给子组件传值" class="headerlink" title="2.4.1 父组件给子组件传值"></a>2.4.1 父组件给子组件传值</h3><p>head.vue通过@props来接受外界传递到组件内部的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">这是头部组件</span><br><span class="line">&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">"ts"</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue,</span><br><span class="line">Prop</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"vue-property-decorator"</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Head</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@Prop(options: (PropOptions | Constructor[] | Constructor) = &#123;&#125;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@Prop装饰器接收一个参数，这个参数可以有三种写法：</span></span><br><span class="line"><span class="comment">Constructor，例如String，Number，Boolean等，指定 prop 的类型；</span></span><br><span class="line"><span class="comment">Constructor[]，指定 prop 的可选类型；</span></span><br><span class="line"><span class="comment">PropOptions，可以使用以下选项：type，default，required，validator。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//!表示非null 非undefined</span></span><br><span class="line">@Prop(<span class="built_in">String</span>) readonly name!: string | <span class="literal">undefined</span>;</span><br><span class="line">@Prop(&#123;</span><br><span class="line"><span class="keyword">default</span>: <span class="number">30</span>,</span><br><span class="line">type: <span class="built_in">Number</span></span><br><span class="line">&#125;) private age!: number;</span><br><span class="line">@Prop([<span class="built_in">String</span>, <span class="built_in">Boolean</span>]) private sex!: string | boolean;</span><br><span class="line"></span><br><span class="line">created()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name,<span class="keyword">this</span>.age,<span class="keyword">this</span>.sex)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>其他组件在使用head组件的时候传递值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">"content"</span>&gt;</span><br><span class="line">&lt;Head :name=<span class="string">"name"</span> :age=<span class="string">"age"</span> :sex=<span class="string">"sex"</span>&gt;&lt;<span class="regexp">/Head&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>view&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script lang="ts"&gt;</span></span><br><span class="line"><span class="regexp">import &#123;</span></span><br><span class="line"><span class="regexp">Component,</span></span><br><span class="line"><span class="regexp">Vue</span></span><br><span class="line"><span class="regexp">&#125; from "vue-property-decorator";</span></span><br><span class="line"><span class="regexp">import Head from '@/</span>components/head.vue<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@Component(&#123;</span></span><br><span class="line"><span class="string">components:&#123;</span></span><br><span class="line"><span class="string">Head</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">export default class Index extends Vue &#123;</span></span><br><span class="line"><span class="string">private name = '</span>张三<span class="string">';</span></span><br><span class="line"><span class="string">private age = 1;</span></span><br><span class="line"><span class="string">private sex = '</span>nan<span class="string">';</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-2-子组件给父组件传值"><a href="#2-4-2-子组件给父组件传值" class="headerlink" title="2.4.2 子组件给父组件传值"></a>2.4.2 子组件给父组件传值</h3><p>通过@emit触发事件进行传递参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line">&lt;Head :name=<span class="string">"name"</span> :age=<span class="string">"age"</span> :sex=<span class="string">"sex"</span> @del=<span class="string">"delFromChild"</span> @add=<span class="string">"addFromChild"</span>&gt;&lt;<span class="regexp">/Head&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">addFromChild(data: any) &#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ this.emitData = data;</span></span><br><span class="line"><span class="regexp">    console.log(data, "父组件 returnPersons")</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">delFromChild(event: MouseEvent,data:any) &#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ console.log(this.emitData);</span></span><br><span class="line"><span class="regexp">    console.log(event, "父组件 delemit",data);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件</span></span><br><span class="line"></span><br><span class="line">&lt;button @click=<span class="string">"del($event,&#123;id:1&#125;)"</span>&gt;点击触发del emit&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button @click="add(&#123;name:'张三'&#125;)"&gt;点击触发add emit&lt;/</span>button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@Emit 装饰器接收一个可选参数，该参数是$Emit的第一个参数，充当事件名。如果没有提供这个参数，$Emit会将回调函数名的camelCase转为kebab-case，并将其作为事件名；</span></span><br><span class="line"><span class="comment">@Emit会将回调函数的返回值作为第二个参数，如果返回值是一个Promise对象，$emit会在Promise对象被标记为resolved之后触发；</span></span><br><span class="line"><span class="comment">@Emit的回调函数的参数，会放在其返回值之后，一起被$emit当做参数使用。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当前组件的del点击事件会触发delClick执行，delClick会触发父组件传递过来的del执行，就相当于之前的this.$emit()</span></span><br><span class="line">@Emit(<span class="string">'del'</span>) private delClick(event: MouseEvent, <span class="attr">data</span>: any) &#123;&#125;</span><br><span class="line">del(event: MouseEvent, <span class="attr">data</span>: any) &#123;</span><br><span class="line">    <span class="keyword">this</span>.delClick(event, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果此处不设置别名字,则默认使用下面的函数命名,该函数既代表当前组件的点击事件，又代表触发父组件传递过来的add事件</span></span><br><span class="line">@Emit()</span><br><span class="line">add(p: &#123;</span><br><span class="line">    name: string</span><br><span class="line">    &#125;) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"add"</span>)</span><br><span class="line">    <span class="comment">// 此处不return,则会默认使用括号里的参数p;</span></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-3-兄弟组件通讯"><a href="#2-4-3-兄弟组件通讯" class="headerlink" title="2.4.3 兄弟组件通讯"></a>2.4.3 兄弟组件通讯</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uni.$emit(eventName,OBJECT)  触发全局的自定事件。</span><br><span class="line">uni.$on(eventName,callback)  监听全局的自定义事件。事件可以由 uni.$emit 触发，回调函数会接收所有传入事件触发函数的额外参数。</span><br><span class="line">uni.$off([eventName, callback])  移除全局自定义事件监听器</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.head.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;text&gt;这是头部&lt;<span class="regexp">/text&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;button @click="send"&gt;点击向head发送数据&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">"ts"</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"vue-property-decorator"</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Head</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">send():<span class="keyword">void</span>&#123;</span><br><span class="line">uni.$emit(<span class="string">"eventType1"</span>,<span class="string">"你好，head"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.foot.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;text&gt;这是尾巴&lt;<span class="regexp">/text&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>view&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script lang="ts"&gt;</span></span><br><span class="line"><span class="regexp">import &#123;</span></span><br><span class="line"><span class="regexp">Component,</span></span><br><span class="line"><span class="regexp">Vue,</span></span><br><span class="line"><span class="regexp">Prop,</span></span><br><span class="line"><span class="regexp">Emit</span></span><br><span class="line"><span class="regexp">&#125; from "vue-property-decorator";</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">@Component(&#123;&#125;)</span></span><br><span class="line"><span class="regexp">export default class Head extends Vue &#123;</span></span><br><span class="line"><span class="regexp">created()&#123;</span></span><br><span class="line"><span class="regexp">uni.$on("eventType1",(data:any)=&gt;&#123;</span></span><br><span class="line"><span class="regexp">console.log("收到来自foot的数据",data)</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/index.vue</span></span><br><span class="line"><span class="regexp">&lt;template&gt;</span></span><br><span class="line"><span class="regexp">&lt;view class="content"&gt;</span></span><br><span class="line"><span class="regexp">&lt;Head&gt;&lt;/</span>Head&gt;</span><br><span class="line">&lt;Foot&gt;&lt;<span class="regexp">/Foot&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>view&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script lang="ts"&gt;</span></span><br><span class="line"><span class="regexp">import &#123;</span></span><br><span class="line"><span class="regexp">Component,</span></span><br><span class="line"><span class="regexp">Vue</span></span><br><span class="line"><span class="regexp">&#125; from "vue-property-decorator";</span></span><br><span class="line"><span class="regexp">import Head from '@/</span>components/head.vue<span class="string">'</span></span><br><span class="line"><span class="string">import Foot from '</span>@/components/foot.vue<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@Component(&#123;</span></span><br><span class="line"><span class="string">components: &#123;</span></span><br><span class="line"><span class="string">Head,</span></span><br><span class="line"><span class="string">Foot</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">export default class Index extends Vue &#123;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-全局配置和页面配置"><a href="#3-全局配置和页面配置" class="headerlink" title="3 全局配置和页面配置"></a>3 全局配置和页面配置</h1><h2 id="3-1-通过globalStyle进行全局配置"><a href="#3-1-通过globalStyle进行全局配置" class="headerlink" title="3.1 通过globalStyle进行全局配置"></a>3.1 通过globalStyle进行全局配置</h2><p>用于设置应用的状态栏、导航条、标题、窗口背景色等。<a href="https://uniapp.dcloud.io/collocation/pages?id=globalstyle" target="_blank" rel="noopener">详细文档</a></p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>navigationBarBackgroundColor</td><td>HexColor</td><td>#F7F7F7</td><td>导航栏背景颜色（同状态栏背景色）</td></tr><tr><td>navigationBarTextStyle</td><td>String</td><td>white</td><td>导航栏标题颜色及状态栏前景颜色，仅支持 black/white</td></tr><tr><td>navigationBarTitleText</td><td>String</td><td></td><td>导航栏标题文字内容</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>#ffffff</td><td>窗口的背景色</td></tr><tr><td>backgroundTextStyle</td><td>String</td><td>dark</td><td>下拉 loading 的样式，仅支持 dark / light</td></tr><tr><td>enablePullDownRefresh</td><td>Boolean</td><td>false</td><td>是否开启下拉刷新，详见<a href="https://uniapp.dcloud.io/use?id=%e9%a1%b5%e9%9d%a2%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f" target="_blank" rel="noopener">页面生命周期</a>。</td></tr><tr><td>onReachBottomDistance</td><td>Number</td><td>50</td><td>页面上拉触底事件触发时距页面底部距离，单位只支持px，详见<a href="https://uniapp.dcloud.io/use?id=%e9%a1%b5%e9%9d%a2%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f" target="_blank" rel="noopener">页面生命周期</a></td></tr></tbody></table><h2 id="3-2-创建新的message页面"><a href="#3-2-创建新的message页面" class="headerlink" title="3.2 创建新的message页面"></a>3.2 创建新的message页面</h2><p>右键pages新建message目录，在message目录下右键新建.vue文件,并选择基本模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">这是信息页面</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-3-通过pages来配置页面"><a href="#3-3-通过pages来配置页面" class="headerlink" title="3.3 通过pages来配置页面"></a>3.3 通过pages来配置页面</h2><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>path</td><td>String</td><td></td><td>配置页面路径</td></tr><tr><td>style</td><td>Object</td><td></td><td>配置页面窗口表现，配置项参考 <a href="https://uniapp.dcloud.io/collocation/pages?id=style" target="_blank" rel="noopener">pageStyle</a></td></tr></tbody></table><p>pages数组数组中第一项表示应用启动页</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">"pages": [ </span><br><span class="line">&#123;</span><br><span class="line">"path":"pages/message/message"</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">"path": "pages/index/index",</span><br><span class="line">"style": &#123;</span><br><span class="line">"navigationBarTitleText": "uni-app"</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>通过style修改页面的标题和导航栏背景色，并且设置h5下拉刷新的特有样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"pages"</span>: [ <span class="comment">//pages数组中第一项表示应用启动页，参考：https://uniapp.dcloud.io/collocation/pages</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"path"</span>:<span class="string">"pages/message/message"</span>,</span><br><span class="line"><span class="string">"style"</span>: &#123;</span><br><span class="line"><span class="string">"navigationBarBackgroundColor"</span>: <span class="string">"#007AFF"</span>,</span><br><span class="line"><span class="string">"navigationBarTextStyle"</span>: <span class="string">"white"</span>,</span><br><span class="line"><span class="string">"enablePullDownRefresh"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"disableScroll"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"h5"</span>: &#123;</span><br><span class="line"><span class="string">"pullToRefresh"</span>: &#123;</span><br><span class="line"><span class="string">"color"</span>: <span class="string">"#007AFF"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="3-4-配置tabbar"><a href="#3-4-配置tabbar" class="headerlink" title="3.4 配置tabbar"></a>3.4 配置tabbar</h2><p>如果应用是一个多 tab 应用，可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页。</p><p><strong>Tips</strong></p><ul><li>当设置 position 为 top 时，将不会显示 icon</li><li>tabBar 中的 list 是一个数组，只能配置最少2个、最多5个 tab，tab 按数组的顺序排序。</li></ul><p><strong>属性说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>默认值</th><th>描述</th><th>平台差异说明</th></tr></thead><tbody><tr><td>color</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字默认颜色</td><td></td></tr><tr><td>selectedColor</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字选中时的颜色</td><td></td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>是</td><td></td><td>tab 的背景色</td><td></td></tr><tr><td>borderStyle</td><td>String</td><td>否</td><td>black</td><td>tabbar 上边框的颜色，仅支持 black/white</td><td>App 2.3.4+ 支持其他颜色值</td></tr><tr><td>list</td><td>Array</td><td>是</td><td></td><td>tab 的列表，详见 list 属性说明，最少2个、最多5个 tab</td><td></td></tr><tr><td>position</td><td>String</td><td>否</td><td>bottom</td><td>可选值 bottom、top</td><td>top 值仅微信小程序支持</td></tr></tbody></table><p>其中 list 接收一个数组，数组中的每个项都是一个对象，其属性值如下：</p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>pagePath</td><td>String</td><td>是</td><td>页面路径，必须在 pages 中先定义</td></tr><tr><td>text</td><td>String</td><td>是</td><td>tab 上按钮文字，在 5+APP 和 H5 平台为非必填。例如中间可放一个没有文字的+号图标</td></tr><tr><td>iconPath</td><td>String</td><td>否</td><td>图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px，当 postion 为 top 时，此参数无效，不支持网络图片，不支持字体图标</td></tr><tr><td>selectedIconPath</td><td>String</td><td>否</td><td>选中时的图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px ，当 postion 为 top 时，此参数无效</td></tr></tbody></table><p>案例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"tabBar"</span>: &#123;</span><br><span class="line"><span class="string">"list"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"text"</span>: <span class="string">"首页"</span>,</span><br><span class="line"><span class="string">"pagePath"</span>:<span class="string">"pages/index/index"</span>,</span><br><span class="line"><span class="string">"iconPath"</span>:<span class="string">"static/tabs/home.png"</span>,</span><br><span class="line"><span class="string">"selectedIconPath"</span>:<span class="string">"static/tabs/home-active.png"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"text"</span>: <span class="string">"信息"</span>,</span><br><span class="line"><span class="string">"pagePath"</span>:<span class="string">"pages/message/message"</span>,</span><br><span class="line"><span class="string">"iconPath"</span>:<span class="string">"static/tabs/message.png"</span>,</span><br><span class="line"><span class="string">"selectedIconPath"</span>:<span class="string">"static/tabs/message-active.png"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"text"</span>: <span class="string">"我们"</span>,</span><br><span class="line"><span class="string">"pagePath"</span>:<span class="string">"pages/contact/contact"</span>,</span><br><span class="line"><span class="string">"iconPath"</span>:<span class="string">"static/tabs/contact.png"</span>,</span><br><span class="line"><span class="string">"selectedIconPath"</span>:<span class="string">"static/tabs/contact-active.png"</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-condition启动模式配置"><a href="#3-5-condition启动模式配置" class="headerlink" title="3.5 condition启动模式配置"></a>3.5 condition启动模式配置</h2><p>启动模式配置，仅开发期间生效，用于模拟直达页面的场景，如：小程序转发后，用户点击所打开的页面。</p><p>记得要在微信开发工具里选中你要调试的模式</p><p><strong>属性说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th></tr></thead><tbody><tr><td>current</td><td>Number</td><td>是</td><td>当前激活的模式，list节点的索引值</td></tr><tr><td>list</td><td>Array</td><td>是</td><td>启动模式列表</td></tr></tbody></table><p><strong>list说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>String</td><td>是</td><td>启动模式名称</td></tr><tr><td>path</td><td>String</td><td>是</td><td>启动页面路径</td></tr><tr><td>query</td><td>String</td><td>否</td><td>启动参数，可在页面的 <a href="https://uniapp.dcloud.io/use?id=%e9%a1%b5%e9%9d%a2%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f" target="_blank" rel="noopener">onLoad</a> 函数里获得</td></tr></tbody></table><h1 id="4-uni基础组件的基本使用"><a href="#4-uni基础组件的基本使用" class="headerlink" title="4 uni基础组件的基本使用"></a>4 uni基础组件的基本使用</h1><p>uni-app提供了丰富的基础组件给开发者，开发者可以像搭积木一样，组合各种组件拼接称自己的应用</p><p>uni-app中的组件，就像 <code>HTML</code> 中的 <code>div</code> 、<code>p</code>、<code>span</code> 等标签的作用一样，用于搭建页面的基础结构</p><h2 id="4-1-text文本组件的用法"><a href="#4-1-text文本组件的用法" class="headerlink" title="4.1 text文本组件的用法"></a>4.1 text文本组件的用法</h2><h4 id="001-text-组件的属性"><a href="#001-text-组件的属性" class="headerlink" title="001 - text 组件的属性"></a>001 - text 组件的属性</h4><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">默认值</th><th align="center">必填</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">selectable</td><td align="center">boolean</td><td align="center">false</td><td align="center">否</td><td align="center">文本是否可选</td></tr><tr><td align="center">space</td><td align="center">string</td><td align="center">.</td><td align="center">否</td><td align="center">显示连续空格，可选参数：<code>ensp</code>、<code>emsp</code>、<code>nbsp</code></td></tr><tr><td align="center">decode</td><td align="center">boolean</td><td align="center">false</td><td align="center">否</td><td align="center">是否解码</td></tr></tbody></table><ul><li><code>text</code> 组件相当于行内标签、在同一行显示</li><li>除了文本节点以外的其他节点都无法长按选中</li></ul><h4 id="002-代码案例"><a href="#002-代码案例" class="headerlink" title="002 - 代码案例"></a>002 - 代码案例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 长按文本是否可选 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">selectable</span>=<span class="string">'true'</span>&gt;</span>来了老弟<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 显示连续空格的方式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">space</span>=<span class="string">'ensp'</span>&gt;</span>来了  老弟<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">space</span>=<span class="string">'emsp'</span>&gt;</span>来了  老弟<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">space</span>=<span class="string">'nbsp'</span>&gt;</span>来了  老弟<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>skyblue<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 是否解码 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">decode</span>=<span class="string">'true'</span>&gt;</span><span class="symbol">&amp;nbsp;</span> <span class="symbol">&amp;lt;</span> <span class="symbol">&amp;gt;</span> <span class="symbol">&amp;amp;</span> <span class="symbol">&amp;apos;</span> <span class="symbol">&amp;ensp;</span> <span class="symbol">&amp;emsp;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-2-view视图容器组件的用法"><a href="#4-2-view视图容器组件的用法" class="headerlink" title="4.2 view视图容器组件的用法"></a>4.2 view视图容器组件的用法</h2><blockquote><p>View 视图容器， 类似于 HTML 中的 div</p></blockquote><h4 id="001-组件的属性"><a href="#001-组件的属性" class="headerlink" title="001 - 组件的属性"></a>001 - 组件的属性</h4><p><img src= "/img/loading.gif" data-src="./images/2view.png" alt=""></p><h4 id="002-代码案例-1"><a href="#002-代码案例-1" class="headerlink" title="002 - 代码案例"></a>002 - 代码案例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"box2"</span> <span class="attr">hover-class</span>=<span class="string">"box2_active"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'box1'</span> <span class="attr">hover-class</span>=<span class="string">'active'</span> <span class="attr">hover-stop-propagation</span> <span class="attr">:hover-start-time</span>=<span class="string">"2000"</span> <span class="attr">:hover-stay-time</span>=<span class="string">'2000'</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-3-button按钮组件的用法"><a href="#4-3-button按钮组件的用法" class="headerlink" title="4.3 button按钮组件的用法"></a>4.3 button按钮组件的用法</h2><h4 id="001-组件的属性-1"><a href="#001-组件的属性-1" class="headerlink" title="001 - 组件的属性"></a>001 - 组件的属性</h4><table><thead><tr><th align="center">属性名</th><th align="center">类型</th><th align="center">默认值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">size</td><td align="center">String</td><td align="center">default</td><td align="center">按钮的大小</td></tr><tr><td align="center">type</td><td align="center">String</td><td align="center">default</td><td align="center">按钮的样式类型</td></tr><tr><td align="center">plain</td><td align="center">Boolean</td><td align="center">false</td><td align="center">按钮是否镂空，背景色透明</td></tr><tr><td align="center">disabled</td><td align="center">Boolean</td><td align="center">false</td><td align="center">是否按钮</td></tr><tr><td align="center">loading</td><td align="center">Boolean</td><td align="center">false</td><td align="center">名称是否带 loading t图标</td></tr></tbody></table><ul><li><code>button</code> 组件默认独占一行，设置 <code>size</code> 为 <code>mini</code> 时可以在一行显示多个</li></ul><h4 id="002-案例代码"><a href="#002-案例代码" class="headerlink" title="002 - 案例代码"></a>002 - 案例代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">'mini'</span> <span class="attr">type</span>=<span class="string">'primary'</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">'mini'</span> <span class="attr">type</span>=<span class="string">'default'</span> <span class="attr">disabled</span>=<span class="string">'true'</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">'mini'</span> <span class="attr">type</span>=<span class="string">'warn'</span> <span class="attr">loading</span>=<span class="string">'true'</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-7-4-image组件的使用"><a href="#1-7-4-image组件的使用" class="headerlink" title="1.7.4 image组件的使用"></a>1.7.4 image组件的使用</h3><p><a href="https://uniapp.dcloud.io/component/image?id=image" target="_blank" rel="noopener">image</a>图片。</p><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th><th>平台差异说明</th></tr></thead><tbody><tr><td>src</td><td>String</td><td></td><td>图片资源地址</td><td></td></tr><tr><td>mode</td><td>String</td><td>‘scaleToFill’</td><td>图片裁剪、缩放的模式</td><td></td></tr></tbody></table><p><strong>Tips</strong></p><ul><li><code>&lt;image&gt;</code> 组件默认宽度 300px、高度 225px；</li><li><code>src</code> 仅支持相对路径、绝对路径，支持 base64 码；</li><li>页面结构复杂，css样式太多的情况，使用 image 可能导致样式生效较慢，出现 “闪一下” 的情况，此时设置 <code>image{will-change: transform}</code> ,可优化此问题。</li></ul><h1 id="5-uni-app中的样式"><a href="#5-uni-app中的样式" class="headerlink" title="5 uni-app中的样式"></a>5 uni-app中的样式</h1><ul><li><p>rpx 即响应式px，一种根据屏幕宽度自适应的动态单位。以750宽的屏幕为基准，750rpx恰好为屏幕宽度。屏幕变宽，rpx 实际显示效果会等比放大。</p></li><li><p>使用<code>@import</code>语句可以导入外联样式表，<code>@import</code>后跟需要导入的外联样式表的相对路径，用<code>;</code>表示语句结束</p></li><li><p>支持基本常用的选择器class、id、element等</p></li><li><p>在 <code>uni-app</code> 中不能使用 <code>*</code> 选择器。</p></li><li><p><code>page</code> 相当于 <code>body</code> 节点</p></li><li><p>定义在 App.vue 中的样式为全局样式，作用于每一个页面。在 pages 目录下 的 vue 文件中定义的样式（scoped）为局部样式，只作用在对应的页面，并会覆盖 App.vue 中相同的选择器。</p></li><li><p><code>uni-app</code> 支持使用字体图标，使用方式与普通 <code>web</code> 项目相同，需要注意以下几点：</p><ul><li><p>字体文件小于 40kb，<code>uni-app</code> 会自动将其转化为 base64 格式；</p></li><li><p>字体文件大于等于 40kb， 需开发者自己转换，否则使用将不生效；</p></li><li><p>字体文件的引用路径推荐使用以 ~@ 开头的绝对路径。</p></li><li><p><a href="https://www.jianshu.com/p/f423b4e937af" target="_blank" rel="noopener">https://www.jianshu.com/p/f423b4e937af</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">    font-family: test1-icon;</span><br><span class="line">    src: url(&#39;~@&#x2F;static&#x2F;iconfont.ttf&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>如何使用scss或者less</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;1.安装插件</span><br><span class="line">npm install less less-loader --save</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.vue文件中使用 &lt;style lang&#x3D;&quot;less&quot;&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="6-uni的生命周期"><a href="#6-uni的生命周期" class="headerlink" title="6 uni的生命周期"></a>6 uni的生命周期</h1><h2 id="6-1-应用的生命周期"><a href="#6-1-应用的生命周期" class="headerlink" title="6.1 应用的生命周期"></a>6.1 应用的生命周期</h2><p>生命周期的概念：一个对象从创建、运行、销毁的整个过程被成为生命周期。</p><p>生命周期函数：在生命周期中每个阶段会伴随着每一个函数的触发，这些函数被称为生命周期函数</p><p><code>uni-app</code> 支持如下应用生命周期函数：</p><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>onLaunch</td><td>当<code>uni-app</code> 初始化完成时触发（全局只触发一次）</td></tr><tr><td>onShow</td><td>当 <code>uni-app</code> 启动，或从后台进入前台显示</td></tr><tr><td>onHide</td><td>当 <code>uni-app</code> 从前台进入后台</td></tr><tr><td>onError</td><td>当 <code>uni-app</code> 报错时触发</td></tr></tbody></table><h2 id="6-2-页面的生命周期"><a href="#6-2-页面的生命周期" class="headerlink" title="6.2 页面的生命周期"></a>6.2 页面的生命周期</h2><p><code>uni-app</code> 支持如下页面生命周期函数：</p><table><thead><tr><th>函数名</th><th>说明</th><th>平台差异说明</th><th>最低版本</th></tr></thead><tbody><tr><td>onLoad</td><td>监听页面加载，其参数为上个页面传递的数据，参数类型为Object（用于页面传参），参考<a href="https://uniapp.dcloud.io/api/router?id=navigateto" target="_blank" rel="noopener">示例</a></td><td></td><td></td></tr><tr><td>onShow</td><td>监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面</td><td></td><td></td></tr><tr><td>onReady</td><td>监听页面初次渲染完成。</td><td></td><td></td></tr><tr><td>onHide</td><td>监听页面隐藏</td><td></td><td></td></tr><tr><td>onUnload</td><td>监听页面卸载</td><td></td><td></td></tr></tbody></table><h1 id="7-uni相关API"><a href="#7-uni相关API" class="headerlink" title="7 uni相关API"></a>7 uni相关API</h1><h2 id="7-1-下拉刷新"><a href="#7-1-下拉刷新" class="headerlink" title="7.1 下拉刷新"></a>7.1 下拉刷新</h2><h3 id="7-1-1-开启下拉刷新"><a href="#7-1-1-开启下拉刷新" class="headerlink" title="7.1.1 开启下拉刷新"></a>7.1.1 开启下拉刷新</h3><p>在uni-app中有两种方式开启下拉刷新</p><ul><li>需要在 <code>pages.json</code> 里，找到的当前页面的pages节点，并在 <code>style</code> 选项中开启 <code>enablePullDownRefresh</code></li><li>通过调用uni.startPullDownRefresh方法来开启下拉刷新</li></ul><h4 id="a-通过配置文件开启"><a href="#a-通过配置文件开启" class="headerlink" title="a) 通过配置文件开启"></a>a) 通过配置文件开启</h4><p>通过pages.json文件中找到当前页面的pages节点，并在 <code>style</code> 选项中开启 <code>enablePullDownRefresh</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"path"</span>:<span class="string">"pages/list/list"</span>,</span><br><span class="line">    <span class="string">"style"</span>:&#123;</span><br><span class="line">      <span class="string">"enablePullDownRefresh"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="b-通过API开启"><a href="#b-通过API开启" class="headerlink" title="b) 通过API开启"></a>b) 通过API开启</h4><p><a href="https://uniapp.dcloud.io/api/ui/pulldown" target="_blank" rel="noopener">api文档</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uni.startPullDownRefresh(&#123;&#125;)</span><br></pre></td></tr></table></figure><h3 id="7-1-2-监听下拉刷新"><a href="#7-1-2-监听下拉刷新" class="headerlink" title="7.1.2 监听下拉刷新"></a>7.1.2 监听下拉刷新</h3><p>通过onPullDownRefresh可以监听到下拉刷新的动作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">这是信息页面</span><br><span class="line">&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">"ts"</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"vue-property-decorator"</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">startPull(): <span class="keyword">void</span> &#123;</span><br><span class="line">uni.startPullDownRefresh(&#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line">onPullDownRefresh(): <span class="keyword">void</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'触发下拉刷新了'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><h3 id="7-1-3-关闭下拉刷新"><a href="#7-1-3-关闭下拉刷新" class="headerlink" title="7.1.3 关闭下拉刷新"></a>7.1.3 关闭下拉刷新</h3><p>uni.stopPullDownRefresh()      停止当前页面下拉刷新 </p><h2 id="7-2-上拉加载"><a href="#7-2-上拉加载" class="headerlink" title="7.2 上拉加载"></a>7.2 上拉加载</h2><p>通过在pages.json文件中找到当前页面的pages节点下style中配置onReachBottomDistance可以设置距离底部开启加载的距离，默认为50px</p><p>通过onReachBottom监听到触底的行为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;view v-<span class="keyword">for</span>=<span class="string">"(item,index) in arr"</span> :key=<span class="string">"index"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"item"</span>&gt;</span><br><span class="line">&#123;&#123;item&#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>view&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script lang="ts"&gt;</span></span><br><span class="line"><span class="regexp">import &#123;</span></span><br><span class="line"><span class="regexp">Component,</span></span><br><span class="line"><span class="regexp">Vue</span></span><br><span class="line"><span class="regexp">&#125; from "vue-property-decorator";</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">@Component(&#123;&#125;)</span></span><br><span class="line"><span class="regexp">export default class Index extends Vue &#123;</span></span><br><span class="line"><span class="regexp">private arr = ['前端', 'java', 'ui', '大数据', '前端', 'java', 'ui', '大数据','ui', '大数据'];</span></span><br><span class="line"><span class="regexp">startPull(): void &#123;</span></span><br><span class="line"><span class="regexp">uni.startPullDownRefresh(&#123;&#125;);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">onPullDownRefresh(): void &#123;</span></span><br><span class="line"><span class="regexp">console.log('触发下拉刷新了')</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">onReachBottom() &#123;</span></span><br><span class="line"><span class="regexp">console.log('触底了')</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=<span class="string">"less"</span>&gt;</span><br><span class="line">.item &#123;</span><br><span class="line">height: <span class="number">100</span>px;</span><br><span class="line">line-height: <span class="number">100</span>px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/App.vue中添加</span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">page&#123;</span></span><br><span class="line"><span class="regexp">overflow-y:scroll!important;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><h2 id="7-3-网络请求"><a href="#7-3-网络请求" class="headerlink" title="7.3 网络请求"></a>7.3 网络请求</h2><p>在uni中可以调用uni.request方法进行请求网络请求</p><p>需要注意的是：在小程序中网络相关的 API 在使用前需要配置域名白名单。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">uni.request(&#123;</span><br><span class="line">    url: <span class="string">'http://localhost/myUniApp/php/login.php'</span>, <span class="comment">//仅为示例，并非真实接口地址。</span></span><br><span class="line">    data: &#123;<span class="comment">//参数</span></span><br><span class="line">        rawData: rawData,</span><br><span class="line">        code: loginRes.code</span><br><span class="line">    &#125;,</span><br><span class="line">    header: &#123;</span><br><span class="line">        <span class="string">'custom-header'</span>: <span class="string">'hello'</span> <span class="comment">//自定义请求头信息</span></span><br><span class="line">    &#125;,</span><br><span class="line">    method:<span class="string">'POST'</span><span class="comment">//请求方式  或GET</span></span><br><span class="line">    success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'返回'</span>, res.data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>请求示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;button @click=<span class="string">"sendGet"</span>&gt;发送请求&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;view v-if="movieData"&gt;</span></span><br><span class="line"><span class="regexp">&lt;text&gt;电影名字：&#123;&#123;movieData.originalName&#125;&#125;&lt;/</span>text&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">导演：</span><br><span class="line">&lt;text v-<span class="keyword">for</span>=<span class="string">"item in movieData.director"</span>&gt;</span><br><span class="line">&#123;&#123;item.data[<span class="number">0</span>].name&#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/text&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>view&gt;</span><br><span class="line">&lt;view&gt;电影信息</span><br><span class="line">&#123;&#123;movieData.data[<span class="number">0</span>].genre&#125;&#125;</span><br><span class="line">&#123;&#123;movieData.data[<span class="number">0</span>].language&#125;&#125;</span><br><span class="line">&#123;&#123;movieData.data[<span class="number">0</span>].description&#125;&#125;</span><br><span class="line">&#123;&#123;movieData.data[<span class="number">0</span>].country&#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>view&gt;</span><br><span class="line">&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">"ts"</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"vue-property-decorator"</span>;</span><br><span class="line"></span><br><span class="line">type MovieBasicType = &#123;</span><br><span class="line">genre:string</span><br><span class="line">name:string</span><br><span class="line">lang:string</span><br><span class="line">language:string</span><br><span class="line">poster:string</span><br><span class="line">description:string</span><br><span class="line">country:string</span><br><span class="line">&#125;</span><br><span class="line">type MovieDirectorType = &#123;</span><br><span class="line">name:string,</span><br><span class="line">lang:string</span><br><span class="line">&#125;</span><br><span class="line">type MovieDataType = &#123;</span><br><span class="line">id?:string,</span><br><span class="line">originalName?:string,</span><br><span class="line">duration?:number,</span><br><span class="line">data?:MovieBasicType[],</span><br><span class="line">director?:&#123;<span class="attr">data</span>:MovieDirectorType[]&#125;[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">private movieData:MovieDataType|<span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">sendGet():<span class="keyword">void</span> &#123;</span><br><span class="line">uni.request(&#123;</span><br><span class="line">url: <span class="string">'https://movie.querydata.org/api?id=1302425'</span>,</span><br><span class="line">success:<span class="function">(<span class="params">res</span>) =&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> resobj = res.data;</span><br><span class="line"><span class="keyword">this</span>.movieData = resobj <span class="keyword">as</span> MovieDataType;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//uni-app中对ts的支持只是一般，没有非常严格</span></span><br></pre></td></tr></table></figure><h2 id="7-4-数据缓存"><a href="#7-4-数据缓存" class="headerlink" title="7.4 数据缓存"></a>7.4 数据缓存</h2><p><a href="https://uniapp.dcloud.io/api/storage/storage?id=setstorage" target="_blank" rel="noopener">官方文档</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;button type=<span class="string">"primary"</span> @click=<span class="string">"setStor"</span>&gt;存储数据-异步&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button type="primary" @click="setStorSync"&gt;存储数据-同步&lt;/</span>button&gt;</span><br><span class="line">&lt;button type=<span class="string">"primary"</span> @click=<span class="string">"getStorage"</span>&gt;获取数据&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button type="primary" @click="getStorageSync"&gt;获取数据-同步&lt;/</span>button&gt;</span><br><span class="line">&lt;button type=<span class="string">"primary"</span> @click=<span class="string">"removeStorage"</span>&gt;删除数据&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button type="primary" @click="removeStorageSync"&gt;删除数据-同步&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">"ts"</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"vue-property-decorator"</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">setStor(): <span class="keyword">void</span> &#123;</span><br><span class="line">uni.setStorage(&#123;</span><br><span class="line">key: <span class="string">'id'</span>,</span><br><span class="line">data: <span class="number">100</span>,</span><br><span class="line">success() &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'存储成功'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">setStorSync(): <span class="keyword">void</span> &#123;</span><br><span class="line">uni.setStorageSync(<span class="string">'id2'</span>, <span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getStorage(): <span class="keyword">void</span> &#123;</span><br><span class="line">uni.getStorage(&#123;</span><br><span class="line">key: <span class="string">'id'</span>,</span><br><span class="line">success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">getStorageSync(): <span class="keyword">void</span> &#123;</span><br><span class="line"><span class="keyword">const</span> id = uni.getStorageSync(<span class="string">'id'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(id)</span><br><span class="line">&#125;</span><br><span class="line">removeStorage(): <span class="keyword">void</span> &#123;</span><br><span class="line">uni.removeStorage(&#123;</span><br><span class="line">key: <span class="string">'id'</span>,</span><br><span class="line">success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'删除成功'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">removeStorageSync(): <span class="keyword">void</span> &#123;</span><br><span class="line">uni.removeStorageSync(<span class="string">'id'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><h2 id="7-5-上传图片、预览图片"><a href="#7-5-上传图片、预览图片" class="headerlink" title="7.5 上传图片、预览图片"></a>7.5 上传图片、预览图片</h2><h3 id="7-5-1-上传图片"><a href="#7-5-1-上传图片" class="headerlink" title="7.5.1 上传图片"></a>7.5.1 上传图片</h3><p>uni.chooseImage方法从本地相册选择图片或使用相机拍照。</p><p>案例代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"chooseImg"</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>上传图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">v-for</span>=<span class="string">"item in imgArr"</span> <span class="attr">:src</span>=<span class="string">"item"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="meta"><span class="meta-keyword">import</span> &#123;</span></span></span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line"><span class="javascript">&#125; <span class="keyword">from</span> <span class="string">"vue-property-decorator"</span>;</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">private</span> imgArr = []</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">chooseImg(): <span class="keyword">void</span> &#123;</span></span><br><span class="line">uni.chooseImage(&#123;</span><br><span class="line">count: 9,</span><br><span class="line"><span class="javascript">success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.imgArr = res.tempFilePaths</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-5-2-预览图片"><a href="#7-5-2-预览图片" class="headerlink" title="7.5.2 预览图片"></a>7.5.2 预览图片</h3><p>结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">v-for</span>=<span class="string">"item in imgArr"</span> <span class="attr">:src</span>=<span class="string">"item"</span> @<span class="attr">click</span>=<span class="string">"previewImg(item)"</span> <span class="attr">:key</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>预览图片的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">previewImg (current:any):<span class="keyword">void</span> &#123;</span><br><span class="line">  uni.previewImage(&#123;</span><br><span class="line">    urls: <span class="keyword">this</span>.imgArr,</span><br><span class="line">    current</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-6-uni中的导航跳转"><a href="#7-6-uni中的导航跳转" class="headerlink" title="7.6 uni中的导航跳转"></a>7.6 uni中的导航跳转</h2><h3 id="7-6-1-利用navigator进行跳转"><a href="#7-6-1-利用navigator进行跳转" class="headerlink" title="7.6.1 利用navigator进行跳转"></a>7.6.1 利用navigator进行跳转</h3><p>navigator详细文档：<a href="https://uniapp.dcloud.io/component/navigator" target="_blank" rel="noopener">文档地址</a></p><p>跳转到普通页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">"/pages/about/about"</span> <span class="attr">hover-class</span>=<span class="string">"navigator-hover"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"default"</span>&gt;</span>跳转到关于页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure><p>跳转到tabbar页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">"/pages/message/message"</span> <span class="attr">open-type</span>=<span class="string">"switchTab"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"default"</span>&gt;</span>跳转到message页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-6-2-利用编程式导航进行跳转"><a href="#7-6-2-利用编程式导航进行跳转" class="headerlink" title="7.6.2 利用编程式导航进行跳转"></a>7.6.2 利用编程式导航进行跳转</h3><p><a href="[uni.navigateTo](https://uniapp.dcloud.io/api/router?id=navigateto)">导航跳转文档</a></p><h3 id="7-6-3-利用navigateTo进行导航跳转"><a href="#7-6-3-利用navigateTo进行导航跳转" class="headerlink" title="7.6.3 利用navigateTo进行导航跳转"></a>7.6.3 利用navigateTo进行导航跳转</h3><p>保留当前页面，跳转到应用内的某个页面，使用<code>uni.navigateBack</code>可以返回到原页面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"goAbout"</span>&gt;</span>跳转到关于页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过navigateTo方法进行跳转到普通页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">goAbout ():<span class="keyword">void</span> &#123;</span><br><span class="line">  uni.navigateTo(&#123;</span><br><span class="line">    url: <span class="string">'/pages/about/about'</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过switchTab跳转到tabbar页面</strong></p><p>跳转到tabbar页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"goMessage"</span>&gt;</span>跳转到message页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过switchTab方法进行跳转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">goMessage ():<span class="keyword">void</span>  &#123;</span><br><span class="line">  uni.switchTab(&#123;</span><br><span class="line">    url: <span class="string">'/pages/message/message'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>redirectTo进行跳转</strong> </p><p>关闭当前页面，跳转到应用内的某个页面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- template --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"goMessage"</span>&gt;</span>跳转到message页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- js --&gt;</span></span><br><span class="line">goMessage ():void  &#123;</span><br><span class="line">  uni.switchTab(&#123;</span><br><span class="line">    url: '/pages/message/message'</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过onUnload测试当前组件确实卸载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onUnload () &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'组件卸载了'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-6-4-导航跳转传递参数"><a href="#7-6-4-导航跳转传递参数" class="headerlink" title="7.6.4 导航跳转传递参数"></a>7.6.4 导航跳转传递参数</h3><p>在导航进行跳转到下一个页面的同时，可以给下一个页面传递相应的参数，接收参数的页面可以通过onLoad生命周期进行接收</p><p>传递参数的页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">goAbout ():<span class="keyword">void</span>  &#123;</span><br><span class="line">  uni.navigateTo(&#123;</span><br><span class="line">    url: <span class="string">'/pages/about/about?id=80'</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收参数的页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onLoad (options) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-条件注释实现跨端兼容"><a href="#8-条件注释实现跨端兼容" class="headerlink" title="8 条件注释实现跨端兼容"></a>8 条件注释实现跨端兼容</h1><p>条件编译是用特殊的注释作为标记，在编译时根据这些特殊的注释，将注释里面的代码编译到不同平台。</p><p><strong>写法：</strong>以 #ifdef 加平台标识 开头，以 #endif 结尾。</p><p>平台标识</p><table><thead><tr><th>值</th><th>平台</th><th>参考文档</th></tr></thead><tbody><tr><td>APP-PLUS</td><td>5+App</td><td><a href="http://www.html5plus.org/doc/" target="_blank" rel="noopener">HTML5+ 规范</a></td></tr><tr><td>H5</td><td>H5</td><td></td></tr><tr><td>MP-WEIXIN</td><td>微信小程序</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/api/" target="_blank" rel="noopener">微信小程序</a></td></tr><tr><td>MP-ALIPAY</td><td>支付宝小程序</td><td><a href="https://docs.alipay.com/mini/developer/getting-started" target="_blank" rel="noopener">支付宝小程序</a></td></tr><tr><td>MP-BAIDU</td><td>百度小程序</td><td><a href="https://smartprogram.baidu.com/docs/develop/tutorial/codedir/" target="_blank" rel="noopener">百度小程序</a></td></tr><tr><td>MP-TOUTIAO</td><td>头条小程序</td><td><a href="https://developer.toutiao.com/dev/cn/mini-app/develop/framework/basic-reference/introduction" target="_blank" rel="noopener">头条小程序</a></td></tr><tr><td>MP-QQ</td><td>QQ小程序</td><td>（目前仅cli版支持）</td></tr><tr><td>MP</td><td>微信小程序/支付宝小程序/百度小程序/头条小程序/QQ小程序</td><td></td></tr></tbody></table><h2 id="8-1-组件的条件注释"><a href="#8-1-组件的条件注释" class="headerlink" title="8.1 组件的条件注释"></a>8.1 组件的条件注释</h2><p>代码演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- #ifdef H5 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  h5页面会显示</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #endif --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #ifdef MP-WEIXIN --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  微信小程序会显示</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #endif --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #ifdef APP-PLUS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  app会显示</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #endif --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-2-api的条件注释"><a href="#8-2-api的条件注释" class="headerlink" title="8.2 api的条件注释"></a>8.2 api的条件注释</h2><p>代码演示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">onLoad () &#123;</span><br><span class="line">  <span class="comment">//#ifdef MP-WEIXIN</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'微信小程序'</span>)</span><br><span class="line">  <span class="comment">//#endif</span></span><br><span class="line">  <span class="comment">//#ifdef H5</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'h5页面'</span>)</span><br><span class="line">  <span class="comment">//#endif</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-3-样式的条件注释"><a href="#8-3-样式的条件注释" class="headerlink" title="8.3 样式的条件注释"></a>8.3 样式的条件注释</h2><p>代码演示</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* #ifdef H5 */</span></span><br><span class="line"><span class="selector-tag">view</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* #endif */</span></span><br><span class="line"><span class="comment">/* #ifdef MP-WEIXIN */</span></span><br><span class="line"><span class="selector-tag">view</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* #endif */</span></span><br></pre></td></tr></table></figure><h1 id="9-uni-ui的使用"><a href="#9-uni-ui的使用" class="headerlink" title="9 uni-ui的使用"></a>9 uni-ui的使用</h1><p>uni-app中的UI组件库：<a href="https://ask.dcloud.net.cn/article/35489" target="_blank" rel="noopener">https://ask.dcloud.net.cn/article/35489</a></p><p><a href="https://uniapp.dcloud.io/component/README?id=uniui" target="_blank" rel="noopener">uni-ui文档</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.将资料中的uni-ui放入到项目components目录下(注意：不要npm install @dcloudio/uni-ui ，这种方式在子组件中无法使用)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.安装sass-loader</span></span><br><span class="line">npm install node-sass sass-loader@<span class="number">8.0</span><span class="number">.2</span>      重启hubuilderX</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.在页面组件和自定义组件中使用uni-ui</span></span><br><span class="line"><span class="keyword">import</span> uniBadge <span class="keyword">from</span> <span class="string">"@/components/uni-ui/lib/uni-badge/uni-badge.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> uniGrid <span class="keyword">from</span> <span class="string">"@/components/uni-ui/lib/uni-grid/uni-grid.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> uniGridItem <span class="keyword">from</span> <span class="string">"@/components/uni-ui/lib/uni-grid-item/uni-grid-item.vue"</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        uniBadge,</span><br><span class="line">        uniGrid,</span><br><span class="line">        uniGridItem</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;uni-badge text=<span class="string">"1"</span>&gt;&lt;<span class="regexp">/uni-badge&gt;</span></span><br><span class="line"><span class="regexp">&lt;uni-badge text="2" type="success"&gt;&lt;/u</span>ni-badge&gt;</span><br><span class="line">&lt;uni-badge text=<span class="string">"3"</span> type=<span class="string">"primary"</span> :inverted=<span class="string">"true"</span>&gt;&lt;<span class="regexp">/uni-badge&gt;</span></span><br><span class="line"><span class="regexp">&lt;uni-grid :column="3"&gt;</span></span><br><span class="line"><span class="regexp">&lt;uni-grid-item&gt;</span></span><br><span class="line"><span class="regexp">&lt;text class="text"&gt;文本&lt;/</span>text&gt;</span><br><span class="line">&lt;<span class="regexp">/uni-grid-item&gt;</span></span><br><span class="line"><span class="regexp">&lt;uni-grid-item&gt;</span></span><br><span class="line"><span class="regexp">&lt;text class="text"&gt;文本&lt;/</span>text&gt;</span><br><span class="line">&lt;<span class="regexp">/uni-grid-item&gt;</span></span><br><span class="line"><span class="regexp">&lt;uni-grid-item&gt;</span></span><br><span class="line"><span class="regexp">&lt;text class="text"&gt;文本&lt;/</span>text&gt;</span><br><span class="line">&lt;<span class="regexp">/uni-grid-item&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>ni-grid&gt;</span><br><span class="line">&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
